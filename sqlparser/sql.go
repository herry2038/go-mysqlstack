//line sql.y:17

package sqlparser

import __yyfmt__ "fmt"

//line sql.y:19

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CASCADE = 57363
const CONSTRAINT = 57364
const FULLTEXT = 57365
const HASH = 57366
const HASH2 = 57367
const INDEXES = 57368
const KEY_BLOCK_SIZE = 57369
const KEYS = 57370
const PARSER = 57371
const RESTRICT = 57372
const RTREE = 57373
const SPATIAL = 57374
const SYMBOL = 57375
const TEMPORARY = 57376
const UNIQUE = 57377
const KEY = 57378
const ALL = 57379
const DISTINCT = 57380
const AS = 57381
const EXISTS = 57382
const ASC = 57383
const DESC = 57384
const INTO = 57385
const DUPLICATE = 57386
const DEFAULT = 57387
const SET = 57388
const LOCK = 57389
const FULL = 57390
const CHECKSUM = 57391
const VALUES = 57392
const LAST_INSERT_ID = 57393
const NEXT = 57394
const VALUE = 57395
const SHARE = 57396
const MODE = 57397
const SQL_NO_CACHE = 57398
const SQL_CACHE = 57399
const JOIN = 57400
const STRAIGHT_JOIN = 57401
const LEFT = 57402
const RIGHT = 57403
const INNER = 57404
const OUTER = 57405
const CROSS = 57406
const NATURAL = 57407
const USE = 57408
const FORCE = 57409
const ON = 57410
const ID = 57411
const HEX = 57412
const STRING = 57413
const INTEGRAL = 57414
const FLOAT = 57415
const HEXNUM = 57416
const VALUE_ARG = 57417
const LIST_ARG = 57418
const COMMENT = 57419
const COMMENT_KEYWORD = 57420
const NULL = 57421
const TRUE = 57422
const FALSE = 57423
const OFF = 57424
const OR = 57425
const AND = 57426
const NOT = 57427
const BETWEEN = 57428
const CASE = 57429
const WHEN = 57430
const THEN = 57431
const ELSE = 57432
const END = 57433
const LE = 57434
const GE = 57435
const NE = 57436
const NULL_SAFE_EQUAL = 57437
const IS = 57438
const LIKE = 57439
const REGEXP = 57440
const IN = 57441
const SHIFT_LEFT = 57442
const SHIFT_RIGHT = 57443
const DIV = 57444
const MOD = 57445
const UNARY = 57446
const COLLATE = 57447
const BINARY = 57448
const INTERVAL = 57449
const JSON_EXTRACT_OP = 57450
const JSON_UNQUOTE_EXTRACT_OP = 57451
const CREATE = 57452
const ALTER = 57453
const DROP = 57454
const RENAME = 57455
const ANALYZE = 57456
const ADD = 57457
const MODIFY = 57458
const TABLE = 57459
const INDEX = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const USING = 57465
const PRIMARY = 57466
const COLUMN = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const BIT = 57476
const TINYINT = 57477
const SMALLINT = 57478
const MEDIUMINT = 57479
const INT = 57480
const INTEGER = 57481
const BIGINT = 57482
const INTNUM = 57483
const REAL = 57484
const DOUBLE = 57485
const FLOAT_TYPE = 57486
const DECIMAL = 57487
const NUMERIC = 57488
const TIME = 57489
const TIMESTAMP = 57490
const DATETIME = 57491
const YEAR = 57492
const CHAR = 57493
const VARCHAR = 57494
const BOOL = 57495
const CHARACTER = 57496
const VARBINARY = 57497
const NCHAR = 57498
const CHARSET = 57499
const TEXT = 57500
const TINYTEXT = 57501
const MEDIUMTEXT = 57502
const LONGTEXT = 57503
const BLOB = 57504
const TINYBLOB = 57505
const MEDIUMBLOB = 57506
const LONGBLOB = 57507
const JSON = 57508
const ENUM = 57509
const GEOMETRY = 57510
const POINT = 57511
const LINESTRING = 57512
const POLYGON = 57513
const GEOMETRYCOLLECTION = 57514
const MULTIPOINT = 57515
const MULTILINESTRING = 57516
const MULTIPOLYGON = 57517
const NULLX = 57518
const AUTO_INCREMENT = 57519
const APPROXNUM = 57520
const SIGNED = 57521
const UNSIGNED = 57522
const ZEROFILL = 57523
const FIXED = 57524
const DYNAMIC = 57525
const STORAGE = 57526
const DISK = 57527
const MEMORY = 57528
const COLUMN_FORMAT = 57529
const AVG_ROW_LENGTH = 57530
const COMPRESSION = 57531
const CONNECTION = 57532
const DATA = 57533
const DIRECTORY = 57534
const DELAY_KEY_WRITE = 57535
const ENCRYPTION = 57536
const INSERT_METHOD = 57537
const MAX_ROWS = 57538
const MIN_ROWS = 57539
const PACK_KEYS = 57540
const PASSWORD = 57541
const ROW_FORMAT = 57542
const STATS_AUTO_RECALC = 57543
const STATS_PERSISTENT = 57544
const STATS_SAMPLE_PAGES = 57545
const TABLESPACE = 57546
const COMPRESSED = 57547
const REDUNDANT = 57548
const COMPACT = 57549
const TOKUDB_DEFAULT = 57550
const TOKUDB_FAST = 57551
const TOKUDB_SMALL = 57552
const TOKUDB_ZLIB = 57553
const TOKUDB_QUICKLZ = 57554
const TOKUDB_LZMA = 57555
const TOKUDB_SNAPPY = 57556
const TOKUDB_UNCOMPRESSED = 57557
const COLLATION = 57558
const DATABASES = 57559
const TABLES = 57560
const WARNINGS = 57561
const VARIABLES = 57562
const EVENTS = 57563
const BINLOG = 57564
const GTID = 57565
const STATUS = 57566
const COLUMNS = 57567
const FIELDS = 57568
const CURRENT_TIMESTAMP = 57569
const CURRENT_DATE = 57570
const DATABASE = 57571
const SCHEMA = 57572
const CURRENT_TIME = 57573
const LOCALTIME = 57574
const LOCALTIMESTAMP = 57575
const UTC_DATE = 57576
const UTC_TIME = 57577
const UTC_TIMESTAMP = 57578
const REPLACE = 57579
const CONVERT = 57580
const CAST = 57581
const GROUP_CONCAT = 57582
const SEPARATOR = 57583
const MATCH = 57584
const AGAINST = 57585
const BOOLEAN = 57586
const LANGUAGE = 57587
const WITH = 57588
const QUERY = 57589
const EXPANSION = 57590
const UNUSED = 57591
const PARTITION = 57592
const PARTITIONS = 57593
const LIST = 57594
const XA = 57595
const DISTRIBUTED = 57596
const ENGINES = 57597
const VERSIONS = 57598
const PROCESSLIST = 57599
const QUERYZ = 57600
const TXNZ = 57601
const KILL = 57602
const ENGINE = 57603
const SINGLE = 57604
const BEGIN = 57605
const START = 57606
const TRANSACTION = 57607
const COMMIT = 57608
const ROLLBACK = 57609
const GLOBAL = 57610
const LOCAL = 57611
const SESSION = 57612
const NAMES = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const RADON = 57623
const ATTACH = 57624
const ATTACHLIST = 57625
const DETACH = 57626
const RESHARD = 57627
const CLEANUP = 57628
const RECOVER = 57629
const REBALANCE = 57630

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"HASH2",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4871

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 229,
	96, 867,
	-2, 677,
	-1, 235,
	96, 726,
	-2, 655,
	-1, 481,
	124, 707,
	-2, 703,
	-1, 482,
	124, 708,
	-2, 704,
	-1, 516,
	121, 86,
	168, 86,
	171, 86,
	174, 86,
	-2, 98,
	-1, 567,
	1, 79,
	306, 79,
	-2, 86,
	-1, 689,
	5, 27,
	-2, 626,
	-1, 724,
	121, 86,
	168, 86,
	171, 86,
	174, 86,
	-2, 99,
	-1, 782,
	36, 306,
	69, 306,
	72, 306,
	135, 306,
	-2, 864,
	-1, 835,
	1, 80,
	306, 80,
	-2, 86,
	-1, 924,
	124, 710,
	-2, 706,
	-1, 1101,
	5, 28,
	-2, 505,
	-1, 1125,
	5, 28,
	-2, 627,
	-1, 1257,
	5, 27,
	-2, 629,
	-1, 1385,
	5, 28,
	-2, 630,
}

const yyNprod = 915
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 10368

var yyAct = [...]int{

	482, 459, 1461, 1414, 1388, 1420, 592, 1289, 1290, 1282,
	1418, 422, 435, 831, 692, 1340, 954, 953, 1331, 1317,
	1029, 1185, 817, 702, 1328, 437, 1006, 978, 56, 1444,
	908, 230, 1227, 918, 234, 1094, 923, 1248, 109, 1086,
	864, 1247, 915, 66, 369, 1019, 204, 1008, 595, 950,
	460, 50, 649, 3, 370, 811, 693, 885, 934, 982,
	584, 457, 738, 752, 109, 836, 238, 434, 372, 786,
	1044, 226, 502, 424, 917, 490, 725, 501, 433, 484,
	213, 500, 1009, 109, 585, 109, 827, 567, 382, 225,
	223, 198, 420, 421, 55, 1134, 970, 1135, 1136, 969,
	710, 50, 971, 203, 711, 712, 503, 109, 504, 209,
	504, 503, 189, 419, 721, 722, 1341, 1389, 1487, 1460,
	192, 194, 193, 195, 196, 367, 197, 233, 1443, 366,
	1486, 187, 1434, 1422, 660, 1484, 1459, 365, 1433, 1240,
	1311, 387, 401, 364, 1400, 616, 615, 625, 626, 618,
	619, 620, 621, 622, 623, 624, 617, 861, 81, 627,
	386, 920, 763, 1015, 1016, 1017, 1039, 24, 51, 26,
	27, 1018, 455, 456, 70, 395, 992, 508, 991, 1035,
	773, 810, 1445, 71, 755, 1022, 75, 1423, 186, 1210,
	1023, 1024, 391, 818, 412, 414, 109, 1358, 1306, 393,
	394, 1050, 1304, 46, 1065, 1064, 1063, 28, 1034, 1011,
	36, 1380, 1382, 77, 1187, 383, 750, 374, 109, 1062,
	780, 109, 1163, 1410, 183, 380, 238, 37, 981, 60,
	53, 1060, 238, 238, 597, 1409, 486, 597, 1408, 377,
	376, 1187, 379, 413, 413, 1422, 375, 106, 985, 84,
	83, 984, 1338, 388, 983, 62, 63, 64, 65, 79,
	50, 1296, 487, 1128, 184, 1100, 188, 1098, 190, 191,
	759, 199, 200, 201, 202, 985, 963, 648, 984, 639,
	640, 983, 497, 1381, 1465, 72, 627, 233, 30, 31,
	32, 761, 34, 509, 509, 396, 818, 505, 602, 1423,
	617, 1401, 718, 627, 35, 47, 39, 605, 979, 48,
	49, 33, 389, 390, 1242, 1010, 398, 399, 400, 779,
	402, 403, 404, 405, 406, 407, 408, 1061, 1194, 753,
	1059, 866, 596, 1022, 1432, 596, 1036, 1037, 1023, 1024,
	754, 756, 757, 758, 603, 760, 761, 762, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 1288, 1424, 720,
	605, 962, 1032, 1033, 1446, 507, 935, 427, 485, 1428,
	73, 74, 570, 935, 569, 1111, 1165, 1164, 1195, 109,
	109, 675, 676, 569, 1286, 1079, 1080, 1081, 109, 109,
	1014, 397, 1480, 492, 1472, 1104, 109, 73, 74, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	512, 604, 603, 751, 411, 52, 604, 603, 1390, 415,
	1106, 417, 418, 1244, 865, 1281, 604, 603, 605, 53,
	1280, 38, 1277, 605, 1287, 1422, 1278, 1159, 40, 888,
	488, 41, 42, 605, 44, 43, 616, 615, 625, 626,
	618, 619, 620, 621, 622, 623, 624, 617, 637, 45,
	627, 1182, 588, 604, 603, 1105, 1180, 604, 603, 576,
	578, 620, 621, 622, 623, 624, 617, 586, 892, 627,
	605, 1158, 636, 638, 605, 1030, 1087, 1031, 1467, 1423,
	238, 1181, 890, 891, 889, 109, 1179, 1157, 109, 678,
	238, 878, 880, 881, 909, 1154, 910, 879, 647, 694,
	1149, 650, 651, 652, 653, 654, 655, 656, 372, 659,
	661, 661, 661, 661, 661, 661, 661, 661, 669, 670,
	671, 672, 699, 677, 697, 618, 619, 620, 621, 622,
	623, 624, 617, 1178, 690, 627, 689, 1148, 1147, 1161,
	1048, 681, 1047, 819, 820, 821, 1040, 410, 695, 1453,
	1361, 233, 774, 607, 1279, 719, 1268, 1267, 1162, 679,
	1155, 1151, 423, 1177, 1150, 593, 1141, 109, 109, 1160,
	833, 813, 814, 815, 816, 1072, 109, 109, 713, 705,
	704, 608, 1071, 1045, 1027, 1481, 109, 824, 825, 826,
	776, 1284, 373, 1473, 872, 662, 663, 664, 665, 666,
	667, 668, 886, 1476, 423, 1349, 606, 1351, 1448, 1351,
	1416, 1348, 593, 1413, 1411, 423, 1347, 860, 1283, 658,
	1355, 837, 604, 603, 589, 590, 887, 591, 1007, 594,
	1351, 1392, 1351, 1391, 598, 599, 600, 238, 869, 605,
	829, 830, 803, 802, 449, 448, 450, 451, 452, 453,
	238, 925, 799, 454, 1319, 1322, 1323, 1324, 1320, 716,
	1321, 1325, 1212, 937, 1405, 378, 1209, 1315, 423, 1069,
	922, 1351, 423, 924, 1156, 805, 1092, 423, 1068, 50,
	955, 238, 1201, 1200, 1197, 1198, 1197, 1196, 804, 797,
	694, 650, 952, 926, 972, 798, 238, 911, 914, 573,
	233, 1127, 423, 939, 871, 423, 960, 572, 912, 913,
	372, 936, 571, 517, 516, 1193, 927, 928, 1067, 381,
	931, 964, 932, 951, 871, 961, 961, 1123, 806, 956,
	1315, 50, 24, 957, 938, 1199, 940, 941, 57, 695,
	703, 943, 959, 942, 1120, 1092, 24, 709, 801, 949,
	707, 673, 24, 499, 53, 875, 876, 233, 882, 883,
	1394, 974, 975, 976, 973, 210, 812, 505, 1345, 980,
	966, 986, 987, 988, 989, 990, 1256, 967, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 977, 687, 1404, 1092, 53, 688, 862, 863, 961,
	1228, 800, 593, 870, 1092, 929, 930, 832, 808, 53,
	1274, 807, 1269, 67, 1191, 53, 1319, 1322, 1323, 1324,
	1320, 828, 1321, 1325, 1230, 485, 1041, 1042, 53, 823,
	109, 109, 109, 822, 951, 841, 840, 854, 839, 577,
	1232, 685, 1236, 1373, 1231, 1013, 1229, 1371, 1374, 76,
	22, 1234, 1372, 1407, 1406, 965, 1375, 1020, 1323, 1324,
	1370, 1233, 1369, 214, 215, 1474, 1458, 1078, 853, 874,
	1441, 491, 948, 1451, 1235, 1237, 947, 425, 1294, 1121,
	1146, 886, 1057, 1075, 1046, 489, 1145, 1051, 1043, 837,
	1052, 1049, 513, 496, 773, 856, 838, 579, 68, 1327,
	491, 1450, 211, 212, 852, 887, 426, 1254, 1189, 208,
	1026, 238, 217, 1089, 1025, 1012, 1272, 1090, 1468, 1074,
	1271, 1457, 1456, 430, 946, 205, 1455, 1273, 1101, 1102,
	1103, 80, 945, 1107, 1364, 109, 515, 1082, 1113, 514,
	1114, 1115, 1116, 1117, 206, 57, 1363, 1314, 703, 581,
	220, 849, 847, 843, 1335, 846, 848, 1028, 1124, 1125,
	1126, 601, 59, 1099, 694, 372, 372, 372, 61, 54,
	1, 363, 1096, 1387, 835, 1137, 834, 785, 784, 1129,
	1454, 1091, 1110, 69, 1442, 1132, 1419, 1449, 924, 1421,
	1426, 1142, 1122, 1398, 851, 1395, 1184, 1108, 1397, 1143,
	1144, 1133, 724, 723, 368, 775, 791, 1217, 1130, 1152,
	1153, 790, 789, 695, 787, 233, 1038, 850, 1073, 1138,
	1139, 1140, 809, 1076, 1285, 1188, 1186, 616, 615, 625,
	626, 618, 619, 620, 621, 622, 623, 624, 617, 796,
	795, 627, 717, 749, 748, 747, 746, 745, 109, 1190,
	744, 743, 742, 741, 740, 739, 372, 1056, 109, 737,
	736, 735, 734, 733, 1192, 732, 731, 730, 1202, 1203,
	726, 729, 728, 727, 794, 1070, 792, 788, 845, 522,
	520, 521, 519, 524, 523, 518, 238, 1112, 1077, 855,
	1326, 238, 1330, 1220, 1204, 1205, 1206, 1211, 1093, 82,
	1213, 844, 1066, 185, 1058, 1215, 458, 842, 593, 78,
	635, 109, 944, 1216, 1131, 955, 1221, 1021, 238, 238,
	922, 1222, 1226, 924, 231, 1224, 1238, 1241, 968, 1239,
	1255, 708, 1225, 1245, 706, 1246, 1251, 222, 221, 958,
	1262, 1263, 1264, 674, 107, 483, 1362, 1096, 1313, 1109,
	233, 657, 233, 933, 1265, 1266, 436, 877, 447, 444,
	446, 1252, 445, 680, 956, 686, 1261, 1258, 609, 1257,
	219, 428, 1379, 1250, 857, 90, 89, 392, 493, 1259,
	1260, 1318, 1316, 1249, 1119, 580, 1310, 1399, 684, 219,
	793, 219, 25, 58, 1088, 238, 238, 238, 216, 14,
	21, 1275, 15, 1292, 1293, 13, 12, 1276, 29, 1186,
	10, 9, 8, 219, 616, 615, 625, 626, 618, 619,
	620, 621, 622, 623, 624, 617, 7, 1297, 627, 1298,
	6, 5, 4, 207, 23, 2, 1302, 20, 19, 18,
	1307, 1308, 17, 109, 109, 16, 11, 777, 955, 778,
	1270, 0, 0, 0, 0, 0, 1291, 1291, 1291, 0,
	238, 0, 0, 1243, 1336, 238, 0, 1343, 1251, 0,
	1342, 0, 1344, 1208, 1299, 1300, 0, 1301, 0, 0,
	1303, 1309, 1305, 0, 0, 0, 0, 238, 1346, 0,
	0, 1350, 0, 1329, 1353, 1354, 1186, 956, 0, 50,
	0, 1337, 219, 1339, 0, 0, 109, 109, 109, 109,
	0, 0, 1360, 1357, 0, 0, 0, 109, 1226, 0,
	109, 1291, 0, 109, 219, 0, 1291, 219, 0, 238,
	1378, 1251, 1251, 1251, 1251, 1376, 238, 1352, 694, 1385,
	1384, 1383, 238, 1393, 1366, 1251, 1368, 1365, 233, 1367,
	1396, 0, 0, 0, 0, 0, 1252, 1252, 1252, 1252,
	0, 1403, 641, 642, 643, 644, 645, 646, 0, 0,
	1329, 0, 926, 1253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 238, 1415, 695, 0, 1412,
	1386, 0, 1417, 1427, 1430, 0, 1312, 1291, 1425, 1429,
	0, 1431, 0, 1291, 0, 0, 1440, 0, 0, 0,
	1447, 616, 615, 625, 626, 618, 619, 620, 621, 622,
	623, 624, 617, 0, 0, 627, 0, 0, 238, 238,
	238, 1463, 1464, 0, 0, 0, 0, 218, 0, 0,
	1452, 0, 1469, 0, 0, 0, 1291, 0, 0, 1437,
	1438, 1439, 0, 0, 0, 0, 384, 1479, 385, 0,
	0, 1466, 0, 1475, 0, 1477, 1478, 238, 1470, 1471,
	1482, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	409, 0, 0, 0, 0, 219, 219, 0, 0, 1462,
	1462, 1462, 0, 0, 219, 583, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 413, 539, 0, 0,
	0, 0, 0, 0, 0, 1402, 593, 615, 625, 626,
	618, 619, 620, 621, 622, 623, 624, 617, 1485, 0,
	627, 0, 0, 884, 0, 0, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 0, 0, 0, 0, 0, 1435, 1436, 625, 626,
	618, 619, 620, 621, 622, 623, 624, 617, 0, 416,
	627, 0, 0, 105, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 527, 0, 0, 0, 0, 0, 0,
	0, 495, 0, 0, 498, 102, 0, 0, 0, 0,
	0, 219, 0, 696, 698, 0, 0, 540, 0, 0,
	0, 0, 553, 556, 557, 558, 559, 560, 561, 101,
	562, 563, 564, 565, 566, 541, 542, 543, 544, 525,
	526, 554, 0, 528, 0, 0, 529, 530, 531, 532,
	533, 534, 535, 536, 537, 538, 545, 546, 547, 548,
	549, 550, 551, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 94, 103, 219, 219, 0, 0, 0, 0, 0,
	0, 0, 867, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 155,
	0, 111, 0, 0, 0, 135, 0, 0, 139, 142,
	143, 100, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 145, 0, 0, 163, 148, 0, 0,
	0, 0, 574, 575, 921, 698, 0, 0, 921, 921,
	0, 582, 921, 0, 237, 0, 0, 0, 0, 587,
	0, 0, 0, 117, 0, 0, 921, 921, 921, 921,
	99, 87, 0, 98, 96, 0, 85, 0, 93, 0,
	0, 921, 0, 0, 696, 0, 0, 0, 0, 616,
	615, 625, 626, 618, 619, 620, 621, 622, 623, 624,
	617, 0, 0, 627, 1083, 1084, 1085, 0, 0, 88,
	97, 91, 92, 95, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	161, 0, 172, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 134, 0, 0, 170, 171, 122, 175,
	0, 0, 114, 0, 0, 154, 0, 169, 691, 0,
	0, 0, 0, 0, 0, 141, 129, 136, 158, 146,
	159, 137, 152, 151, 153, 0, 0, 0, 164, 0,
	0, 133, 128, 168, 125, 149, 118, 112, 0, 119,
	120, 124, 123, 0, 140, 147, 150, 156, 157, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 219, 219, 219, 0,
	858, 859, 110, 115, 144, 0, 160, 131, 173, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	130, 165, 0, 166, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 179, 178, 180, 116, 181, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 0,
	614, 1218, 1219, 0, 0, 0, 628, 629, 630, 631,
	632, 633, 634, 921, 612, 613, 610, 616, 615, 625,
	626, 618, 619, 620, 621, 622, 623, 624, 617, 921,
	0, 627, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 696, 0,
	698, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 0,
	111, 0, 0, 0, 135, 0, 0, 139, 142, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 432, 0, 0, 0, 127, 431, 0, 0, 0,
	0, 468, 145, 0, 0, 163, 148, 0, 0, 0,
	0, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	53, 1295, 0, 481, 449, 448, 450, 451, 452, 453,
	0, 0, 117, 454, 455, 456, 0, 0, 0, 429,
	442, 0, 467, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 439, 440, 919, 0, 0, 0, 479, 0,
	441, 0, 0, 438, 443, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 698, 921, 174, 0, 0,
	477, 0, 0, 1053, 1054, 1055, 0, 121, 0, 161,
	0, 172, 113, 0, 0, 0, 0, 219, 0, 0,
	0, 126, 134, 1359, 0, 170, 171, 122, 175, 0,
	0, 114, 0, 0, 154, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 0, 0, 164, 0, 0,
	133, 128, 168, 125, 149, 118, 112, 0, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 132, 469, 475, 478, 1118, 476,
	473, 474, 472, 471, 470, 480, 463, 464, 466, 0,
	465, 110, 115, 144, 0, 160, 131, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	165, 0, 166, 0, 0, 0, 138, 0, 0, 219,
	1333, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 219, 219, 219, 0, 0, 0, 0,
	0, 1207, 0, 1377, 0, 0, 219, 0, 0, 1333,
	0, 1214, 696, 346, 330, 288, 349, 264, 279, 361,
	281, 282, 318, 247, 298, 155, 277, 111, 0, 248,
	0, 135, 0, 0, 139, 142, 143, 0, 327, 0,
	0, 0, 338, 347, 295, 0, 267, 240, 274, 241,
	265, 292, 127, 263, 332, 301, 280, 0, 355, 145,
	310, 0, 163, 148, 0, 0, 294, 335, 296, 328,
	287, 319, 256, 309, 350, 278, 315, 0, 0, 0,
	237, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	312, 344, 276, 314, 317, 239, 311, 0, 243, 249,
	360, 342, 270, 271, 0, 0, 0, 0, 0, 0,
	0, 293, 297, 324, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 0, 308, 0, 0, 0, 251,
	245, 291, 0, 0, 0, 255, 0, 269, 325, 0,
	0, 0, 336, 286, 174, 343, 284, 283, 351, 321,
	0, 333, 266, 275, 121, 273, 161, 316, 172, 113,
	340, 334, 306, 289, 290, 244, 0, 323, 126, 134,
	262, 313, 170, 171, 122, 175, 250, 357, 114, 236,
	356, 154, 235, 169, 341, 307, 303, 246, 339, 305,
	302, 141, 129, 136, 158, 146, 159, 137, 152, 151,
	153, 0, 242, 0, 164, 348, 362, 133, 128, 168,
	125, 149, 118, 112, 253, 119, 120, 124, 123, 0,
	140, 147, 150, 156, 157, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 337, 0, 0, 0, 0, 0, 167,
	252, 132, 259, 257, 260, 329, 258, 299, 300, 352,
	353, 354, 326, 254, 0, 0, 331, 304, 110, 115,
	144, 359, 160, 131, 173, 0, 0, 0, 0, 0,
	272, 358, 322, 320, 345, 0, 130, 165, 0, 166,
	224, 0, 0, 229, 227, 228, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 179, 178,
	180, 116, 181, 182, 346, 330, 288, 349, 264, 279,
	361, 281, 282, 318, 247, 298, 155, 277, 111, 0,
	248, 0, 135, 0, 0, 139, 142, 143, 0, 327,
	0, 0, 0, 338, 347, 295, 0, 267, 240, 274,
	241, 265, 292, 127, 263, 332, 301, 280, 0, 355,
	145, 310, 0, 163, 148, 0, 0, 294, 335, 296,
	328, 287, 319, 256, 309, 350, 278, 315, 0, 0,
	0, 237, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 312, 344, 276, 314, 317, 239, 311, 0, 243,
	249, 360, 342, 270, 271, 0, 0, 0, 0, 0,
	0, 0, 293, 297, 324, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 308, 0, 0, 0,
	251, 245, 291, 0, 0, 0, 255, 0, 269, 325,
	0, 0, 0, 336, 286, 174, 343, 284, 283, 351,
	321, 0, 333, 266, 275, 121, 273, 161, 316, 172,
	113, 340, 334, 306, 289, 290, 244, 0, 323, 126,
	134, 262, 313, 170, 171, 122, 175, 250, 357, 114,
	236, 356, 154, 235, 169, 341, 307, 303, 246, 339,
	305, 302, 141, 129, 136, 158, 146, 159, 137, 152,
	151, 153, 0, 242, 0, 164, 348, 362, 133, 128,
	168, 125, 149, 118, 112, 253, 119, 120, 124, 123,
	0, 140, 147, 150, 156, 157, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 337, 0, 0, 0, 0, 0,
	167, 252, 132, 259, 257, 260, 329, 258, 299, 300,
	352, 353, 354, 326, 254, 0, 0, 331, 304, 110,
	115, 144, 359, 160, 131, 173, 0, 0, 0, 0,
	0, 272, 358, 322, 320, 345, 0, 130, 165, 0,
	166, 0, 0, 0, 229, 227, 228, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 179,
	178, 180, 116, 181, 182, 346, 330, 288, 349, 264,
	279, 361, 281, 282, 318, 247, 298, 155, 277, 111,
	0, 248, 0, 135, 0, 0, 139, 142, 143, 0,
	327, 0, 0, 0, 338, 347, 295, 0, 267, 240,
	274, 241, 265, 292, 127, 263, 332, 301, 280, 0,
	355, 145, 310, 0, 163, 148, 0, 0, 294, 335,
	296, 328, 287, 319, 256, 309, 350, 278, 315, 0,
	0, 0, 237, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 312, 344, 276, 314, 317, 239, 311, 0,
	243, 249, 360, 342, 270, 271, 0, 0, 0, 0,
	0, 0, 0, 293, 297, 324, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 268, 0, 308, 0, 0,
	0, 251, 245, 291, 0, 0, 0, 255, 0, 269,
	325, 0, 0, 0, 336, 286, 174, 343, 284, 283,
	351, 321, 0, 333, 266, 275, 121, 273, 161, 316,
	172, 113, 340, 334, 306, 289, 290, 244, 0, 323,
	126, 134, 262, 313, 170, 171, 122, 175, 250, 357,
	114, 236, 356, 154, 235, 169, 341, 307, 303, 246,
	339, 305, 302, 141, 129, 136, 158, 146, 159, 137,
	152, 151, 153, 0, 242, 0, 164, 348, 362, 133,
	128, 168, 125, 149, 118, 112, 253, 119, 120, 124,
	123, 0, 140, 147, 150, 156, 157, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 337, 0, 0, 0, 0,
	0, 167, 252, 132, 259, 257, 260, 329, 258, 299,
	300, 352, 353, 354, 326, 254, 0, 0, 331, 304,
	110, 115, 144, 359, 160, 131, 173, 0, 0, 0,
	0, 0, 272, 358, 322, 320, 345, 0, 130, 165,
	0, 166, 506, 0, 0, 138, 0, 0, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	179, 178, 180, 116, 181, 182, 346, 330, 288, 349,
	264, 279, 361, 281, 282, 318, 247, 298, 155, 277,
	111, 0, 248, 0, 135, 0, 0, 139, 142, 143,
	0, 327, 0, 0, 0, 338, 347, 295, 0, 267,
	240, 274, 241, 265, 292, 127, 263, 332, 301, 280,
	0, 355, 145, 310, 0, 163, 148, 0, 0, 294,
	335, 296, 328, 287, 319, 256, 309, 350, 278, 315,
	0, 0, 0, 237, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 312, 344, 276, 314, 317, 239, 311,
	0, 243, 249, 360, 342, 270, 271, 0, 0, 0,
	0, 0, 0, 0, 293, 297, 324, 285, 0, 0,
	0, 0, 0, 0, 1356, 0, 268, 0, 308, 0,
	0, 0, 251, 245, 291, 0, 0, 0, 255, 0,
	269, 325, 0, 0, 0, 336, 286, 174, 343, 284,
	283, 351, 321, 0, 333, 266, 275, 121, 273, 161,
	316, 172, 113, 340, 334, 306, 289, 290, 244, 0,
	323, 126, 134, 262, 313, 170, 171, 122, 175, 250,
	357, 114, 700, 356, 154, 701, 169, 341, 307, 303,
	246, 339, 305, 302, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 242, 0, 164, 348, 362,
	133, 128, 168, 125, 149, 118, 112, 253, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 337, 0, 0, 0,
	0, 0, 167, 252, 132, 259, 257, 260, 329, 258,
	299, 300, 352, 353, 354, 326, 254, 0, 0, 331,
	304, 110, 115, 144, 359, 160, 131, 173, 0, 0,
	0, 0, 0, 272, 358, 322, 320, 345, 0, 130,
	165, 0, 166, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 346, 330, 288,
	349, 264, 279, 361, 281, 282, 318, 247, 298, 155,
	277, 111, 0, 248, 0, 135, 0, 0, 139, 142,
	143, 0, 327, 0, 0, 0, 338, 347, 295, 0,
	267, 240, 274, 241, 265, 292, 127, 263, 332, 301,
	280, 0, 355, 145, 310, 0, 163, 148, 0, 0,
	294, 335, 296, 328, 287, 319, 256, 309, 350, 278,
	315, 0, 0, 0, 481, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 312, 344, 276, 314, 317, 239,
	311, 0, 243, 249, 360, 342, 270, 271, 0, 0,
	0, 0, 0, 0, 0, 293, 297, 324, 285, 0,
	0, 0, 0, 0, 0, 1223, 0, 268, 0, 308,
	0, 0, 0, 251, 245, 291, 0, 0, 0, 255,
	0, 269, 325, 0, 0, 0, 336, 286, 174, 343,
	284, 283, 351, 321, 0, 333, 266, 275, 121, 273,
	161, 316, 172, 113, 340, 334, 306, 289, 290, 244,
	0, 323, 126, 134, 262, 313, 170, 171, 122, 175,
	250, 357, 114, 700, 356, 154, 701, 169, 341, 307,
	303, 246, 339, 305, 302, 141, 129, 136, 158, 146,
	159, 137, 152, 151, 153, 0, 242, 0, 164, 348,
	362, 133, 128, 168, 125, 149, 118, 112, 253, 119,
	120, 124, 123, 0, 140, 147, 150, 156, 157, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 337, 0, 0,
	0, 0, 0, 167, 252, 132, 259, 257, 260, 329,
	258, 299, 300, 352, 353, 354, 326, 254, 0, 0,
	331, 304, 110, 115, 144, 359, 160, 131, 173, 0,
	0, 0, 0, 0, 272, 358, 322, 320, 345, 0,
	130, 165, 0, 166, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 179, 178, 180, 116, 181, 182, 346, 330,
	288, 349, 264, 279, 361, 281, 282, 318, 247, 298,
	155, 277, 111, 0, 248, 0, 135, 0, 0, 139,
	142, 143, 0, 327, 0, 0, 0, 338, 347, 295,
	0, 267, 240, 274, 241, 265, 292, 127, 263, 332,
	301, 280, 0, 355, 145, 310, 0, 163, 148, 0,
	0, 294, 335, 296, 328, 287, 319, 256, 309, 350,
	278, 315, 0, 0, 0, 237, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 312, 344, 276, 314, 317,
	239, 311, 0, 243, 249, 360, 342, 270, 271, 0,
	0, 0, 0, 0, 0, 0, 293, 297, 324, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 268, 0,
	308, 0, 0, 0, 251, 245, 291, 0, 0, 0,
	255, 0, 269, 325, 0, 0, 0, 336, 286, 174,
	343, 284, 283, 351, 321, 0, 333, 266, 275, 121,
	273, 161, 316, 172, 113, 340, 334, 306, 289, 290,
	244, 0, 323, 126, 134, 262, 313, 170, 171, 122,
	175, 250, 357, 114, 236, 356, 154, 235, 169, 341,
	307, 303, 246, 339, 305, 302, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 242, 0, 164,
	348, 362, 133, 128, 168, 125, 149, 118, 112, 253,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 261, 337, 0,
	0, 0, 0, 0, 167, 252, 132, 259, 257, 260,
	329, 258, 299, 300, 352, 353, 354, 326, 254, 0,
	0, 331, 304, 110, 115, 144, 359, 160, 131, 173,
	0, 0, 0, 0, 0, 272, 358, 322, 320, 345,
	0, 130, 165, 0, 166, 0, 0, 0, 138, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 346,
	330, 288, 349, 264, 279, 361, 281, 282, 318, 247,
	298, 155, 277, 111, 0, 248, 0, 135, 0, 0,
	139, 142, 143, 0, 327, 0, 0, 0, 338, 347,
	295, 0, 267, 240, 274, 241, 265, 292, 127, 263,
	332, 301, 280, 0, 355, 145, 310, 0, 163, 148,
	0, 0, 294, 335, 296, 328, 287, 319, 256, 309,
	350, 278, 315, 0, 0, 0, 237, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 312, 344, 276, 314,
	317, 239, 311, 0, 243, 249, 360, 342, 270, 271,
	0, 0, 0, 0, 0, 0, 0, 293, 297, 324,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 268,
	0, 308, 0, 0, 0, 251, 245, 291, 0, 0,
	0, 255, 0, 269, 325, 0, 0, 0, 336, 286,
	174, 343, 284, 283, 351, 321, 0, 333, 266, 275,
	121, 273, 161, 316, 172, 113, 340, 334, 306, 289,
	290, 244, 0, 323, 126, 134, 262, 313, 170, 171,
	122, 175, 250, 357, 114, 700, 356, 154, 701, 169,
	341, 307, 303, 246, 339, 305, 302, 141, 129, 136,
	158, 146, 159, 137, 152, 151, 153, 0, 242, 0,
	164, 348, 362, 133, 128, 168, 125, 149, 118, 112,
	253, 119, 120, 124, 123, 0, 140, 147, 150, 156,
	157, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 337,
	0, 0, 0, 0, 0, 167, 252, 132, 259, 257,
	260, 329, 258, 299, 300, 352, 353, 354, 326, 254,
	0, 0, 331, 304, 110, 115, 144, 359, 160, 131,
	173, 0, 0, 0, 0, 0, 272, 358, 322, 320,
	345, 0, 130, 165, 0, 166, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 179, 178, 180, 116, 181, 182,
	346, 330, 288, 349, 264, 279, 361, 281, 282, 318,
	247, 298, 155, 277, 111, 0, 248, 0, 135, 0,
	0, 139, 142, 143, 0, 327, 0, 0, 0, 338,
	347, 295, 0, 267, 240, 274, 241, 265, 292, 127,
	263, 332, 301, 280, 0, 355, 145, 310, 0, 163,
	148, 0, 0, 294, 335, 296, 328, 287, 319, 256,
	309, 350, 278, 315, 0, 0, 0, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 312, 344, 276,
	314, 317, 239, 311, 0, 243, 249, 360, 342, 270,
	271, 0, 0, 0, 0, 0, 0, 0, 293, 297,
	324, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 308, 0, 0, 0, 251, 245, 291, 0,
	0, 0, 255, 0, 269, 325, 0, 0, 0, 336,
	286, 174, 343, 284, 283, 351, 321, 0, 333, 266,
	275, 121, 273, 161, 316, 172, 113, 340, 334, 306,
	289, 290, 244, 0, 323, 126, 134, 262, 313, 170,
	171, 122, 175, 250, 357, 114, 700, 356, 154, 701,
	169, 341, 307, 303, 246, 339, 305, 302, 141, 129,
	136, 158, 146, 159, 137, 152, 151, 153, 0, 242,
	0, 164, 348, 362, 133, 128, 168, 125, 149, 118,
	112, 253, 119, 120, 124, 123, 0, 140, 147, 150,
	156, 157, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	337, 0, 0, 0, 0, 0, 167, 252, 132, 259,
	257, 260, 329, 258, 299, 300, 352, 353, 354, 326,
	254, 0, 0, 331, 304, 110, 115, 144, 359, 160,
	131, 173, 0, 0, 0, 0, 0, 272, 358, 322,
	320, 345, 0, 130, 165, 0, 166, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 179, 178, 180, 116, 181,
	182, 346, 330, 288, 349, 264, 279, 361, 281, 282,
	318, 247, 298, 155, 277, 111, 0, 248, 0, 135,
	0, 0, 139, 142, 143, 0, 327, 0, 0, 0,
	338, 347, 295, 0, 267, 240, 274, 241, 265, 292,
	127, 263, 332, 301, 280, 0, 355, 145, 310, 0,
	163, 148, 0, 0, 294, 335, 296, 328, 287, 319,
	256, 309, 350, 278, 315, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 312, 344,
	276, 314, 317, 239, 311, 0, 243, 249, 360, 342,
	270, 271, 0, 0, 0, 0, 0, 0, 0, 293,
	297, 324, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 308, 0, 0, 0, 251, 245, 291,
	0, 0, 0, 255, 0, 269, 325, 0, 0, 0,
	336, 286, 174, 343, 284, 283, 351, 321, 0, 333,
	266, 275, 121, 273, 161, 316, 172, 113, 340, 334,
	306, 289, 290, 244, 0, 323, 126, 134, 262, 313,
	170, 171, 122, 175, 250, 357, 114, 700, 356, 154,
	701, 169, 341, 307, 303, 246, 339, 305, 302, 141,
	129, 136, 158, 146, 159, 137, 152, 151, 153, 0,
	242, 0, 164, 348, 362, 133, 128, 168, 125, 149,
	118, 112, 253, 119, 120, 124, 123, 0, 140, 147,
	150, 156, 157, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 337, 0, 0, 0, 0, 0, 167, 252, 132,
	259, 257, 260, 329, 258, 299, 300, 352, 353, 354,
	326, 254, 0, 0, 331, 304, 110, 115, 144, 359,
	160, 131, 173, 0, 0, 0, 0, 0, 272, 358,
	322, 320, 345, 0, 130, 165, 0, 166, 0, 0,
	155, 138, 111, 0, 0, 0, 135, 0, 0, 139,
	142, 143, 0, 0, 176, 177, 179, 178, 180, 116,
	181, 182, 0, 432, 0, 0, 0, 127, 431, 0,
	0, 0, 0, 468, 145, 0, 0, 163, 148, 0,
	0, 0, 0, 461, 462, 0, 0, 0, 0, 0,
	0, 714, 53, 0, 0, 481, 449, 448, 450, 451,
	452, 453, 0, 0, 117, 454, 455, 456, 715, 0,
	0, 429, 442, 0, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 439, 440, 0, 0, 0, 0,
	479, 0, 441, 0, 0, 438, 443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 477, 0, 0, 0, 0, 0, 0, 121,
	0, 161, 0, 172, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 134, 0, 0, 170, 171, 122,
	175, 0, 0, 114, 0, 0, 154, 0, 169, 0,
	0, 0, 0, 0, 0, 0, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 0, 0, 164,
	0, 0, 133, 128, 168, 125, 149, 118, 112, 0,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 132, 469, 475, 478,
	0, 476, 473, 474, 472, 471, 470, 480, 463, 464,
	466, 0, 465, 110, 115, 144, 0, 160, 131, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 165, 0, 166, 0, 0, 155, 138, 111,
	0, 0, 0, 135, 0, 0, 139, 142, 143, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 0,
	432, 0, 0, 0, 127, 431, 0, 0, 0, 0,
	468, 145, 0, 0, 163, 148, 0, 0, 0, 0,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 481, 449, 448, 450, 451, 452, 453, 0,
	0, 117, 454, 455, 456, 0, 0, 0, 429, 442,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 439, 440, 919, 0, 0, 0, 479, 0, 441,
	0, 0, 438, 443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 477,
	0, 0, 0, 0, 0, 0, 121, 0, 161, 0,
	172, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 134, 0, 0, 170, 171, 122, 175, 0, 0,
	114, 0, 0, 154, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 141, 129, 136, 158, 146, 159, 137,
	152, 151, 153, 0, 0, 0, 164, 0, 0, 133,
	128, 168, 125, 149, 118, 112, 0, 119, 120, 124,
	123, 0, 140, 147, 150, 156, 157, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 132, 469, 475, 478, 0, 476, 473,
	474, 472, 471, 470, 480, 463, 464, 466, 0, 465,
	110, 115, 144, 0, 160, 131, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 165,
	0, 166, 0, 0, 155, 138, 111, 0, 0, 0,
	135, 0, 0, 139, 142, 143, 0, 0, 176, 177,
	179, 178, 180, 116, 181, 182, 0, 432, 0, 0,
	0, 127, 431, 0, 0, 0, 0, 468, 145, 0,
	0, 163, 148, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 423, 481,
	449, 448, 450, 451, 452, 453, 0, 0, 117, 454,
	455, 456, 0, 0, 0, 429, 442, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 439, 440,
	0, 0, 0, 0, 479, 0, 441, 0, 0, 438,
	443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 477, 0, 0, 0,
	0, 0, 0, 121, 0, 161, 0, 172, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 134, 0,
	0, 170, 171, 122, 175, 0, 0, 114, 0, 0,
	154, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	141, 129, 136, 158, 146, 159, 137, 152, 151, 153,
	0, 0, 0, 164, 0, 0, 133, 128, 168, 125,
	149, 118, 112, 0, 119, 120, 124, 123, 0, 140,
	147, 150, 156, 157, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	132, 469, 475, 478, 0, 476, 473, 474, 472, 471,
	470, 480, 463, 464, 466, 0, 465, 110, 115, 144,
	0, 160, 131, 173, 0, 0, 0, 0, 0, 0,
	24, 0, 0, 0, 0, 130, 165, 0, 166, 0,
	0, 155, 138, 111, 0, 0, 0, 135, 0, 0,
	139, 142, 143, 0, 0, 176, 177, 179, 178, 180,
	116, 181, 182, 0, 432, 0, 0, 0, 127, 431,
	0, 0, 0, 0, 468, 145, 0, 0, 163, 148,
	0, 0, 0, 0, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 481, 449, 448, 450,
	451, 452, 453, 0, 0, 117, 454, 455, 456, 0,
	0, 0, 429, 442, 0, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 439, 440, 0, 0, 0,
	0, 479, 0, 441, 0, 0, 438, 443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 477, 0, 0, 0, 0, 0, 0,
	121, 0, 161, 0, 172, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 134, 0, 0, 170, 171,
	122, 175, 0, 0, 114, 0, 0, 154, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 141, 129, 136,
	158, 146, 159, 137, 152, 151, 153, 0, 0, 0,
	164, 0, 0, 133, 128, 168, 125, 149, 118, 112,
	0, 119, 120, 124, 123, 0, 140, 147, 150, 156,
	157, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 132, 469, 475,
	478, 0, 476, 473, 474, 472, 471, 470, 480, 463,
	464, 466, 0, 465, 110, 115, 144, 0, 160, 131,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 165, 0, 166, 0, 0, 155, 138,
	111, 0, 0, 0, 135, 0, 0, 139, 142, 143,
	0, 0, 176, 177, 179, 178, 180, 116, 181, 182,
	0, 432, 0, 0, 0, 127, 431, 0, 0, 0,
	0, 468, 145, 0, 0, 163, 148, 0, 0, 0,
	0, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 481, 449, 448, 450, 451, 452, 453,
	0, 0, 117, 454, 455, 456, 0, 0, 0, 429,
	442, 0, 467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 440, 0, 0, 0, 0, 479, 0,
	441, 0, 0, 438, 443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	477, 0, 0, 0, 0, 0, 0, 121, 0, 161,
	0, 172, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 134, 0, 0, 170, 171, 122, 175, 0,
	0, 114, 0, 0, 154, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 0, 0, 164, 0, 0,
	133, 128, 168, 125, 149, 118, 112, 0, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 132, 469, 475, 478, 0, 476,
	473, 474, 472, 471, 470, 480, 463, 464, 466, 0,
	465, 110, 115, 144, 0, 160, 131, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	165, 155, 166, 111, 0, 0, 138, 135, 0, 0,
	139, 142, 143, 0, 0, 0, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 0, 127, 0,
	0, 0, 0, 0, 468, 145, 0, 0, 163, 148,
	0, 0, 0, 0, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 481, 449, 448, 450,
	451, 452, 453, 0, 0, 117, 454, 455, 456, 0,
	0, 0, 0, 442, 0, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 439, 440, 0, 0, 0,
	0, 479, 0, 441, 0, 0, 438, 443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 477, 0, 0, 0, 0, 0, 0,
	121, 0, 161, 0, 172, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 134, 0, 0, 170, 171,
	122, 175, 0, 0, 114, 0, 0, 154, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 141, 129, 136,
	158, 146, 159, 137, 152, 151, 153, 0, 0, 0,
	164, 0, 0, 133, 128, 168, 125, 149, 118, 112,
	0, 119, 120, 124, 123, 0, 140, 147, 150, 156,
	157, 162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 132, 469, 475,
	478, 0, 476, 473, 474, 472, 471, 470, 480, 463,
	464, 466, 0, 465, 110, 115, 144, 0, 160, 131,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 165, 0, 166, 0, 0, 155, 138,
	111, 0, 0, 0, 135, 0, 0, 139, 142, 143,
	0, 0, 176, 177, 179, 178, 180, 116, 181, 182,
	1095, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 145, 0, 0, 163, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 237, 0, 1097, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 0, 0, 604, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 161,
	0, 172, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 134, 0, 0, 170, 171, 122, 175, 0,
	0, 114, 0, 0, 154, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 0, 0, 164, 0, 0,
	133, 128, 168, 125, 149, 118, 112, 0, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 155,
	0, 111, 0, 0, 783, 782, 0, 0, 139, 142,
	143, 0, 0, 0, 781, 0, 0, 0, 780, 0,
	0, 0, 167, 0, 132, 0, 127, 0, 0, 0,
	0, 0, 0, 145, 0, 0, 163, 148, 0, 0,
	0, 110, 115, 144, 0, 160, 131, 173, 0, 0,
	0, 0, 0, 0, 371, 0, 0, 0, 0, 130,
	165, 0, 166, 117, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 779, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	161, 0, 172, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 134, 0, 0, 170, 171, 122, 175,
	0, 0, 114, 0, 0, 154, 0, 169, 0, 0,
	0, 0, 0, 0, 0, 141, 129, 136, 158, 146,
	159, 137, 152, 151, 153, 0, 0, 0, 164, 0,
	0, 133, 128, 168, 125, 149, 118, 112, 0, 119,
	120, 124, 123, 0, 140, 147, 150, 156, 157, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 115, 144, 0, 160, 131, 173, 0,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 165, 155, 166, 111, 0, 0, 138, 135, 0,
	0, 139, 142, 143, 0, 0, 0, 0, 0, 0,
	176, 177, 179, 178, 180, 116, 181, 182, 0, 127,
	0, 0, 0, 0, 0, 0, 145, 0, 0, 163,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 161, 0, 172, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 134, 0, 0, 170,
	171, 122, 175, 0, 0, 114, 0, 0, 154, 0,
	169, 0, 0, 0, 0, 0, 0, 0, 141, 129,
	136, 158, 146, 159, 137, 152, 151, 153, 0, 0,
	0, 164, 0, 0, 133, 128, 168, 125, 149, 118,
	112, 0, 119, 120, 124, 123, 0, 140, 147, 150,
	156, 157, 162, 155, 0, 111, 0, 0, 0, 135,
	0, 0, 139, 142, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 167, 0, 132, 0,
	127, 0, 0, 0, 0, 0, 0, 145, 0, 0,
	163, 148, 0, 0, 0, 110, 115, 144, 0, 160,
	131, 173, 0, 0, 0, 0, 0, 0, 108, 0,
	1334, 0, 0, 130, 165, 0, 166, 117, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 179, 178, 180, 116, 181,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 161, 0, 172, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 134, 0, 0,
	170, 171, 122, 175, 0, 0, 114, 0, 0, 154,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 141,
	129, 136, 158, 146, 159, 137, 152, 151, 153, 0,
	0, 0, 164, 0, 0, 133, 128, 168, 125, 149,
	118, 112, 0, 119, 120, 124, 123, 0, 140, 147,
	150, 156, 157, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 115, 144, 0,
	160, 131, 173, 0, 0, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 165, 155, 166, 111, 0,
	0, 138, 135, 0, 0, 139, 142, 143, 0, 0,
	0, 0, 0, 0, 176, 177, 179, 178, 180, 116,
	181, 182, 0, 127, 0, 0, 0, 0, 0, 0,
	145, 0, 0, 163, 148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 237, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 161, 0, 172,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	134, 0, 0, 170, 171, 122, 175, 0, 0, 114,
	0, 0, 154, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 141, 129, 136, 158, 146, 159, 137, 152,
	151, 153, 0, 0, 0, 164, 0, 0, 133, 128,
	168, 125, 149, 118, 112, 0, 119, 120, 124, 123,
	0, 140, 147, 150, 156, 157, 162, 0, 155, 0,
	111, 0, 0, 0, 135, 0, 0, 139, 142, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 132, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 145, 0, 0, 163, 148, 0, 0, 110,
	115, 144, 0, 160, 131, 173, 0, 0, 0, 0,
	0, 0, 0, 237, 0, 0, 682, 130, 165, 683,
	166, 0, 117, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 179,
	178, 180, 116, 181, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 161,
	0, 172, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 134, 0, 0, 170, 171, 122, 175, 0,
	0, 114, 0, 0, 154, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 0, 0, 164, 0, 0,
	133, 128, 168, 125, 149, 118, 112, 0, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 155,
	0, 111, 0, 0, 0, 135, 0, 0, 139, 142,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 132, 0, 127, 511, 0, 0,
	0, 0, 0, 145, 0, 0, 163, 148, 0, 0,
	0, 110, 115, 144, 0, 160, 131, 173, 0, 0,
	0, 0, 0, 0, 237, 0, 510, 0, 0, 130,
	165, 0, 166, 117, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	161, 0, 172, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 134, 0, 0, 170, 171, 122, 175,
	0, 0, 114, 0, 0, 154, 0, 169, 0, 0,
	0, 0, 0, 0, 0, 141, 129, 136, 158, 146,
	159, 137, 152, 151, 153, 0, 0, 0, 164, 0,
	0, 133, 128, 168, 125, 149, 118, 112, 0, 119,
	120, 124, 123, 0, 140, 147, 150, 156, 157, 162,
	155, 0, 111, 0, 0, 0, 135, 0, 0, 139,
	142, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 132, 0, 127, 0, 0,
	0, 0, 0, 0, 145, 0, 0, 163, 148, 0,
	0, 0, 110, 115, 144, 0, 160, 131, 173, 0,
	0, 0, 0, 0, 0, 108, 0, 1334, 0, 0,
	130, 165, 0, 166, 117, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 179, 178, 180, 116, 181, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 161, 0, 172, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 134, 0, 0, 170, 171, 122,
	175, 0, 0, 114, 0, 0, 154, 0, 169, 0,
	0, 0, 0, 0, 0, 0, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 0, 0, 164,
	0, 0, 133, 128, 168, 125, 149, 118, 112, 0,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 155, 0, 111, 0, 0, 0, 135, 0, 0,
	139, 142, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 132, 0, 127, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 163, 148,
	0, 0, 0, 110, 115, 144, 0, 160, 131, 173,
	0, 0, 0, 53, 0, 0, 108, 0, 0, 0,
	0, 130, 165, 0, 166, 117, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 161, 0, 172, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 134, 0, 0, 170, 171,
	122, 175, 0, 0, 114, 0, 0, 154, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 141, 129, 136,
	158, 146, 159, 137, 152, 151, 153, 0, 0, 0,
	164, 0, 0, 133, 128, 168, 125, 149, 118, 112,
	0, 119, 120, 124, 123, 0, 140, 147, 150, 156,
	157, 162, 155, 0, 111, 0, 0, 0, 135, 0,
	0, 139, 142, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 132, 0, 127,
	0, 0, 0, 0, 0, 0, 145, 0, 0, 163,
	148, 0, 0, 0, 110, 115, 144, 0, 160, 131,
	173, 0, 0, 0, 0, 0, 0, 237, 0, 1097,
	0, 0, 130, 165, 0, 166, 117, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 179, 178, 180, 116, 181, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 161, 0, 172, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 134, 0, 0, 170,
	171, 122, 175, 0, 0, 114, 0, 0, 154, 0,
	169, 0, 0, 0, 0, 0, 0, 0, 141, 129,
	136, 158, 146, 159, 137, 152, 151, 153, 0, 0,
	0, 164, 0, 0, 133, 128, 168, 125, 149, 118,
	112, 0, 119, 120, 124, 123, 0, 140, 147, 150,
	156, 157, 162, 155, 0, 111, 0, 0, 0, 135,
	0, 0, 139, 142, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 132, 494,
	127, 0, 0, 0, 0, 0, 0, 145, 0, 0,
	163, 148, 0, 0, 0, 110, 115, 144, 0, 160,
	131, 173, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 130, 165, 0, 166, 117, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 179, 178, 180, 116, 181,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 161, 0, 172, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 134, 0, 0,
	170, 171, 122, 175, 0, 0, 114, 0, 0, 154,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 141,
	129, 136, 158, 146, 159, 137, 152, 151, 153, 0,
	0, 0, 164, 0, 0, 133, 128, 168, 125, 149,
	118, 112, 0, 119, 120, 124, 123, 0, 140, 147,
	150, 156, 157, 162, 155, 0, 111, 0, 0, 0,
	135, 0, 0, 139, 142, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 132,
	0, 127, 0, 0, 0, 0, 0, 0, 145, 0,
	0, 163, 148, 0, 0, 0, 110, 115, 144, 0,
	160, 131, 173, 0, 0, 0, 0, 0, 0, 237,
	0, 0, 0, 0, 130, 165, 0, 166, 117, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 179, 178, 180, 116,
	181, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 161, 0, 172, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 134, 0,
	0, 170, 171, 122, 175, 0, 0, 114, 0, 0,
	154, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	141, 129, 136, 158, 146, 159, 137, 152, 151, 153,
	0, 0, 0, 164, 0, 0, 133, 128, 168, 125,
	149, 118, 112, 0, 119, 120, 124, 123, 0, 140,
	147, 150, 156, 157, 162, 155, 0, 111, 0, 0,
	0, 135, 0, 0, 139, 142, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	132, 0, 127, 0, 0, 0, 0, 0, 0, 145,
	0, 0, 163, 148, 0, 0, 0, 110, 115, 144,
	0, 160, 131, 173, 0, 0, 0, 0, 0, 0,
	481, 0, 0, 0, 0, 130, 165, 0, 166, 117,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 179, 178, 180,
	116, 181, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 161, 0, 172, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 134,
	0, 0, 170, 171, 122, 175, 0, 0, 114, 0,
	0, 154, 0, 169, 0, 0, 0, 0, 0, 0,
	0, 141, 129, 136, 158, 146, 159, 137, 152, 151,
	153, 0, 0, 0, 164, 0, 0, 133, 128, 168,
	125, 149, 118, 112, 0, 119, 120, 124, 123, 0,
	140, 147, 150, 156, 157, 162, 155, 0, 111, 0,
	0, 0, 135, 0, 0, 139, 142, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 167,
	0, 132, 0, 127, 0, 0, 0, 0, 0, 0,
	145, 0, 0, 163, 148, 0, 0, 0, 110, 115,
	144, 0, 160, 131, 173, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 130, 165, 0, 166,
	117, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 179, 178,
	180, 116, 181, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 161, 0, 172,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	134, 0, 0, 170, 171, 122, 175, 0, 0, 114,
	0, 0, 154, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 141, 129, 136, 158, 146, 159, 137, 152,
	151, 153, 0, 0, 0, 164, 0, 0, 133, 128,
	168, 125, 149, 118, 112, 0, 119, 120, 124, 123,
	0, 140, 147, 150, 156, 157, 162, 155, 0, 111,
	0, 0, 0, 135, 0, 0, 139, 142, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 132, 0, 127, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 163, 148, 0, 0, 0, 110,
	115, 144, 0, 160, 131, 173, 0, 0, 0, 0,
	0, 0, 371, 0, 0, 0, 0, 130, 165, 0,
	166, 117, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 179,
	178, 180, 116, 181, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 161, 0,
	172, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 134, 0, 0, 170, 171, 122, 175, 0, 0,
	114, 0, 0, 154, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 141, 129, 136, 158, 146, 159, 137,
	152, 151, 153, 0, 0, 0, 164, 0, 0, 133,
	128, 168, 125, 149, 118, 112, 0, 119, 120, 124,
	123, 0, 140, 147, 150, 156, 157, 162, 155, 0,
	111, 0, 0, 0, 135, 0, 0, 139, 142, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 132, 0, 127, 0, 0, 0, 0,
	0, 0, 145, 0, 0, 163, 148, 0, 0, 0,
	110, 115, 144, 0, 160, 131, 173, 0, 0, 0,
	0, 0, 0, 1183, 0, 0, 0, 0, 130, 165,
	0, 166, 117, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	179, 178, 180, 116, 181, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 161,
	0, 172, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 134, 0, 0, 170, 171, 122, 175, 0,
	0, 114, 0, 0, 154, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 0, 0, 164, 0, 0,
	133, 128, 168, 125, 149, 118, 112, 0, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 155,
	0, 111, 0, 0, 0, 135, 0, 0, 139, 142,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 132, 0, 127, 0, 0, 0,
	0, 0, 0, 145, 0, 0, 163, 148, 0, 0,
	0, 110, 115, 144, 0, 160, 131, 173, 0, 0,
	0, 0, 0, 0, 568, 0, 0, 0, 0, 130,
	165, 0, 166, 117, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	161, 0, 172, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 134, 0, 0, 170, 171, 122, 175,
	0, 0, 114, 0, 0, 154, 0, 169, 0, 0,
	0, 0, 0, 0, 0, 141, 129, 136, 158, 146,
	159, 137, 152, 151, 153, 0, 0, 0, 164, 0,
	0, 133, 128, 168, 125, 149, 118, 112, 0, 119,
	120, 124, 123, 0, 140, 147, 150, 156, 157, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 115, 144, 0, 160, 131, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 165, 0, 166, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 179, 178, 180, 116, 181, 182,
}
var yyPact = [...]int{

	161, -1000, -212, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 941, 967, -1000, -1000, -1000, -1000, -1000, 754,
	151, 75, 124, 116, 115, 1557, 113, 9459, -1000, -1000,
	-76, -1000, -170, -1000, -1000, -179, -1000, -1000, -1000, -1000,
	750, -1000, -1000, -1000, -1000, -1000, 919, 939, 769, 875,
	817, -1000, 75, 9459, 950, 2448, -142, 9660, 78, 111,
	105, 104, 78, -1000, -1000, -1000, 108, -1000, 91, 657,
	76, -1000, 9459, -1000, 9459, -78, 7, -1000, -1000, -43,
	285, -1000, -1000, -1000, -99, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9459, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 482, -1000, -1000, -1000, -1000,
	-1000, -1000, 695, 695, -1000, 9459, -1000, -1000, -191, -1000,
	-1000, -1000, -1000, 501, 869, 6191, 6191, 941, -1000, 750,
	-1000, -1000, -1000, 843, -1000, -1000, 313, 8856, 857, 158,
	9459, 693, -1000, -1000, -183, 3050, -1000, -1000, -1000, -1000,
	269, 8052, 8052, -1000, -1000, -1000, 856, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 934, 931, 653, -1000,
	1471, -1000, -1000, 10062, 284, 650, 645, 637, 9459, 9459,
	76, 781, 10062, 867, -1000, -1000, 949, 9459, 9459, -1000,
	-1000, 285, 285, -1000, -1000, 9459, -1000, -1000, -1000, -1000,
	-1000, 285, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6191, -1000, -1000, 198, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 963, 192, 546, -1000, 6191,
	1930, 695, 695, -1000, -1000, 154, -1000, -1000, 6454, 6454,
	6454, 6454, 6454, 6454, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 695, 153, -1000,
	5924, 695, 695, 695, 695, 695, 695, 6191, 695, 695,
	695, 695, 695, 695, 695, 695, 695, 695, 695, 695,
	695, -1000, -1000, 691, -1000, 340, 919, 501, 817, 7851,
	792, -1000, -1000, 756, 9459, -1000, 9258, 4856, 947, 2749,
	-1000, 690, 687, -190, -188, -1000, -183, 5123, -1000, -1000,
	-1000, -1000, 181, -1000, 695, 90, 135, 6922, 617, -16,
	-1000, -1000, -1000, 707, -1000, 707, 707, 707, 707, 22,
	22, 22, 22, -1000, -1000, -1000, -1000, -1000, 774, 770,
	-1000, 707, 707, 707, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 762, 762, 762, 748, 748, 859, -1000, -1000,
	866, 780, 778, 777, -1000, 833, 9459, 9459, -1000, -1000,
	919, -83, -1000, -1000, 320, 9459, 9459, 285, -1000, -1000,
	-1000, -1000, 644, 377, -1000, 9459, -1000, -1000, -1000, -1000,
	-1000, -1000, 825, 6191, 6191, 419, 6191, 6191, 204, 6454,
	360, 388, 6454, 6454, 6454, 6454, 6454, 6454, 6454, 6454,
	6454, 6454, 6454, 6454, 6454, 6454, 6454, 432, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 635, -1000, 750, 581,
	581, 165, 165, 165, 165, 165, 1702, 2081, 4555, 501,
	5924, 5390, 5390, 6191, 6191, 5390, 872, 274, 377, 9057,
	-1000, 501, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5390,
	5390, 5390, 5390, 6191, -1000, -1000, -1000, 869, -1000, 872,
	924, -1000, 836, 832, 5390, -1000, 776, 9258, 695, -1000,
	7649, -1000, 739, -1000, 265, -1000, 152, -1000, -1000, -1000,
	-1000, -1000, 941, 6191, -1000, 3953, -1000, -181, -1000, -178,
	-195, -1000, -1000, -1000, -1000, -1000, 377, -1000, 632, 9660,
	695, 695, 695, -1000, 135, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	212, 212, 107, 212, 212, 212, 212, 212, -31, -33,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, -1000, -1000, -1000, 566, 184, 174, -1000,
	-1000, -1000, -1000, 892, -1000, 617, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 308, 89,
	-1000, 888, -1000, 884, 520, 959, 413, 163, 134, -32,
	-1000, -1000, 481, 22, 22, -1000, -1000, -1000, 852, -1000,
	-1000, -1000, 519, 519, -1000, -1000, -1000, -1000, 477, -1000,
	-1000, -1000, 475, -1000, -1000, 859, -1000, 80, -1000, 9459,
	9459, 9459, -1000, 195, 231, 82, 64, 63, 62, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 658, -1000, -1000,
	-1000, 518, -1000, -1000, -1000, 511, 6191, -1000, 285, 947,
	-1000, 6191, -1000, -1000, 822, 204, 257, -1000, -1000, 303,
	-1000, -1000, 377, 377, 1314, -1000, -1000, -1000, -1000, 360,
	6454, 6454, 6454, 339, 1314, 1117, 1459, 1419, 165, 358,
	358, 182, 182, 182, 182, 182, 424, 424, -1000, -1000,
	-1000, 501, -1000, -1000, -1000, 501, 5390, 685, -1000, -1000,
	6721, 143, 695, 141, -1000, -1000, 501, 616, 616, 325,
	381, 616, 5390, 281, -1000, 6191, 501, -1000, 616, 501,
	616, 616, -1000, -1000, 9459, -1000, -1000, -1000, -1000, 744,
	-1000, 845, 665, 667, -1000, -1000, 5657, 501, 641, 139,
	941, 9258, 6191, 4555, 919, 377, -1000, -1000, -1000, -196,
	-198, -1000, -1000, 501, 9660, 9660, 9660, -1000, 502, -1000,
	413, 212, 212, -1000, 850, 844, 473, 472, 435, 500,
	497, 212, 212, 430, 496, 612, 422, 406, 362, 504,
	494, 177, 498, 421, 416, 9861, 74, -1000, 566, -1000,
	882, 184, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 755, -1000, -1000, -1000, -1000, -1000, -1000, -59, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	654, -1000, -1000, 256, 626, -1000, 624, 675, 622, -1000,
	212, 212, -1000, 695, 695, 695, -1000, 9459, -1000, -1000,
	-1000, 604, 18, 754, 600, 9660, -1000, 9459, -1000, -1000,
	-1000, -1000, -1000, 377, 320, -1000, 377, -1000, -1000, -1000,
	-1000, -1000, -1000, 339, 1314, 930, -1000, 6454, 6454, -1000,
	-1000, 616, 5390, -1000, -1000, 8655, -1000, -1000, 3652, 5390,
	4254, -1000, -1000, -1000, 688, 432, 688, -121, 734, 219,
	-1000, 6191, 330, -1000, -1000, -1000, -1000, -1000, -1000, 947,
	8454, 881, -1000, 695, -1000, -1000, 736, 9057, 9057, 919,
	-1000, 377, -1000, -1000, -1000, -1000, -1000, -1000, 501, 501,
	501, -1000, -1000, 413, 413, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 493, 492, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 753, -1000, 906, 751, 74,
	566, 361, -1000, -1000, -1000, -1000, -1000, 490, -1000, 355,
	-1000, 350, 556, 312, 9057, 9057, 9057, -1000, -1000, -1000,
	842, -1000, -1000, -1000, -1000, -1000, -1000, 6454, 1314, 1314,
	-1000, -1000, -1000, -1000, 137, 501, -1000, 501, 707, 707,
	-1000, 707, 748, -1000, 707, 46, 707, 42, 501, 501,
	695, -118, -1000, 377, 6191, 945, 670, 768, -1000, -1000,
	-1000, 870, 7185, 7386, 956, -1000, 695, -1000, 750, 128,
	-1000, -1000, 695, -152, -152, -1000, -1000, -1000, -1000, 9057,
	-1000, -1000, -1000, -1000, 9057, 709, 74, -1000, 555, -1000,
	550, 544, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 611,
	-1000, 707, 611, 611, 558, 1314, 3351, -1000, -1000, -1000,
	125, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6454,
	501, 486, 377, 943, 929, 8454, 8454, 8454, 8454, -1000,
	814, 812, -1000, 799, 795, 808, 9459, -1000, 607, 7185,
	145, -1000, 8253, -1000, -1000, 9258, 667, 501, 9057, -150,
	-1000, 343, -1000, 572, 570, 9057, 701, -1000, -1000, -1000,
	-1000, 9057, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 38,
	-1000, -1000, -1000, 6191, 6191, 768, 735, 606, -1000, -1000,
	-1000, -1000, 806, -1000, 805, -1000, -1000, -1000, -1000, -1000,
	103, 100, 88, -1000, 666, -1000, -1000, 554, -1000, 551,
	-1000, -1000, -1000, 549, 9057, 218, -1000, 106, 408, 501,
	73, -132, 377, 664, 6191, 6191, -1000, -1000, 695, 695,
	695, -150, -1000, 830, 101, 101, -1000, 547, 864, -1000,
	-1000, -1000, 212, 485, 912, 864, -1000, -1000, 902, 864,
	-1000, -1000, 821, -126, -146, 377, 377, 9057, 9057, 9057,
	-1000, 178, -1000, 212, -1000, 414, 899, 101, -1000, -1000,
	212, 212, 319, -1000, -1000, -1000, -1000, 531, -1000, 820,
	-1000, 543, -1000, 543, 543, 695, 317, -1000, 523, 101,
	556, 556, -1000, -1000, -128, -1000, 9057, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -134, -1000, -147, -1000,
}
var yyPgo = [...]int{

	0, 29, 21, 1260, 1259, 1257, 26, 908, 1256, 1255,
	1252, 1249, 1248, 1247, 1245, 52, 860, 1244, 1243, 1242,
	1241, 1240, 1236, 1222, 1221, 1220, 1218, 1216, 1215, 1212,
	1210, 1209, 229, 1208, 1203, 1202, 45, 1200, 75, 1198,
	80, 1197, 1196, 1195, 39, 74, 42, 33, 161, 1194,
	24, 41, 37, 1193, 1192, 19, 1191, 1383, 1188, 1187,
	60, 84, 1186, 1185, 40, 1184, 1183, 1182, 2, 23,
	1181, 67, 1178, 1175, 78, 933, 1173, 1172, 1170, 1169,
	1168, 1167, 57, 6, 17, 1, 16, 1166, 25, 12,
	1163, 58, 1161, 1159, 1158, 1156, 28, 1155, 79, 1153,
	46, 73, 1149, 49, 14, 56, 1148, 1147, 71, 90,
	81, 72, 1144, 77, 1141, 1138, 177, 1134, 1127, 1122,
	859, 1120, 88, 602, 1119, 1117, 1114, 1113, 1112, 1109,
	48, 34, 0, 61, 31, 35, 1108, 54, 1116, 36,
	18, 1102, 87, 1100, 224, 30, 89, 32, 1095, 1094,
	1093, 1092, 1091, 1090, 1089, 55, 1087, 1086, 1084, 1083,
	15, 1082, 1081, 1080, 1077, 1076, 1075, 1073, 1072, 1071,
	1070, 1069, 62, 1065, 1064, 1063, 1062, 1061, 1060, 1057,
	1056, 1055, 1054, 1053, 22, 1052, 1050, 1049, 20, 59,
	27, 63, 1034, 1032, 1026, 86, 13, 1024, 1022, 1021,
	1016, 70, 44, 1015, 82, 47, 43, 1014, 1013, 1012,
	76, 8, 7, 1008, 10, 1005, 1003, 3, 5, 1000,
	999, 997, 996, 994, 993, 990, 9, 988, 987, 69,
	986, 984, 65, 4, 983, 981, 980, 979, 50, 11,
	978, 134,
}
var yyR1 = [...]int{

	0, 236, 237, 237, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 16, 17, 17, 18,
	18, 19, 19, 35, 35, 20, 21, 22, 22, 234,
	234, 233, 160, 160, 7, 7, 23, 23, 23, 23,
	23, 235, 235, 235, 235, 235, 235, 235, 225, 225,
	226, 226, 220, 218, 218, 215, 215, 222, 222, 213,
	213, 219, 219, 216, 216, 214, 214, 221, 221, 230,
	230, 231, 231, 232, 232, 232, 191, 191, 190, 190,
	189, 189, 189, 192, 192, 192, 26, 206, 208, 208,
	209, 209, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 162, 164, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	177, 178, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 180, 180, 181, 181,
	182, 182, 183, 183, 165, 188, 188, 163, 159, 161,
	207, 207, 207, 202, 137, 137, 148, 148, 148, 148,
	227, 227, 228, 228, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 151, 151, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 150, 150, 150, 150, 150,
	152, 152, 152, 152, 152, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	154, 154, 154, 154, 154, 154, 154, 154, 201, 201,
	155, 155, 195, 195, 196, 196, 196, 193, 193, 194,
	194, 197, 197, 156, 156, 156, 156, 156, 156, 37,
	36, 36, 36, 118, 118, 118, 198, 184, 184, 184,
	158, 185, 185, 186, 186, 186, 187, 187, 187, 199,
	199, 200, 200, 157, 203, 203, 203, 203, 6, 6,
	223, 223, 223, 223, 217, 217, 4, 4, 4, 1,
	2, 2, 3, 3, 3, 5, 5, 205, 205, 204,
	204, 212, 212, 211, 24, 24, 24, 24, 24, 24,
	24, 24, 124, 124, 128, 128, 128, 25, 25, 25,
	65, 65, 129, 129, 8, 27, 9, 10, 127, 127,
	127, 11, 12, 12, 12, 12, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 43, 43, 63, 63, 63, 60,
	60, 61, 61, 62, 62, 59, 59, 64, 64, 64,
	31, 29, 30, 30, 30, 30, 240, 32, 33, 33,
	34, 34, 34, 40, 40, 40, 38, 38, 39, 39,
	46, 46, 45, 45, 47, 47, 47, 47, 136, 136,
	136, 135, 135, 49, 49, 50, 50, 51, 51, 52,
	52, 52, 66, 53, 53, 53, 53, 143, 143, 141,
	141, 141, 140, 140, 54, 54, 54, 54, 55, 55,
	55, 55, 56, 56, 58, 58, 57, 57, 67, 67,
	67, 67, 68, 68, 69, 69, 48, 48, 48, 48,
	48, 48, 48, 121, 121, 71, 71, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 81, 81, 81,
	81, 81, 81, 72, 72, 72, 72, 72, 72, 72,
	44, 44, 82, 82, 82, 88, 83, 83, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 79, 79,
	79, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	78, 78, 78, 78, 78, 78, 78, 78, 241, 241,
	80, 80, 80, 80, 41, 41, 41, 41, 41, 145,
	145, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 92, 92, 42, 42, 90, 90,
	91, 93, 93, 89, 89, 89, 74, 74, 74, 74,
	74, 74, 74, 76, 76, 76, 94, 94, 95, 95,
	96, 96, 97, 97, 98, 99, 99, 99, 100, 100,
	100, 100, 101, 101, 101, 73, 73, 73, 73, 73,
	73, 102, 102, 102, 102, 103, 103, 84, 84, 86,
	86, 85, 87, 104, 104, 105, 106, 106, 109, 109,
	108, 108, 108, 108, 108, 117, 117, 116, 116, 116,
	107, 107, 110, 110, 114, 114, 113, 115, 115, 115,
	115, 112, 112, 111, 111, 146, 146, 146, 119, 119,
	122, 122, 123, 123, 120, 120, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 130, 130, 130, 126,
	126, 224, 224, 133, 133, 134, 134, 138, 138, 139,
	139, 142, 142, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 238, 239, 144,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 3, 1,
	3, 5, 0, 2, 1, 1, 3, 5, 11, 11,
	11, 0, 1, 1, 5, 9, 7, 7, 1, 1,
	1, 1, 2, 3, 2, 0, 2, 1, 1, 0,
	2, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 1, 2, 4, 4, 2, 0, 1, 0, 1,
	1, 2, 2, 1, 1, 1, 4, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 4, 3,
	3, 4, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 3, 3, 4,
	1, 3, 3, 3, 1, 1, 3, 1, 1, 1,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 3, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 4, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 3, 4, 1, 1, 1, 1, 0, 3, 3,
	2, 0, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 1, 2, 7, 7, 8, 9, 0, 1,
	3, 1, 2, 3, 0, 2, 0, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 3, 2, 6, 7, 7, 7, 9, 7,
	7, 7, 0, 1, 0, 1, 1, 6, 5, 4,
	1, 3, 0, 1, 3, 3, 2, 2, 0, 1,
	1, 4, 2, 3, 2, 2, 4, 4, 3, 6,
	3, 3, 4, 4, 4, 6, 5, 5, 3, 3,
	5, 6, 7, 3, 3, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 0, 3, 1, 1, 1, 0,
	2, 1, 1, 0, 1, 1, 1, 0, 2, 2,
	4, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 1, 2,
	3, 3, 3, 2, 3, 1, 2, 1, 1, 1,
	2, 3, 2, 2, 0, 2, 3, 2, 2, 2,
	1, 0, 2, 2, 2, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -236, -14, -15, -19, -20, -21, -22, -23, -24,
	-25, -8, -27, -28, -31, -29, -9, -10, -11, -12,
	-13, -30, -16, -17, 6, -35, 8, 9, 46, -26,
	127, 128, 129, 150, 131, 143, 49, 66, 270, 145,
	277, 280, 281, 284, 283, 298, 42, 144, 148, 149,
	-238, 7, 254, 69, -237, 306, -96, 14, -34, 5,
	-32, -240, -32, -32, -32, -32, -206, 69, -7, -224,
	23, 32, 134, 246, 247, 35, -120, 138, -124, 135,
	-7, 34, -129, 134, 134, 239, 127, 234, 272, -62,
	-63, 274, 275, 241, 134, 276, 237, 273, 236, 233,
	174, 72, 48, 135, 28, 26, 134, -138, 72, -132,
	260, 19, 205, 151, 170, 261, 303, 81, 204, 207,
	208, 146, 166, 210, 209, 202, 160, 44, 200, 184,
	278, 265, 243, 199, 161, 23, 185, 189, 285, 26,
	212, 183, 27, 28, 262, 51, 187, 213, 55, 203,
	214, 191, 190, 192, 173, 17, 215, 216, 186, 188,
	264, 148, 217, 54, 196, 279, 281, 241, 201, 175,
	164, 165, 150, 266, 136, 167, 298, 299, 301, 300,
	302, 304, 305, -144, -144, -127, 264, 207, -144, 282,
	-144, -144, 299, 301, 300, 302, 303, 305, 270, -144,
	-144, -144, -144, -15, -100, 16, 15, -18, -16, -238,
	6, 37, 38, -40, 56, 57, -33, -120, -57, -138,
	10, -106, -107, -109, 282, -146, -108, 286, 287, 285,
	-134, -117, 288, -133, -131, 174, 171, 72, -132, 87,
	39, 41, 194, 90, 157, 122, 179, 15, 21, 91,
	168, 121, 242, 206, 255, 127, 64, 245, 248, 244,
	246, 234, 162, 45, 9, 42, 144, 38, 115, 129,
	94, 95, 272, 147, 40, 145, 84, 18, 67, 10,
	48, 12, 13, 139, 138, 106, 135, 62, 7, 155,
	156, 123, 43, 103, 58, 36, 60, 104, 16, 249,
	250, 47, 182, 178, 259, 181, 154, 177, 117, 65,
	52, 88, 82, 163, 85, 68, 149, 86, 14, 63,
	275, 141, 274, 159, 105, 130, 254, 30, 61, 247,
	6, 258, 46, 143, 153, 59, 134, 235, 34, 180,
	152, 176, 93, 137, 83, 276, 5, 35, 197, 8,
	66, 140, 251, 252, 253, 50, 172, 169, 273, 263,
	92, 11, 198, -235, 285, 279, 271, 267, -207, -202,
	-137, 72, -132, -123, 139, 135, 135, 135, -123, 134,
	134, 72, -122, 139, -57, -57, 238, 134, 246, -144,
	-144, 235, -59, 242, 243, -61, 10, 106, -144, -144,
	-144, 241, -144, -144, -144, -144, -144, -144, -144, -57,
	75, -144, -85, -238, -85, -144, -57, -144, -144, 304,
	283, 284, -239, 71, -101, 18, 47, -48, -70, 88,
	-75, 45, 40, -74, -71, -89, -87, -88, 122, 111,
	112, 119, 89, 123, -79, -77, -78, -80, 74, 73,
	75, 76, 77, 78, 82, 83, 84, -133, -138, -85,
	-238, 60, 61, 255, 256, 259, 257, 91, 50, 244,
	253, 252, 251, 249, 250, 245, 248, 139, 246, 117,
	254, 72, -132, -97, -98, -48, -96, -15, -32, 52,
	-38, 38, 80, -58, 43, -57, 46, 124, -57, 70,
	-110, -113, -111, 289, 291, -108, 282, 96, -116, -133,
	74, 45, -116, 46, 15, 15, 71, 70, -148, -151,
	-153, -152, -154, -149, -150, 168, 169, 122, 172, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 46,
	146, 164, 165, 166, 167, 185, 186, 187, 188, 189,
	190, 191, 192, 151, 170, 261, 152, 153, 154, 155,
	156, 157, 159, 160, 161, 162, 163, -142, 72, -132,
	88, 72, 72, 72, -57, -57, -122, 68, -142, 40,
	-43, 10, -57, -138, -60, -61, -61, -57, -60, -144,
	-144, -144, -83, -48, -144, -130, 137, 39, -144, -144,
	-144, 8, 106, 87, 86, 103, 70, 17, -48, -72,
	106, 88, 104, 105, 90, 108, 107, 118, 111, 112,
	113, 114, 115, 116, 117, 109, 110, 121, 96, 97,
	98, 99, 100, 101, 102, -121, -238, -88, -238, 125,
	126, -75, -75, -75, -75, -75, -75, -238, 124, -15,
	-238, -238, -238, -238, -238, -238, -238, -92, -48, -238,
	-241, -238, -241, -241, -241, -241, -241, -241, -241, -238,
	-238, -238, -238, 70, -99, 41, 42, -100, -239, -40,
	-76, -133, 75, 78, -39, 59, -73, 46, 50, -15,
	-238, -57, -104, -105, -89, -133, -138, -139, -138, -131,
	171, 174, -69, 11, -109, -146, -112, 70, -114, 70,
	290, 292, 293, -110, 68, 85, -48, -185, 121, -238,
	269, 24, 25, -208, -209, -210, -163, -159, -161, -162,
	-164, -165, -166, -167, -168, -169, -170, -171, -172, -173,
	-174, -175, -176, -177, -178, -179, -180, -181, -182, -183,
	81, 278, -191, 194, 205, 49, 206, 207, 208, 135,
	210, 211, 212, 27, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 45, -202, -203, -204, -5, -4, 135,
	36, 32, 23, 22, -227, -228, -229, -197, -156, -198,
	-199, -200, -157, -37, -158, -186, -187, 82, 88, 45,
	194, 141, 36, 35, 81, 68, 121, 204, 201, -193,
	197, -155, 69, -155, -155, -155, -155, -184, 171, -184,
	-184, -184, 69, 69, -155, -155, -155, -195, 69, -195,
	-195, -196, 69, -196, -230, -231, -232, -191, 40, 68,
	68, 68, -125, 130, 278, 255, 132, 129, 133, 128,
	194, 171, 81, 45, 14, 266, 72, -65, -57, -57,
	-100, 240, -144, -144, -64, 104, 11, -138, -57, -60,
	-144, 70, -239, -57, 54, -48, -48, -81, 82, 88,
	83, 84, -48, -48, -75, -82, -85, -88, 79, 106,
	104, 105, 90, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -75, -75, -75, -75, -75, -75, -145, 72,
	74, 72, -74, -74, -133, -46, 38, -45, -47, 113,
	-48, -138, -134, -139, -131, -239, -15, -45, -45, -48,
	-48, -45, -38, -90, -91, 92, -133, -239, -45, -46,
	-45, -45, -98, -101, -119, 18, 10, 50, 50, -45,
	-103, 68, -104, -84, -86, -85, -238, -15, -102, -133,
	-69, 70, 96, 124, -96, -48, -111, -113, -115, 294,
	291, 297, 72, -137, -238, -238, -238, -210, -190, 96,
	-190, 121, -189, 174, 171, 168, -190, -190, -190, -190,
	-190, 209, 209, -190, -190, -190, -190, -190, -190, -190,
	-190, -190, -190, -190, -190, -190, -6, 72, -205, -204,
	141, 35, 33, -229, 82, 74, 75, 76, 82, -36,
	-71, -118, 244, 249, 250, 36, 36, 74, 8, -188,
	72, 74, 199, 200, 45, 45, 202, 203, -194, 198,
	75, -184, -184, 46, -201, 74, -201, 75, 75, -232,
	121, -189, -172, -57, -57, -57, -144, -130, -126, 135,
	36, 96, 137, 142, 142, 142, -128, 70, 30, 21,
	-144, 74, 74, -48, -60, -69, -48, -144, 55, 82,
	83, 84, -82, -75, -75, -75, -44, 147, 87, -239,
	-239, -45, 70, -136, -135, 39, -133, 74, 124, -238,
	124, -239, -239, -239, 70, 140, 39, -239, -45, -93,
	-91, 94, -48, -239, -239, -239, -239, -239, -57, -49,
	10, 44, -103, 70, -239, -239, -239, 70, 124, -96,
	-105, -48, -134, -100, 291, 295, 296, -239, -137, -137,
	-137, 74, -188, -190, -190, 46, 46, 75, 75, 75,
	74, 74, -190, -190, 75, 74, 72, 75, 75, 75,
	75, 45, 74, 45, 200, 199, 222, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 75, 45, 75,
	45, 75, 45, 72, -132, -2, -1, 140, -6, 36,
	-205, 69, -36, 71, 72, 122, 71, 70, 71, 70,
	71, 70, -190, -190, -238, -238, -238, -57, -144, 72,
	171, -206, 72, -202, -57, -64, -44, 87, -75, -75,
	-239, -47, -135, 113, -139, -46, -134, -147, 122, 168,
	146, 166, 162, 183, 173, 196, 164, 197, -145, -147,
	260, -96, 95, -48, 93, -69, -50, -51, -52, -53,
	-66, -88, -238, -57, 36, -86, 50, -15, -238, -133,
	-133, -100, -239, -239, -239, -188, -188, 74, 74, 69,
	-3, 24, 20, 31, 69, -2, -6, 71, 75, 74,
	75, 75, -226, 72, 45, -192, 72, 122, 45, -212,
	-211, -133, -212, -212, 46, -75, 124, -239, -239, -155,
	-155, -155, -196, -155, 156, -155, 156, -239, -239, -238,
	-42, 258, -48, -94, 12, 70, -54, -55, -56, 58,
	62, 64, 59, 60, 61, 65, -143, 39, -50, -238,
	-141, -140, 39, -138, 74, 8, -84, -15, 124, -238,
	-160, 268, -160, -212, -212, 69, -2, 71, 71, 71,
	-239, 70, -155, -239, -239, 72, 113, -184, 72, -75,
	-239, 74, -95, 13, 15, -51, -52, -51, -52, 58,
	58, 58, 63, 58, 63, 58, -55, -138, -239, -67,
	66, 138, 67, -140, -104, -239, -133, -234, -233, 267,
	75, 71, 71, -212, 69, -215, -211, -213, -216, -41,
	106, 263, -48, -83, 68, 68, 58, 58, 135, 135,
	135, 70, -239, 72, -217, -217, 71, -212, -214, -222,
	-218, -220, 27, 81, 140, -214, -219, -218, 263, -214,
	-218, -239, 261, 65, 264, -48, -48, -238, -238, -238,
	-233, 50, -223, 27, -1, 81, 263, -217, 71, -221,
	47, 19, -190, 74, -225, 24, 20, 29, 55, 262,
	265, -68, -133, -68, -68, 106, -190, 74, 29, -217,
	-190, -190, 75, 72, 55, -239, 70, -239, -239, -85,
	75, 72, -226, -226, 263, -133, 264, 265,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 610, 0, 396, 396, 396, 396, 396, 0,
	701, 684, 322, 332, 0, 383, 0, 0, 914, 914,
	338, 914, 0, 914, 914, 0, 914, 914, 914, 914,
	0, 33, 34, 912, 1, 3, 618, 0, 0, 400,
	403, 398, 684, 0, 0, 0, 51, 0, 682, 0,
	0, 0, 682, 44, 45, 702, 0, 685, 0, 0,
	680, 323, 0, 333, 0, 0, 0, 914, 914, 0,
	0, 914, 914, 914, 0, 914, 914, 914, 914, 914,
	914, 914, 384, 376, 377, 378, 0, 391, 707, 708,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 336, 337, 0, 339, 340, 342, 914,
	344, 345, 0, 0, 914, 0, 914, 914, 0, 392,
	393, 394, 395, 27, 622, 0, 0, 610, 29, 0,
	396, 401, 402, 406, 404, 405, 397, 0, 0, 456,
	0, 37, 38, 646, 0, 0, 648, 675, 676, -2,
	0, 0, 0, 705, 706, -2, 725, 703, 704, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 46, 52, 53, 0, 0, 0, 170,
	0, 174, 175, 0, 0, 0, 0, 0, 0, 0,
	680, 0, 0, 0, 334, 335, 374, 0, 0, 358,
	359, 379, 0, 385, 386, 0, 381, 382, 363, 364,
	365, 379, 367, 368, 369, 370, 371, 372, 373, 914,
	914, 343, 914, 0, 914, 348, 696, 350, 351, 914,
	914, 914, 28, 913, 23, 0, 0, 619, 466, 0,
	471, 473, 0, 508, 509, 510, 511, 512, 0, 0,
	0, 0, 0, 0, 534, 535, 536, 537, 596, 597,
	598, 599, 600, 601, 602, 475, 476, 593, 0, 642,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 558,
	558, 558, 558, 558, 558, 558, 558, 0, 0, 0,
	0, -2, -2, 611, 612, 615, 618, 27, 403, 0,
	408, 407, 399, 0, 0, 455, 0, 0, 464, 0,
	660, 671, 664, 0, 0, 649, 0, 0, 653, 657,
	658, 659, 271, 656, 0, 0, -2, 296, 180, 247,
	177, 178, 179, 240, 195, 240, 240, 240, 240, 267,
	267, 267, 267, 223, 224, 225, 226, 227, 0, 0,
	210, 240, 240, 240, 214, 230, 231, 232, 233, 234,
	235, 236, 237, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 242, 242, 242, 244, 244, -2, 711, 712,
	0, 0, 0, 0, 96, 0, 0, 0, 329, 681,
	618, 0, 914, 914, 387, 0, 0, 379, 914, 390,
	341, 346, 0, 506, 347, 0, 697, 698, 352, 353,
	354, 623, 0, 0, 0, 0, 0, 0, 469, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 493, 494,
	495, 496, 497, 498, 499, 472, 0, 486, 0, 0,
	0, 528, 529, 530, 531, 532, 0, 410, 0, 27,
	0, 0, 0, 0, 0, 0, 406, 0, 585, 0,
	550, 0, 551, 552, 553, 554, 555, 556, 557, 0,
	410, 0, 0, 0, 614, 616, 617, 622, 30, 406,
	0, 603, 0, 0, 0, 409, 635, 0, 0, -2,
	0, 454, 464, 643, 0, 593, 0, 457, 709, 710,
	725, 726, 610, 0, 647, 0, 662, 0, 663, 0,
	0, 673, 674, 661, 650, 651, 652, 654, 0, 0,
	0, 0, 0, 97, -2, 100, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	88, 88, 0, 88, 88, 88, 88, 88, 0, 0,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 87, 171, 172, 288, 307, 0, 309,
	310, 305, -2, 297, 173, 181, 182, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 251, 0, 0,
	266, 0, 280, 282, 0, 0, 0, 0, 0, 249,
	248, 194, 0, 267, 267, 217, 218, 219, 0, 220,
	221, 222, 0, 0, 211, 212, 213, 205, 0, 206,
	207, 208, 0, 209, 47, -2, 81, 0, 683, 0,
	0, 0, 914, 696, 0, 693, 0, 691, 0, 686,
	687, 688, 689, 690, 692, 694, 695, 324, 330, 328,
	914, 0, 356, 357, 360, 0, 0, 380, 379, 464,
	366, 0, 641, 914, 0, 467, 468, 470, 487, 0,
	489, 491, 620, 621, 477, 478, 502, 503, 504, 0,
	0, 0, 0, 500, 482, 0, 513, 514, 515, 516,
	517, 518, 519, 520, 521, 522, 523, 524, 527, 569,
	570, 0, 525, 526, 533, 0, 0, 411, 412, 414,
	418, 0, 594, 0, -2, 505, 27, 0, 0, 0,
	0, 0, 0, 591, 588, 0, 0, 559, 0, 0,
	0, 0, 613, 24, 0, 678, 679, 604, 605, 423,
	31, 0, 635, 625, 637, 639, 0, 27, 0, 631,
	610, 0, 0, 0, 618, 465, 672, 665, 666, 0,
	0, 670, 272, 0, 0, 0, 0, 101, 0, 89,
	0, 88, 88, 90, 0, 0, 0, 0, 0, 0,
	0, 88, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 300, 289, 288, 308,
	0, 307, 298, 183, 252, 253, 254, 255, 256, 257,
	258, 260, 263, 264, 265, 279, 281, 283, 0, 270,
	165, 166, 273, 274, 275, 276, 277, 278, 176, 250,
	0, 215, 216, 0, 0, 238, 0, 0, 0, 82,
	88, 88, 85, 0, 0, 0, 314, 0, 914, 699,
	700, 0, 0, 0, 0, 0, 327, 0, 325, 326,
	355, 375, 388, 389, 387, 361, 507, 349, 624, 488,
	490, 492, 479, 500, 483, 0, 480, 0, 0, 474,
	538, 0, 0, 415, 419, 0, 421, 422, 0, 410,
	0, -2, 541, 542, 0, 0, 0, 0, 610, 0,
	589, 0, 0, 549, 560, 561, 562, 563, 25, 464,
	0, 0, 32, 0, 640, -2, 0, 0, 0, 618,
	644, 645, 594, 36, 667, 668, 669, 54, 0, 0,
	0, 167, 168, 0, 0, 91, 92, 126, 127, 164,
	129, 130, 0, 0, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 0, 301, 0, 0, 300,
	288, 0, 259, 241, 268, 269, 228, 0, 229, 0,
	245, 0, 0, 0, 0, 0, 0, 315, 316, 317,
	0, 319, 320, 321, 331, 362, 481, 0, 501, 484,
	539, 413, 420, 416, 0, 0, 595, 0, 240, 240,
	574, 240, 244, 577, 240, 579, 240, 582, 0, 0,
	0, 586, 548, 592, 0, 606, 424, 425, 427, 428,
	429, 437, 0, 439, 0, 638, 0, -2, 0, 633,
	632, 35, 0, 42, 42, 128, 169, 131, 132, 0,
	299, 302, 303, 304, 0, 0, 300, 261, 0, 239,
	0, 0, 83, 60, 61, 84, 93, 94, 95, 0,
	311, 240, 0, 0, 0, 485, 0, 540, 543, 571,
	267, 575, 576, 578, 580, 581, 583, 545, 544, 0,
	0, 0, 590, 608, 0, 0, 0, 0, 0, 444,
	0, 0, 447, 0, 0, 0, 0, 438, 0, 0,
	458, 440, 0, 442, 443, 0, 628, 27, 0, 0,
	56, 0, 57, 0, 0, 0, 0, 262, 243, 246,
	65, 0, 313, 69, 73, 318, 417, 572, 573, 564,
	547, 587, 26, 0, 0, 426, 433, 0, 436, 445,
	446, 448, 0, 450, 0, 452, 453, 430, 431, 432,
	0, 0, 0, 441, 636, -2, 634, 0, 39, 0,
	43, 294, 294, 0, 0, 75, 312, 75, 75, 0,
	0, 0, 609, 607, 0, 0, 449, 451, 0, 0,
	0, 0, 55, 0, 284, 285, 294, 0, 48, 66,
	67, 68, 88, 0, 0, 49, 70, 71, 0, 50,
	74, 546, 0, 0, 0, 434, 435, 0, 0, 0,
	40, 0, 295, 88, 291, 0, 0, 286, 294, 76,
	88, 88, 0, 64, 62, 58, 59, 0, 565, 0,
	568, 0, 462, 0, 0, 0, 0, 292, 0, 287,
	0, 0, 63, 72, 566, 459, 0, 460, 461, 41,
	290, 293, 77, 78, 0, 463, 0, 567,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 89, 3, 3, 3, 116, 108, 3,
	69, 71, 113, 111, 70, 112, 124, 114, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 306,
	97, 96, 98, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 118, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 119,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 90, 91, 92, 93, 94, 95,
	99, 100, 101, 102, 103, 104, 105, 106, 109, 110,
	115, 117, 120, 121, 122, 123, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1025
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1031
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1033
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1061
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1106
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1117
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.optVal = nil
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1181
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1201
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1208
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 49:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 50:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1234
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 55:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 56:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.partitionOption = &PartOptHash2{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.str = "hash"
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.str = "btree"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.str = "default"
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1376
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1387
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1444
		{
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1446
		{
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1449
		{
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1451
		{
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.str = "character set"
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.str = "char set"
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.str = "default"
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1483
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1765
		{
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1781
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1818
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1834
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1988
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1993
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2033
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.optVal = nil
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2422
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2459
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.str = yyDollar[3].str
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2526
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2541
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2555
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2575
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2600
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 285:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2612
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 286:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2626
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 287:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2637
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2663
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2684
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2692
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2696
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2702
		{
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2705
		{
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2708
		{
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2714
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2719
		{
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2722
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2746
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2751
		{
			// set empty
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.str = yyDollar[1].str
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2783
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 314:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2793
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2798
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2803
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2807
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2819
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.byt = 0
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2828
		{
			yyVAL.byt = 1
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2833
		{
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2835
		{
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2837
		{
		}
	case 327:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2841
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2853
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2858
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2868
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2878
		{
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2880
		{
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2890
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2896
		{
			yyVAL.statement = &Xa{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2902
		{
			yyVAL.statement = &Explain{}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2907
		{
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2909
		{
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2911
		{
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2915
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2925
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2929
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2933
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2939
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2943
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2947
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 349:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2951
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2959
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2963
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2967
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2971
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 355:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2977
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2981
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2985
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2989
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2997
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3001
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 362:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3012
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3019
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3023
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3027
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3031
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3035
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3039
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3043
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3047
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3051
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3055
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3064
		{
			yyVAL.str = ""
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3068
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3074
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3078
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3082
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3088
		{
			yyVAL.str = ""
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3092
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3098
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3102
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3108
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3112
		{
			yyVAL.str = "full "
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3118
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3122
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3128
		{
			yyVAL.showFilter = nil
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3132
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3136
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3142
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3148
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3154
		{
			yyVAL.statement = &OtherRead{}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3158
		{
			yyVAL.statement = &OtherRead{}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3162
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3166
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3171
		{
			setAllowComments(yylex, true)
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3180
		{
			yyVAL.bytes2 = nil
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3184
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3190
		{
			yyVAL.str = UnionStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3194
		{
			yyVAL.str = UnionAllStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3198
		{
			yyVAL.str = UnionDistinctStr
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3203
		{
			yyVAL.str = ""
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3207
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3211
		{
			yyVAL.str = SQLCacheStr
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3216
		{
			yyVAL.str = ""
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3220
		{
			yyVAL.str = DistinctStr
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3225
		{
			yyVAL.str = ""
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3229
		{
			yyVAL.str = StraightJoinHint
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3234
		{
			yyVAL.selectExprs = nil
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3238
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3244
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3248
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3254
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3262
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3266
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3271
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3275
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3279
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3286
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3291
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3295
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3301
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3305
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3315
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3319
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3323
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3329
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3342
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3346
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3350
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3354
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3359
		{
			yyVAL.empty = struct{}{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3363
		{
			yyVAL.empty = struct{}{}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3368
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3372
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3376
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3383
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3389
		{
			yyVAL.str = JoinStr
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3393
		{
			yyVAL.str = JoinStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3397
		{
			yyVAL.str = JoinStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3401
		{
			yyVAL.str = StraightJoinStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3407
		{
			yyVAL.str = LeftJoinStr
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3411
		{
			yyVAL.str = LeftJoinStr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3415
		{
			yyVAL.str = RightJoinStr
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3419
		{
			yyVAL.str = RightJoinStr
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3425
		{
			yyVAL.str = NaturalJoinStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3429
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3439
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3443
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3449
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3453
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3458
		{
			yyVAL.indexHints = nil
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3462
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3466
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3470
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3476
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3480
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3485
		{
			yyVAL.expr = nil
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3489
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3495
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3499
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3503
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3507
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3511
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3515
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3519
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3525
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3529
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3535
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3539
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3545
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3549
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3553
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3557
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3561
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3565
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3569
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3573
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3577
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3581
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3587
		{
			yyVAL.str = IsNullStr
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3591
		{
			yyVAL.str = IsNotNullStr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3595
		{
			yyVAL.str = IsTrueStr
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3599
		{
			yyVAL.str = IsNotTrueStr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3603
		{
			yyVAL.str = IsFalseStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3607
		{
			yyVAL.str = IsNotFalseStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3613
		{
			yyVAL.str = EqualStr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3617
		{
			yyVAL.str = LessThanStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3621
		{
			yyVAL.str = GreaterThanStr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3625
		{
			yyVAL.str = LessEqualStr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3629
		{
			yyVAL.str = GreaterEqualStr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3633
		{
			yyVAL.str = NotEqualStr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3637
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3642
		{
			yyVAL.expr = nil
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3646
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3652
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3656
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3660
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3666
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3672
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3676
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3682
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3686
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3690
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3694
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3698
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3702
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3706
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3710
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3714
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3718
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3722
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3726
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3730
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3734
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3738
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3742
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3746
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3750
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3754
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3758
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3762
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3766
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3774
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3788
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3792
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3796
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3814
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3818
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3822
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3832
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 543:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3840
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 544:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3844
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 545:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3848
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 546:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3852
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 547:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3856
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3860
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3864
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3878
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3882
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3886
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3891
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3896
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3901
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3906
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3921
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3925
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3929
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3933
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3939
		{
			yyVAL.str = ""
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3943
		{
			yyVAL.str = BooleanModeStr
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3947
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 567:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3951
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3955
		{
			yyVAL.str = QueryExpansionStr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3961
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3971
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3975
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3979
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3983
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3987
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3991
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4005
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4009
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4013
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4017
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4021
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4026
		{
			yyVAL.expr = nil
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4030
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4035
		{
			yyVAL.str = string("")
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4039
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4045
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4049
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4055
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4060
		{
			yyVAL.expr = nil
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4064
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4070
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4074
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4078
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4084
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4088
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4092
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4096
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4100
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4104
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4108
		{
			yyVAL.expr = &NullVal{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4114
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4123
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4127
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4132
		{
			yyVAL.exprs = nil
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4136
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4141
		{
			yyVAL.expr = nil
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4145
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4150
		{
			yyVAL.orderBy = nil
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4154
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4160
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4164
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4170
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4175
		{
			yyVAL.str = AscScr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4179
		{
			yyVAL.str = AscScr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4183
		{
			yyVAL.str = DescScr
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4188
		{
			yyVAL.limit = nil
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4192
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4196
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4200
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4205
		{
			yyVAL.str = ""
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4209
		{
			yyVAL.str = ForUpdateStr
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4213
		{
			yyVAL.str = ShareModeStr
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4226
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4230
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4234
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4239
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4243
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 630:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4247
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4254
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4258
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4262
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4266
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4271
		{
			yyVAL.updateExprs = nil
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4275
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4281
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4285
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4291
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4295
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4301
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4307
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4317
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4321
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4327
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4333
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4337
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4343
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4347
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4354
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4358
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4362
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4366
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4370
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4377
		{
			yyVAL.bytes = []byte("charset")
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4383
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4387
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4391
		{
			yyVAL.expr = &Default{}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4397
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4401
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4407
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4411
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4417
		{
			yyVAL.str = ""
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4421
		{
			yyVAL.str = yyDollar[2].str
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4427
		{
			yyVAL.str = yyDollar[3].str
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4433
		{
			yyVAL.str = RepeatableRead
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4437
		{
			yyVAL.str = ReadCommitted
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4441
		{
			yyVAL.str = ReadUncommitted
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4445
		{
			yyVAL.str = Serializable
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4451
		{
			yyVAL.str = ""
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4455
		{
			yyVAL.str = yyDollar[2].str
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4461
		{
			yyVAL.str = TxReadWrite
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4465
		{
			yyVAL.str = TxReadOnly
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4471
		{
			yyVAL.str = SessionStr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4475
		{
			yyVAL.str = SessionStr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4479
		{
			yyVAL.str = GlobalStr
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4488
		{
			yyVAL.byt = 0
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4492
		{
			yyVAL.byt = 1
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4497
		{
			yyVAL.byt = 0
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4501
		{
			yyVAL.byt = 1
		}
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4506
		{
			yyVAL.str = ""
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4510
		{
			yyVAL.str = IgnoreStr
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4516
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4520
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4524
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4528
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4532
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4536
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4540
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4544
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4548
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4552
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4557
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4561
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4565
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4571
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4575
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4580
		{
			yyVAL.str = IndexStr
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4584
		{
			yyVAL.str = UniqueStr
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4590
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4594
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4601
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4607
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4611
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4618
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4624
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4628
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4854
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4863
		{
			decNesting(yylex)
		}
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4868
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

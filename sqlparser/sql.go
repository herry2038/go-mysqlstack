//line sql.y:17

package sqlparser

import __yyfmt__ "fmt"

//line sql.y:19

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	outFile               *OutFile
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CASCADE = 57363
const CONSTRAINT = 57364
const FULLTEXT = 57365
const HASH = 57366
const HASH2 = 57367
const INDEXES = 57368
const KEY_BLOCK_SIZE = 57369
const KEYS = 57370
const PARSER = 57371
const RESTRICT = 57372
const RTREE = 57373
const SPATIAL = 57374
const SYMBOL = 57375
const TEMPORARY = 57376
const UNIQUE = 57377
const KEY = 57378
const ALL = 57379
const DISTINCT = 57380
const AS = 57381
const EXISTS = 57382
const ASC = 57383
const DESC = 57384
const INTO = 57385
const DUPLICATE = 57386
const DEFAULT = 57387
const SET = 57388
const LOCK = 57389
const FULL = 57390
const CHECKSUM = 57391
const VALUES = 57392
const LAST_INSERT_ID = 57393
const NEXT = 57394
const VALUE = 57395
const SHARE = 57396
const MODE = 57397
const SQL_NO_CACHE = 57398
const SQL_CACHE = 57399
const JOIN = 57400
const STRAIGHT_JOIN = 57401
const LEFT = 57402
const RIGHT = 57403
const INNER = 57404
const OUTER = 57405
const CROSS = 57406
const NATURAL = 57407
const USE = 57408
const FORCE = 57409
const ON = 57410
const ID = 57411
const HEX = 57412
const STRING = 57413
const INTEGRAL = 57414
const FLOAT = 57415
const HEXNUM = 57416
const VALUE_ARG = 57417
const LIST_ARG = 57418
const COMMENT = 57419
const COMMENT_KEYWORD = 57420
const NULL = 57421
const TRUE = 57422
const FALSE = 57423
const OFF = 57424
const OR = 57425
const AND = 57426
const NOT = 57427
const BETWEEN = 57428
const CASE = 57429
const WHEN = 57430
const THEN = 57431
const ELSE = 57432
const END = 57433
const LE = 57434
const GE = 57435
const NE = 57436
const NULL_SAFE_EQUAL = 57437
const IS = 57438
const LIKE = 57439
const REGEXP = 57440
const IN = 57441
const SHIFT_LEFT = 57442
const SHIFT_RIGHT = 57443
const DIV = 57444
const MOD = 57445
const UNARY = 57446
const COLLATE = 57447
const BINARY = 57448
const INTERVAL = 57449
const JSON_EXTRACT_OP = 57450
const JSON_UNQUOTE_EXTRACT_OP = 57451
const CREATE = 57452
const ALTER = 57453
const DROP = 57454
const RENAME = 57455
const ANALYZE = 57456
const ADD = 57457
const MODIFY = 57458
const TABLE = 57459
const INDEX = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const USING = 57465
const PRIMARY = 57466
const COLUMN = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const BIT = 57476
const TINYINT = 57477
const SMALLINT = 57478
const MEDIUMINT = 57479
const INT = 57480
const INTEGER = 57481
const BIGINT = 57482
const INTNUM = 57483
const REAL = 57484
const DOUBLE = 57485
const FLOAT_TYPE = 57486
const DECIMAL = 57487
const NUMERIC = 57488
const TIME = 57489
const TIMESTAMP = 57490
const DATETIME = 57491
const YEAR = 57492
const CHAR = 57493
const VARCHAR = 57494
const BOOL = 57495
const CHARACTER = 57496
const VARBINARY = 57497
const NCHAR = 57498
const CHARSET = 57499
const TEXT = 57500
const TINYTEXT = 57501
const MEDIUMTEXT = 57502
const LONGTEXT = 57503
const BLOB = 57504
const TINYBLOB = 57505
const MEDIUMBLOB = 57506
const LONGBLOB = 57507
const JSON = 57508
const ENUM = 57509
const GEOMETRY = 57510
const POINT = 57511
const LINESTRING = 57512
const POLYGON = 57513
const GEOMETRYCOLLECTION = 57514
const MULTIPOINT = 57515
const MULTILINESTRING = 57516
const MULTIPOLYGON = 57517
const NULLX = 57518
const AUTO_INCREMENT = 57519
const APPROXNUM = 57520
const SIGNED = 57521
const UNSIGNED = 57522
const ZEROFILL = 57523
const FIXED = 57524
const DYNAMIC = 57525
const STORAGE = 57526
const DISK = 57527
const MEMORY = 57528
const COLUMN_FORMAT = 57529
const AVG_ROW_LENGTH = 57530
const COMPRESSION = 57531
const CONNECTION = 57532
const DATA = 57533
const DIRECTORY = 57534
const DELAY_KEY_WRITE = 57535
const ENCRYPTION = 57536
const INSERT_METHOD = 57537
const MAX_ROWS = 57538
const MIN_ROWS = 57539
const PACK_KEYS = 57540
const PASSWORD = 57541
const ROW_FORMAT = 57542
const STATS_AUTO_RECALC = 57543
const STATS_PERSISTENT = 57544
const STATS_SAMPLE_PAGES = 57545
const TABLESPACE = 57546
const COMPRESSED = 57547
const REDUNDANT = 57548
const COMPACT = 57549
const TOKUDB_DEFAULT = 57550
const TOKUDB_FAST = 57551
const TOKUDB_SMALL = 57552
const TOKUDB_ZLIB = 57553
const TOKUDB_QUICKLZ = 57554
const TOKUDB_LZMA = 57555
const TOKUDB_SNAPPY = 57556
const TOKUDB_UNCOMPRESSED = 57557
const COLLATION = 57558
const DATABASES = 57559
const TABLES = 57560
const WARNINGS = 57561
const VARIABLES = 57562
const EVENTS = 57563
const BINLOG = 57564
const GTID = 57565
const STATUS = 57566
const COLUMNS = 57567
const FIELDS = 57568
const CURRENT_TIMESTAMP = 57569
const CURRENT_DATE = 57570
const DATABASE = 57571
const SCHEMA = 57572
const CURRENT_TIME = 57573
const LOCALTIME = 57574
const LOCALTIMESTAMP = 57575
const UTC_DATE = 57576
const UTC_TIME = 57577
const UTC_TIMESTAMP = 57578
const REPLACE = 57579
const CONVERT = 57580
const CAST = 57581
const GROUP_CONCAT = 57582
const SEPARATOR = 57583
const MATCH = 57584
const AGAINST = 57585
const BOOLEAN = 57586
const LANGUAGE = 57587
const WITH = 57588
const QUERY = 57589
const EXPANSION = 57590
const UNUSED = 57591
const PARTITION = 57592
const PARTITIONS = 57593
const LIST = 57594
const XA = 57595
const DISTRIBUTED = 57596
const ENGINES = 57597
const VERSIONS = 57598
const PROCESSLIST = 57599
const QUERYZ = 57600
const TXNZ = 57601
const KILL = 57602
const ENGINE = 57603
const SINGLE = 57604
const BEGIN = 57605
const START = 57606
const TRANSACTION = 57607
const COMMIT = 57608
const ROLLBACK = 57609
const GLOBAL = 57610
const LOCAL = 57611
const SESSION = 57612
const NAMES = 57613
const ISOLATION = 57614
const LEVEL = 57615
const READ = 57616
const WRITE = 57617
const ONLY = 57618
const REPEATABLE = 57619
const COMMITTED = 57620
const UNCOMMITTED = 57621
const SERIALIZABLE = 57622
const RADON = 57623
const ATTACH = 57624
const ATTACHLIST = 57625
const DETACH = 57626
const RESHARD = 57627
const CLEANUP = 57628
const RECOVER = 57629
const REBALANCE = 57630
const LINES = 57631
const ENCLOSED = 57632
const TERMINATED = 57633
const ESCAPED = 57634
const OUTFILE = 57635

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"HASH2",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"LINES",
	"ENCLOSED",
	"TERMINATED",
	"ESCAPED",
	"OUTFILE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4931

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 35,
	-2, 4,
	-1, 229,
	96, 875,
	-2, 685,
	-1, 235,
	96, 734,
	-2, 663,
	-1, 481,
	124, 715,
	-2, 711,
	-1, 482,
	124, 716,
	-2, 712,
	-1, 516,
	121, 94,
	168, 94,
	171, 94,
	174, 94,
	-2, 106,
	-1, 567,
	1, 87,
	311, 87,
	-2, 94,
	-1, 689,
	5, 35,
	-2, 634,
	-1, 724,
	121, 94,
	168, 94,
	171, 94,
	174, 94,
	-2, 107,
	-1, 782,
	36, 314,
	69, 314,
	72, 314,
	135, 314,
	-2, 872,
	-1, 835,
	1, 88,
	311, 88,
	-2, 94,
	-1, 924,
	124, 718,
	-2, 714,
	-1, 1101,
	5, 36,
	-2, 513,
	-1, 1125,
	5, 36,
	-2, 635,
	-1, 1251,
	5, 35,
	-2, 637,
	-1, 1369,
	5, 36,
	-2, 638,
}

const yyNprod = 923
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 10383

var yyAct = [...]int{

	482, 459, 1487, 1276, 1414, 1372, 592, 437, 1362, 1420,
	1348, 1284, 649, 3, 692, 1310, 1418, 953, 817, 1322,
	702, 1006, 422, 1283, 1185, 1359, 831, 1452, 1309, 1029,
	204, 954, 908, 978, 230, 1227, 915, 918, 109, 1086,
	369, 1094, 1019, 864, 183, 923, 66, 234, 56, 1008,
	950, 934, 370, 885, 584, 693, 595, 982, 738, 1044,
	501, 460, 50, 203, 109, 836, 238, 752, 372, 457,
	435, 434, 786, 502, 226, 424, 490, 1009, 500, 827,
	484, 433, 725, 109, 184, 109, 188, 585, 190, 191,
	225, 199, 200, 201, 202, 213, 567, 223, 55, 1247,
	382, 1410, 1474, 1409, 1492, 1445, 1134, 109, 970, 420,
	421, 969, 50, 504, 971, 1135, 1136, 503, 198, 504,
	209, 430, 710, 24, 51, 26, 27, 711, 712, 660,
	419, 503, 389, 390, 189, 233, 398, 399, 400, 1323,
	402, 403, 404, 405, 406, 407, 408, 192, 194, 193,
	195, 196, 1373, 197, 721, 722, 367, 1508, 1468, 46,
	366, 1505, 187, 28, 1434, 1498, 36, 1467, 365, 920,
	854, 1422, 1433, 1240, 364, 917, 1305, 1451, 395, 1015,
	1016, 1017, 387, 37, 401, 1022, 53, 1018, 455, 456,
	1023, 1024, 81, 1367, 412, 414, 109, 861, 386, 539,
	508, 853, 1384, 616, 615, 625, 626, 618, 619, 620,
	621, 622, 623, 624, 617, 70, 992, 627, 109, 186,
	991, 109, 487, 1034, 71, 1423, 238, 75, 856, 1039,
	810, 1453, 238, 238, 411, 1035, 1210, 852, 818, 415,
	1300, 417, 418, 391, 30, 31, 32, 1340, 34, 1298,
	393, 394, 60, 1065, 413, 413, 486, 1064, 1063, 1011,
	35, 47, 39, 1187, 1163, 48, 49, 33, 383, 597,
	374, 50, 77, 1062, 780, 527, 1404, 1406, 62, 63,
	64, 65, 1443, 1442, 849, 847, 843, 1441, 846, 848,
	1187, 1320, 377, 79, 388, 233, 376, 1422, 375, 540,
	505, 509, 509, 380, 553, 556, 557, 558, 559, 560,
	561, 379, 562, 563, 564, 565, 566, 541, 542, 543,
	544, 525, 526, 554, 811, 528, 72, 851, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 545, 546,
	547, 548, 549, 550, 551, 552, 818, 106, 1405, 1022,
	850, 1423, 84, 1290, 1023, 1024, 83, 639, 640, 1385,
	1128, 1100, 627, 1098, 963, 1010, 648, 596, 1432, 1060,
	1050, 52, 597, 779, 569, 427, 485, 1032, 1033, 109,
	109, 497, 981, 569, 718, 1282, 1194, 38, 109, 109,
	1477, 602, 1036, 1037, 40, 396, 109, 41, 42, 720,
	44, 43, 605, 979, 73, 74, 105, 1428, 104, 603,
	1424, 845, 1280, 1454, 555, 45, 607, 985, 1165, 1164,
	984, 617, 855, 983, 627, 605, 1061, 962, 102, 985,
	675, 676, 984, 512, 844, 983, 1195, 507, 73, 74,
	637, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 101, 866, 589, 590, 588, 591, 892, 594,
	761, 1242, 1281, 488, 598, 599, 600, 935, 1059, 606,
	596, 570, 890, 891, 889, 604, 603, 1014, 53, 578,
	586, 576, 604, 603, 492, 604, 603, 1104, 888, 1244,
	238, 397, 605, 636, 638, 109, 604, 603, 109, 605,
	238, 1271, 605, 604, 603, 1272, 689, 86, 1494, 1484,
	678, 1374, 1275, 605, 94, 103, 1274, 677, 372, 647,
	605, 1159, 650, 651, 652, 653, 654, 655, 656, 1158,
	659, 661, 661, 661, 661, 661, 661, 661, 661, 669,
	670, 671, 672, 697, 1106, 699, 865, 1157, 1154, 819,
	820, 821, 1149, 1422, 100, 690, 1148, 1105, 774, 681,
	641, 642, 643, 644, 645, 646, 695, 694, 935, 233,
	1111, 1147, 1048, 878, 880, 881, 719, 109, 109, 879,
	1079, 1080, 1081, 593, 679, 713, 109, 109, 1047, 1040,
	705, 604, 603, 833, 410, 776, 109, 704, 1507, 608,
	662, 663, 664, 665, 666, 667, 668, 1423, 605, 1182,
	1180, 860, 886, 99, 87, 872, 98, 96, 887, 85,
	1178, 93, 1503, 1030, 1228, 1031, 1479, 862, 863, 1161,
	593, 1476, 909, 870, 910, 837, 1475, 658, 373, 1181,
	1179, 1461, 869, 829, 830, 1343, 1316, 238, 1230, 423,
	1177, 1273, 88, 97, 91, 92, 95, 1262, 1495, 1160,
	238, 1261, 1162, 926, 1232, 1155, 1236, 1151, 1231, 1150,
	1229, 1141, 925, 1072, 1071, 1234, 1045, 716, 1027, 1500,
	423, 1278, 1485, 922, 937, 1233, 1333, 1456, 1333, 1416,
	955, 238, 1413, 1411, 423, 1331, 924, 1337, 1235, 1237,
	50, 1007, 952, 957, 1346, 423, 238, 939, 1277, 1333,
	1376, 378, 650, 960, 1333, 1375, 914, 1212, 233, 1209,
	372, 912, 913, 1333, 423, 1092, 423, 1201, 1200, 936,
	1156, 884, 972, 932, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 911,
	956, 964, 50, 943, 942, 1197, 1198, 695, 694, 573,
	959, 618, 619, 620, 621, 622, 623, 624, 617, 572,
	967, 627, 973, 875, 876, 233, 882, 883, 1197, 1196,
	505, 966, 974, 975, 976, 980, 571, 986, 987, 988,
	989, 990, 1127, 423, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 977, 616, 615,
	625, 626, 618, 619, 620, 621, 622, 623, 624, 617,
	593, 1069, 627, 929, 930, 871, 423, 927, 928, 381,
	1068, 931, 1041, 1042, 517, 516, 1330, 1329, 1193, 871,
	109, 109, 109, 485, 961, 938, 458, 940, 941, 1123,
	813, 814, 815, 816, 24, 951, 1346, 961, 1013, 1120,
	949, 1199, 24, 57, 24, 703, 824, 825, 826, 1092,
	1067, 1020, 709, 965, 620, 621, 622, 623, 624, 617,
	707, 673, 627, 1046, 107, 499, 1092, 1056, 53, 210,
	1075, 886, 1378, 812, 687, 1051, 1052, 887, 688, 1327,
	1057, 1049, 832, 837, 1268, 1070, 1250, 76, 1263, 67,
	219, 449, 448, 450, 451, 452, 453, 53, 1077, 1092,
	454, 238, 1191, 1074, 961, 53, 828, 53, 823, 219,
	822, 219, 1437, 951, 1089, 841, 840, 839, 1090, 577,
	685, 22, 1397, 1082, 1440, 109, 1439, 1398, 1394, 1101,
	1102, 1103, 53, 219, 1107, 1395, 1393, 214, 215, 1113,
	1396, 1114, 1115, 1116, 1117, 1350, 1353, 1354, 1355, 1351,
	217, 1352, 1356, 1486, 1466, 372, 372, 372, 1078, 1124,
	1125, 1126, 1449, 874, 1099, 1110, 1399, 491, 1354, 1355,
	1096, 948, 947, 1459, 425, 1133, 1137, 1288, 1132, 1146,
	208, 489, 1145, 1122, 1043, 513, 1184, 496, 773, 1129,
	1142, 924, 1083, 1084, 1085, 1143, 1144, 1130, 838, 1121,
	579, 1458, 1358, 426, 491, 1152, 1153, 1138, 1139, 1140,
	1188, 695, 694, 233, 1186, 1248, 1073, 211, 212, 1189,
	1026, 1076, 219, 616, 615, 625, 626, 618, 619, 620,
	621, 622, 623, 624, 617, 1025, 1012, 627, 109, 1266,
	68, 1190, 1480, 1265, 219, 1465, 372, 219, 109, 205,
	1267, 1192, 1350, 1353, 1354, 1355, 1351, 1464, 1352, 1356,
	946, 1463, 1438, 1087, 1202, 1203, 1504, 1491, 945, 1447,
	1446, 1388, 1091, 80, 803, 802, 238, 515, 514, 206,
	57, 238, 1387, 1208, 799, 1112, 1213, 1345, 1108, 703,
	1211, 1246, 581, 220, 1220, 1204, 1205, 1206, 1215, 1317,
	1028, 601, 59, 1216, 61, 955, 593, 805, 238, 238,
	1221, 54, 1131, 922, 1, 1226, 1225, 1222, 1238, 1251,
	804, 797, 1239, 1444, 1224, 1408, 924, 798, 1366, 1119,
	363, 1371, 835, 834, 785, 1249, 784, 1241, 1462, 69,
	1255, 1256, 1257, 1258, 1450, 1096, 1419, 1457, 233, 1421,
	233, 1426, 1382, 1259, 1260, 1379, 1381, 724, 723, 368,
	806, 775, 791, 790, 789, 956, 787, 1038, 1252, 809,
	1279, 796, 795, 717, 749, 748, 747, 1253, 1254, 746,
	801, 745, 744, 743, 742, 238, 238, 238, 741, 1218,
	1219, 740, 1270, 739, 1269, 737, 736, 1186, 735, 734,
	733, 732, 731, 730, 726, 219, 219, 729, 728, 1286,
	1287, 727, 794, 792, 219, 583, 788, 522, 520, 521,
	519, 524, 219, 523, 518, 1357, 1361, 109, 1291, 1093,
	1292, 82, 955, 800, 1313, 1066, 185, 1058, 842, 1296,
	808, 1301, 1302, 807, 238, 1319, 1307, 78, 1318, 238,
	635, 944, 1308, 1021, 1285, 1285, 1285, 231, 1324, 968,
	708, 1243, 706, 222, 221, 958, 674, 1325, 483, 1386,
	1344, 238, 1326, 1109, 657, 1328, 933, 436, 1186, 877,
	447, 444, 1303, 446, 445, 680, 1332, 686, 1314, 1335,
	1336, 609, 956, 1339, 50, 109, 109, 428, 1321, 1403,
	1312, 238, 1313, 857, 90, 1226, 89, 1342, 238, 392,
	493, 1349, 1368, 1285, 238, 1347, 1311, 1245, 1285, 1289,
	580, 219, 1369, 696, 698, 1380, 1304, 109, 109, 109,
	109, 1377, 1383, 684, 1313, 1313, 1313, 1313, 109, 793,
	233, 109, 25, 1390, 109, 1392, 58, 1400, 1313, 216,
	14, 21, 1407, 926, 15, 1389, 1360, 1391, 13, 238,
	12, 1415, 1402, 29, 10, 9, 8, 695, 694, 7,
	1370, 1427, 1430, 6, 1412, 1436, 5, 1285, 1425, 1429,
	4, 207, 1417, 1285, 23, 2, 1431, 20, 1314, 1314,
	1314, 1314, 763, 19, 1306, 18, 17, 1448, 16, 11,
	777, 1455, 1360, 219, 219, 1341, 1315, 778, 1264, 0,
	773, 0, 867, 219, 755, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 750, 0, 0, 0,
	0, 0, 238, 238, 238, 1489, 1490, 0, 0, 1493,
	0, 0, 0, 0, 0, 1478, 1496, 1497, 0, 0,
	218, 0, 1482, 1483, 921, 698, 0, 0, 921, 921,
	0, 238, 921, 1471, 1472, 1473, 0, 0, 0, 384,
	1499, 385, 1501, 1502, 0, 0, 921, 921, 921, 921,
	759, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 0, 409, 696, 0, 0, 0, 0, 413,
	0, 1488, 1488, 1488, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1293, 1294, 0, 1295, 1435, 593, 1297,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 753,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	754, 756, 757, 758, 0, 760, 761, 762, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 1469, 1470, 1217,
	1334, 615, 625, 626, 618, 619, 620, 621, 622, 623,
	624, 617, 416, 0, 627, 0, 0, 0, 0, 616,
	615, 625, 626, 618, 619, 620, 621, 622, 623, 624,
	617, 0, 0, 627, 495, 0, 0, 498, 611, 0,
	614, 0, 0, 0, 0, 0, 628, 629, 630, 631,
	632, 633, 634, 751, 612, 613, 610, 616, 615, 625,
	626, 618, 619, 620, 621, 622, 623, 624, 617, 1088,
	0, 627, 0, 0, 0, 0, 219, 219, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	615, 625, 626, 618, 619, 620, 621, 622, 623, 624,
	617, 0, 0, 627, 625, 626, 618, 619, 620, 621,
	622, 623, 624, 617, 0, 0, 627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 921,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574, 575, 0, 696, 0,
	698, 0, 0, 0, 582, 0, 0, 0, 0, 0,
	0, 0, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 155, 0, 111, 0, 0, 0, 135, 0,
	0, 139, 142, 143, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 916, 219, 432, 0, 0, 0, 127,
	431, 691, 0, 0, 0, 468, 145, 0, 0, 163,
	148, 0, 0, 0, 0, 461, 462, 0, 0, 921,
	0, 0, 0, 0, 53, 698, 921, 481, 449, 448,
	450, 451, 452, 453, 0, 0, 117, 454, 455, 456,
	0, 0, 0, 429, 442, 0, 467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 440, 919, 0,
	0, 0, 479, 0, 441, 0, 0, 438, 443, 0,
	0, 0, 0, 858, 859, 0, 0, 0, 0, 0,
	0, 174, 0, 868, 477, 0, 0, 0, 0, 0,
	0, 121, 873, 161, 0, 172, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 134, 0, 0, 170,
	171, 122, 175, 0, 0, 114, 0, 0, 154, 0,
	169, 0, 0, 0, 0, 0, 0, 0, 141, 129,
	136, 158, 146, 159, 137, 152, 151, 153, 0, 0,
	0, 164, 0, 0, 133, 128, 168, 125, 149, 118,
	112, 0, 119, 120, 124, 123, 0, 140, 147, 150,
	156, 157, 162, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 132, 469,
	475, 478, 0, 476, 473, 474, 472, 471, 470, 480,
	463, 464, 466, 0, 465, 110, 115, 144, 0, 160,
	131, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 165, 0, 166, 0, 0, 0,
	138, 219, 1364, 0, 696, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 179, 178, 180, 116, 181,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 219, 219, 219, 0, 0, 0,
	0, 0, 0, 0, 1401, 0, 0, 219, 0, 0,
	1364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1053, 1054, 1055, 346,
	330, 288, 349, 264, 279, 361, 281, 282, 318, 247,
	298, 155, 277, 111, 0, 248, 0, 135, 0, 0,
	139, 142, 143, 0, 327, 0, 0, 0, 338, 347,
	295, 0, 267, 240, 274, 241, 265, 292, 127, 263,
	332, 301, 280, 0, 355, 145, 310, 0, 163, 148,
	0, 0, 294, 335, 296, 328, 287, 319, 256, 309,
	350, 278, 315, 0, 0, 0, 237, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 312, 344, 276, 314,
	317, 239, 311, 0, 243, 249, 360, 342, 270, 271,
	0, 0, 0, 0, 0, 0, 0, 293, 297, 324,
	285, 1118, 0, 0, 0, 0, 0, 0, 0, 268,
	0, 308, 0, 0, 0, 251, 245, 291, 0, 0,
	0, 255, 0, 269, 325, 0, 0, 0, 336, 286,
	174, 343, 284, 283, 351, 321, 0, 333, 266, 275,
	121, 273, 161, 316, 172, 113, 340, 334, 306, 289,
	290, 244, 0, 323, 126, 134, 262, 313, 170, 171,
	122, 175, 250, 357, 114, 236, 356, 154, 235, 169,
	341, 307, 303, 246, 339, 305, 302, 141, 129, 136,
	158, 146, 159, 137, 152, 151, 153, 0, 242, 0,
	164, 348, 362, 133, 128, 168, 125, 149, 118, 112,
	253, 119, 120, 124, 123, 0, 140, 147, 150, 156,
	157, 162, 0, 0, 1207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1214, 0, 0, 0, 261, 337,
	0, 0, 0, 0, 0, 167, 252, 132, 259, 257,
	260, 329, 258, 299, 300, 352, 353, 354, 326, 254,
	0, 0, 331, 304, 110, 115, 144, 359, 160, 131,
	173, 0, 0, 0, 0, 0, 272, 358, 322, 320,
	345, 0, 130, 165, 0, 166, 224, 0, 0, 229,
	227, 228, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 179, 178, 180, 116, 181, 182,
	346, 330, 288, 349, 264, 279, 361, 281, 282, 318,
	247, 298, 155, 277, 111, 0, 248, 0, 135, 0,
	0, 139, 142, 143, 0, 327, 0, 0, 0, 338,
	347, 295, 0, 267, 240, 274, 241, 265, 292, 127,
	263, 332, 301, 280, 0, 355, 145, 310, 0, 163,
	148, 0, 0, 294, 335, 296, 328, 287, 319, 256,
	309, 350, 278, 315, 0, 0, 0, 237, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 312, 344, 276,
	314, 317, 239, 311, 0, 243, 249, 360, 342, 270,
	271, 0, 0, 0, 0, 0, 0, 0, 293, 297,
	324, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 0, 308, 0, 0, 0, 251, 245, 291, 0,
	0, 0, 255, 0, 269, 325, 0, 0, 0, 336,
	286, 174, 343, 284, 283, 351, 321, 0, 333, 266,
	275, 121, 273, 161, 316, 172, 113, 340, 334, 306,
	289, 290, 244, 0, 323, 126, 134, 262, 313, 170,
	171, 122, 175, 250, 357, 114, 236, 356, 154, 235,
	169, 341, 307, 303, 246, 339, 305, 302, 141, 129,
	136, 158, 146, 159, 137, 152, 151, 153, 0, 242,
	0, 164, 348, 362, 133, 128, 168, 125, 149, 118,
	112, 253, 119, 120, 124, 123, 0, 140, 147, 150,
	156, 157, 162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 261,
	337, 0, 0, 0, 0, 0, 167, 252, 132, 259,
	257, 260, 329, 258, 299, 300, 352, 353, 354, 326,
	254, 0, 0, 331, 304, 110, 115, 144, 359, 160,
	131, 173, 0, 0, 0, 0, 0, 272, 358, 322,
	320, 345, 0, 130, 165, 0, 166, 0, 0, 0,
	229, 227, 228, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 179, 178, 180, 116, 181,
	182, 346, 330, 288, 349, 264, 279, 361, 281, 282,
	318, 247, 298, 155, 277, 111, 0, 248, 0, 135,
	0, 0, 139, 142, 143, 0, 327, 0, 0, 0,
	338, 347, 295, 0, 267, 240, 274, 241, 265, 292,
	127, 263, 332, 301, 280, 0, 355, 145, 310, 0,
	163, 148, 0, 0, 294, 335, 296, 328, 287, 319,
	256, 309, 350, 278, 315, 0, 0, 0, 237, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 312, 344,
	276, 314, 317, 239, 311, 0, 243, 249, 360, 342,
	270, 271, 0, 0, 0, 0, 0, 0, 0, 293,
	297, 324, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 0, 308, 0, 0, 0, 251, 245, 291,
	0, 0, 0, 255, 0, 269, 325, 0, 0, 0,
	336, 286, 174, 343, 284, 283, 351, 321, 0, 333,
	266, 275, 121, 273, 161, 316, 172, 113, 340, 334,
	306, 289, 290, 244, 0, 323, 126, 134, 262, 313,
	170, 171, 122, 175, 250, 357, 114, 236, 356, 154,
	235, 169, 341, 307, 303, 246, 339, 305, 302, 141,
	129, 136, 158, 146, 159, 137, 152, 151, 153, 0,
	242, 0, 164, 348, 362, 133, 128, 168, 125, 149,
	118, 112, 253, 119, 120, 124, 123, 0, 140, 147,
	150, 156, 157, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 337, 0, 0, 0, 0, 0, 167, 252, 132,
	259, 257, 260, 329, 258, 299, 300, 352, 353, 354,
	326, 254, 0, 0, 331, 304, 110, 115, 144, 359,
	160, 131, 173, 0, 0, 0, 0, 0, 272, 358,
	322, 320, 345, 0, 130, 165, 0, 166, 506, 0,
	0, 138, 0, 0, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 179, 178, 180, 116,
	181, 182, 346, 330, 288, 349, 264, 279, 361, 281,
	282, 318, 247, 298, 155, 277, 111, 0, 248, 0,
	135, 0, 0, 139, 142, 143, 0, 327, 0, 0,
	0, 338, 347, 295, 0, 267, 240, 274, 241, 265,
	292, 127, 263, 332, 301, 280, 0, 355, 145, 310,
	0, 163, 148, 0, 0, 294, 335, 296, 328, 287,
	319, 256, 309, 350, 278, 315, 0, 0, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 312,
	344, 276, 314, 317, 239, 311, 0, 243, 249, 360,
	342, 270, 271, 0, 0, 0, 0, 0, 0, 0,
	293, 297, 324, 285, 0, 0, 0, 0, 0, 0,
	1338, 0, 268, 0, 308, 0, 0, 0, 251, 245,
	291, 0, 0, 0, 255, 0, 269, 325, 0, 0,
	0, 336, 286, 174, 343, 284, 283, 351, 321, 0,
	333, 266, 275, 121, 273, 161, 316, 172, 113, 340,
	334, 306, 289, 290, 244, 0, 323, 126, 134, 262,
	313, 170, 171, 122, 175, 250, 357, 114, 700, 356,
	154, 701, 169, 341, 307, 303, 246, 339, 305, 302,
	141, 129, 136, 158, 146, 159, 137, 152, 151, 153,
	0, 242, 0, 164, 348, 362, 133, 128, 168, 125,
	149, 118, 112, 253, 119, 120, 124, 123, 0, 140,
	147, 150, 156, 157, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 261, 337, 0, 0, 0, 0, 0, 167, 252,
	132, 259, 257, 260, 329, 258, 299, 300, 352, 353,
	354, 326, 254, 0, 0, 331, 304, 110, 115, 144,
	359, 160, 131, 173, 0, 0, 0, 0, 0, 272,
	358, 322, 320, 345, 0, 130, 165, 0, 166, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 179, 178, 180,
	116, 181, 182, 346, 330, 288, 349, 264, 279, 361,
	281, 282, 318, 247, 298, 155, 277, 111, 0, 248,
	0, 135, 0, 0, 139, 142, 143, 0, 327, 0,
	0, 0, 338, 347, 295, 0, 267, 240, 274, 241,
	265, 292, 127, 263, 332, 301, 280, 0, 355, 145,
	310, 0, 163, 148, 0, 0, 294, 335, 296, 328,
	287, 319, 256, 309, 350, 278, 315, 0, 0, 0,
	481, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	312, 344, 276, 314, 317, 239, 311, 0, 243, 249,
	360, 342, 270, 271, 0, 0, 0, 0, 0, 0,
	0, 293, 297, 324, 285, 0, 0, 0, 0, 0,
	0, 1223, 0, 268, 0, 308, 0, 0, 0, 251,
	245, 291, 0, 0, 0, 255, 0, 269, 325, 0,
	0, 0, 336, 286, 174, 343, 284, 283, 351, 321,
	0, 333, 266, 275, 121, 273, 161, 316, 172, 113,
	340, 334, 306, 289, 290, 244, 0, 323, 126, 134,
	262, 313, 170, 171, 122, 175, 250, 357, 114, 700,
	356, 154, 701, 169, 341, 307, 303, 246, 339, 305,
	302, 141, 129, 136, 158, 146, 159, 137, 152, 151,
	153, 0, 242, 0, 164, 348, 362, 133, 128, 168,
	125, 149, 118, 112, 253, 119, 120, 124, 123, 0,
	140, 147, 150, 156, 157, 162, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 261, 337, 0, 0, 0, 0, 0, 167,
	252, 132, 259, 257, 260, 329, 258, 299, 300, 352,
	353, 354, 326, 254, 0, 0, 331, 304, 110, 115,
	144, 359, 160, 131, 173, 0, 0, 0, 0, 0,
	272, 358, 322, 320, 345, 0, 130, 165, 0, 166,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 179, 178,
	180, 116, 181, 182, 346, 330, 288, 349, 264, 279,
	361, 281, 282, 318, 247, 298, 155, 277, 111, 0,
	248, 0, 135, 0, 0, 139, 142, 143, 0, 327,
	0, 0, 0, 338, 347, 295, 0, 267, 240, 274,
	241, 265, 292, 127, 263, 332, 301, 280, 0, 355,
	145, 310, 0, 163, 148, 0, 0, 294, 335, 296,
	328, 287, 319, 256, 309, 350, 278, 315, 0, 0,
	0, 237, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 312, 344, 276, 314, 317, 239, 311, 0, 243,
	249, 360, 342, 270, 271, 0, 0, 0, 0, 0,
	0, 0, 293, 297, 324, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 268, 0, 308, 0, 0, 0,
	251, 245, 291, 0, 0, 0, 255, 0, 269, 325,
	0, 0, 0, 336, 286, 174, 343, 284, 283, 351,
	321, 0, 333, 266, 275, 121, 273, 161, 316, 172,
	113, 340, 334, 306, 289, 290, 244, 0, 323, 126,
	134, 262, 313, 170, 171, 122, 175, 250, 357, 114,
	236, 356, 154, 235, 169, 341, 307, 303, 246, 339,
	305, 302, 141, 129, 136, 158, 146, 159, 137, 152,
	151, 153, 0, 242, 0, 164, 348, 362, 133, 128,
	168, 125, 149, 118, 112, 253, 119, 120, 124, 123,
	0, 140, 147, 150, 156, 157, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 261, 337, 0, 0, 0, 0, 0,
	167, 252, 132, 259, 257, 260, 329, 258, 299, 300,
	352, 353, 354, 326, 254, 0, 0, 331, 304, 110,
	115, 144, 359, 160, 131, 173, 0, 0, 0, 0,
	0, 272, 358, 322, 320, 345, 0, 130, 165, 0,
	166, 0, 0, 0, 138, 0, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 179,
	178, 180, 116, 181, 182, 346, 330, 288, 349, 264,
	279, 361, 281, 282, 318, 247, 298, 155, 277, 111,
	0, 248, 0, 135, 0, 0, 139, 142, 143, 0,
	327, 0, 0, 0, 338, 347, 295, 0, 267, 240,
	274, 241, 265, 292, 127, 263, 332, 301, 280, 0,
	355, 145, 310, 0, 163, 148, 0, 0, 294, 335,
	296, 328, 287, 319, 256, 309, 350, 278, 315, 0,
	0, 0, 237, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 312, 344, 276, 314, 317, 239, 311, 0,
	243, 249, 360, 342, 270, 271, 0, 0, 0, 0,
	0, 0, 0, 293, 297, 324, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 268, 0, 308, 0, 0,
	0, 251, 245, 291, 0, 0, 0, 255, 0, 269,
	325, 0, 0, 0, 336, 286, 174, 343, 284, 283,
	351, 321, 0, 333, 266, 275, 121, 273, 161, 316,
	172, 113, 340, 334, 306, 289, 290, 244, 0, 323,
	126, 134, 262, 313, 170, 171, 122, 175, 250, 357,
	114, 700, 356, 154, 701, 169, 341, 307, 303, 246,
	339, 305, 302, 141, 129, 136, 158, 146, 159, 137,
	152, 151, 153, 0, 242, 0, 164, 348, 362, 133,
	128, 168, 125, 149, 118, 112, 253, 119, 120, 124,
	123, 0, 140, 147, 150, 156, 157, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 261, 337, 0, 0, 0, 0,
	0, 167, 252, 132, 259, 257, 260, 329, 258, 299,
	300, 352, 353, 354, 326, 254, 0, 0, 331, 304,
	110, 115, 144, 359, 160, 131, 173, 0, 0, 0,
	0, 0, 272, 358, 322, 320, 345, 0, 130, 165,
	0, 166, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	179, 178, 180, 116, 181, 182, 346, 330, 288, 349,
	264, 279, 361, 281, 282, 318, 247, 298, 155, 277,
	111, 0, 248, 0, 135, 0, 0, 139, 142, 143,
	0, 327, 0, 0, 0, 338, 347, 295, 0, 267,
	240, 274, 241, 265, 292, 127, 263, 332, 301, 280,
	0, 355, 145, 310, 0, 163, 148, 0, 0, 294,
	335, 296, 328, 287, 319, 256, 309, 350, 278, 315,
	0, 0, 0, 481, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 312, 344, 276, 314, 317, 239, 311,
	0, 243, 249, 360, 342, 270, 271, 0, 0, 0,
	0, 0, 0, 0, 293, 297, 324, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 268, 0, 308, 0,
	0, 0, 251, 245, 291, 0, 0, 0, 255, 0,
	269, 325, 0, 0, 0, 336, 286, 174, 343, 284,
	283, 351, 321, 0, 333, 266, 275, 121, 273, 161,
	316, 172, 113, 340, 334, 306, 289, 290, 244, 0,
	323, 126, 134, 262, 313, 170, 171, 122, 175, 250,
	357, 114, 700, 356, 154, 701, 169, 341, 307, 303,
	246, 339, 305, 302, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 242, 0, 164, 348, 362,
	133, 128, 168, 125, 149, 118, 112, 253, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 261, 337, 0, 0, 0,
	0, 0, 167, 252, 132, 259, 257, 260, 329, 258,
	299, 300, 352, 353, 354, 326, 254, 0, 0, 331,
	304, 110, 115, 144, 359, 160, 131, 173, 0, 0,
	0, 0, 0, 272, 358, 322, 320, 345, 0, 130,
	165, 0, 166, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 346, 330, 288,
	349, 264, 279, 361, 281, 282, 318, 247, 298, 155,
	277, 111, 0, 248, 0, 135, 0, 0, 139, 142,
	143, 0, 327, 0, 0, 0, 338, 347, 295, 0,
	267, 240, 274, 241, 265, 292, 127, 263, 332, 301,
	280, 0, 355, 145, 310, 0, 163, 148, 0, 0,
	294, 335, 296, 328, 287, 319, 256, 309, 350, 278,
	315, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 117, 312, 344, 276, 314, 317, 239,
	311, 0, 243, 249, 360, 342, 270, 271, 0, 0,
	0, 0, 0, 0, 0, 293, 297, 324, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 308,
	0, 0, 0, 251, 245, 291, 0, 0, 0, 255,
	0, 269, 325, 0, 0, 0, 336, 286, 174, 343,
	284, 283, 351, 321, 0, 333, 266, 275, 121, 273,
	161, 316, 172, 113, 340, 334, 306, 289, 290, 244,
	0, 323, 126, 134, 262, 313, 170, 171, 122, 175,
	250, 357, 114, 700, 356, 154, 701, 169, 341, 307,
	303, 246, 339, 305, 302, 141, 129, 136, 158, 146,
	159, 137, 152, 151, 153, 0, 242, 0, 164, 348,
	362, 133, 128, 168, 125, 149, 118, 112, 253, 119,
	120, 124, 123, 0, 140, 147, 150, 156, 157, 162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 261, 337, 0, 0,
	0, 0, 0, 167, 252, 132, 259, 257, 260, 329,
	258, 299, 300, 352, 353, 354, 326, 254, 0, 0,
	331, 304, 110, 115, 144, 359, 160, 131, 173, 0,
	0, 0, 0, 0, 272, 358, 322, 320, 345, 0,
	130, 165, 0, 166, 0, 0, 155, 138, 111, 0,
	0, 0, 135, 0, 0, 139, 142, 143, 0, 0,
	176, 177, 179, 178, 180, 116, 181, 182, 0, 432,
	0, 0, 0, 127, 431, 0, 0, 0, 0, 468,
	145, 0, 0, 163, 148, 0, 0, 0, 0, 461,
	462, 0, 0, 0, 0, 0, 0, 714, 53, 0,
	0, 481, 449, 448, 450, 451, 452, 453, 0, 0,
	117, 454, 455, 456, 715, 0, 0, 429, 442, 0,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	439, 440, 0, 0, 0, 0, 479, 0, 441, 0,
	0, 438, 443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 477, 0,
	0, 0, 0, 0, 0, 121, 0, 161, 0, 172,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	134, 0, 0, 170, 171, 122, 175, 0, 0, 114,
	0, 0, 154, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 141, 129, 136, 158, 146, 159, 137, 152,
	151, 153, 0, 0, 0, 164, 0, 0, 133, 128,
	168, 125, 149, 118, 112, 0, 119, 120, 124, 123,
	0, 140, 147, 150, 156, 157, 162, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 132, 469, 475, 478, 0, 476, 473, 474,
	472, 471, 470, 480, 463, 464, 466, 0, 465, 110,
	115, 144, 0, 160, 131, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 165, 0,
	166, 0, 0, 155, 138, 111, 0, 0, 0, 135,
	0, 0, 139, 142, 143, 0, 0, 176, 177, 179,
	178, 180, 116, 181, 182, 0, 432, 0, 0, 0,
	127, 431, 0, 0, 0, 0, 468, 145, 0, 0,
	163, 148, 0, 0, 0, 0, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 481, 449,
	448, 450, 451, 452, 453, 0, 0, 117, 454, 455,
	456, 0, 0, 0, 429, 442, 0, 467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 439, 440, 919,
	0, 0, 0, 479, 0, 441, 0, 0, 438, 443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 477, 0, 0, 0, 0,
	0, 0, 121, 0, 161, 0, 172, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 134, 0, 0,
	170, 171, 122, 175, 0, 0, 114, 0, 0, 154,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 141,
	129, 136, 158, 146, 159, 137, 152, 151, 153, 0,
	0, 0, 164, 0, 0, 133, 128, 168, 125, 149,
	118, 112, 0, 119, 120, 124, 123, 0, 140, 147,
	150, 156, 157, 162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 132,
	469, 475, 478, 0, 476, 473, 474, 472, 471, 470,
	480, 463, 464, 466, 0, 465, 110, 115, 144, 0,
	160, 131, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 165, 0, 166, 0, 0,
	155, 138, 111, 0, 0, 0, 135, 0, 0, 139,
	142, 143, 0, 0, 176, 177, 179, 178, 180, 116,
	181, 182, 0, 432, 0, 0, 0, 127, 431, 0,
	0, 0, 0, 468, 145, 0, 0, 163, 148, 0,
	0, 0, 0, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 423, 481, 449, 448, 450, 451,
	452, 453, 0, 0, 117, 454, 455, 456, 0, 0,
	0, 429, 442, 0, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 439, 440, 0, 0, 0, 0,
	479, 0, 441, 0, 0, 438, 443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 477, 0, 0, 0, 0, 0, 0, 121,
	0, 161, 0, 172, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 134, 0, 0, 170, 171, 122,
	175, 0, 0, 114, 0, 0, 154, 0, 169, 0,
	0, 0, 0, 0, 0, 0, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 0, 0, 164,
	0, 0, 133, 128, 168, 125, 149, 118, 112, 0,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 132, 469, 475, 478,
	0, 476, 473, 474, 472, 471, 470, 480, 463, 464,
	466, 0, 465, 110, 115, 144, 0, 160, 131, 173,
	0, 0, 0, 0, 0, 0, 24, 0, 0, 0,
	0, 130, 165, 0, 166, 0, 0, 155, 138, 111,
	0, 0, 0, 135, 0, 0, 139, 142, 143, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 0,
	432, 0, 0, 0, 127, 431, 0, 0, 0, 0,
	468, 145, 0, 0, 163, 148, 0, 0, 0, 0,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 481, 449, 448, 450, 451, 452, 453, 0,
	0, 117, 454, 455, 456, 0, 0, 0, 429, 442,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 439, 440, 0, 0, 0, 0, 479, 0, 441,
	0, 0, 438, 443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 477,
	0, 0, 0, 0, 0, 0, 121, 0, 161, 0,
	172, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 134, 0, 0, 170, 171, 122, 175, 0, 0,
	114, 0, 0, 154, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 141, 129, 136, 158, 146, 159, 137,
	152, 151, 153, 0, 0, 0, 164, 0, 0, 133,
	128, 168, 125, 149, 118, 112, 0, 119, 120, 124,
	123, 0, 140, 147, 150, 156, 157, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 132, 469, 475, 478, 0, 476, 473,
	474, 472, 471, 470, 480, 463, 464, 466, 0, 465,
	110, 115, 144, 0, 160, 131, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 165,
	0, 166, 0, 0, 155, 138, 111, 0, 0, 0,
	135, 0, 0, 139, 142, 143, 0, 0, 176, 177,
	179, 178, 180, 116, 181, 182, 0, 432, 0, 0,
	0, 127, 431, 0, 0, 0, 0, 468, 145, 0,
	0, 163, 148, 0, 0, 0, 0, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 481,
	449, 448, 450, 451, 452, 453, 0, 0, 117, 454,
	455, 456, 0, 0, 0, 429, 442, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 439, 440,
	0, 0, 0, 0, 479, 0, 441, 0, 0, 438,
	443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 477, 0, 0, 0,
	0, 0, 0, 121, 0, 161, 0, 172, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 134, 0,
	0, 170, 171, 122, 175, 0, 0, 114, 0, 0,
	154, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	141, 129, 136, 158, 146, 159, 137, 152, 151, 153,
	0, 0, 0, 164, 0, 0, 133, 128, 168, 125,
	149, 118, 112, 0, 119, 120, 124, 123, 0, 140,
	147, 150, 156, 157, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	132, 469, 475, 478, 0, 476, 473, 474, 472, 471,
	470, 480, 463, 464, 466, 0, 465, 110, 115, 144,
	0, 160, 131, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 165, 155, 166, 111,
	0, 0, 138, 135, 0, 0, 139, 142, 143, 0,
	0, 0, 0, 0, 0, 176, 177, 179, 178, 180,
	116, 181, 182, 0, 127, 0, 0, 0, 0, 0,
	468, 145, 0, 0, 163, 148, 0, 0, 0, 0,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 481, 449, 448, 450, 451, 452, 453, 0,
	0, 117, 454, 455, 456, 0, 0, 0, 0, 442,
	0, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 439, 440, 0, 0, 0, 0, 479, 0, 441,
	0, 0, 438, 443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 477,
	0, 0, 0, 0, 0, 0, 121, 0, 161, 0,
	172, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 134, 0, 0, 170, 171, 122, 175, 0, 0,
	114, 0, 0, 154, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 141, 129, 136, 158, 146, 159, 137,
	152, 151, 153, 0, 0, 0, 164, 0, 0, 133,
	128, 168, 125, 149, 118, 112, 0, 119, 120, 124,
	123, 0, 140, 147, 150, 156, 157, 162, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 132, 469, 475, 478, 0, 476, 473,
	474, 472, 471, 470, 480, 463, 464, 466, 0, 465,
	110, 115, 144, 0, 160, 131, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 165,
	155, 166, 111, 0, 0, 138, 135, 0, 0, 139,
	142, 143, 0, 0, 0, 0, 0, 0, 176, 177,
	179, 178, 180, 116, 181, 182, 0, 127, 0, 0,
	0, 0, 0, 0, 145, 0, 0, 163, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 237, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	616, 615, 625, 626, 618, 619, 620, 621, 622, 623,
	624, 617, 0, 0, 627, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 161, 0, 172, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 134, 0, 0, 170, 171, 122,
	175, 0, 0, 114, 0, 0, 154, 0, 169, 0,
	0, 0, 0, 0, 0, 0, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 0, 0, 164,
	0, 0, 133, 128, 168, 125, 149, 118, 112, 0,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 0, 0, 155, 0, 111, 0, 0, 0, 135,
	0, 0, 139, 142, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 1095, 132, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 145, 0, 0,
	163, 148, 0, 110, 115, 144, 0, 160, 131, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 237, 0,
	1097, 130, 165, 0, 166, 0, 0, 117, 138, 0,
	0, 0, 604, 603, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 605,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 161, 0, 172, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 134, 0, 0,
	170, 171, 122, 175, 0, 0, 114, 0, 0, 154,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 141,
	129, 136, 158, 146, 159, 137, 152, 151, 153, 0,
	0, 0, 164, 0, 0, 133, 128, 168, 125, 149,
	118, 112, 0, 119, 120, 124, 123, 0, 140, 147,
	150, 156, 157, 162, 155, 0, 111, 0, 0, 783,
	782, 0, 0, 139, 142, 143, 0, 0, 0, 781,
	0, 0, 0, 780, 0, 0, 0, 167, 0, 132,
	0, 127, 0, 0, 0, 0, 0, 0, 145, 0,
	0, 163, 148, 0, 0, 0, 110, 115, 144, 0,
	160, 131, 173, 0, 0, 0, 0, 0, 0, 371,
	0, 0, 0, 0, 130, 165, 0, 166, 117, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 179, 178, 180, 116,
	181, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 779, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 161, 0, 172, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 134, 0,
	0, 170, 171, 122, 175, 0, 0, 114, 0, 0,
	154, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	141, 129, 136, 158, 146, 159, 137, 152, 151, 153,
	0, 0, 0, 164, 0, 0, 133, 128, 168, 125,
	149, 118, 112, 0, 119, 120, 124, 123, 0, 140,
	147, 150, 156, 157, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 115, 144,
	0, 160, 131, 173, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 165, 155, 166, 111,
	0, 0, 138, 135, 0, 0, 139, 142, 143, 0,
	0, 0, 0, 0, 0, 176, 177, 179, 178, 180,
	116, 181, 182, 0, 127, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 163, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 161, 0,
	172, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 134, 0, 0, 170, 171, 122, 175, 0, 0,
	114, 0, 0, 154, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 141, 129, 136, 158, 146, 159, 137,
	152, 151, 153, 0, 0, 0, 164, 0, 0, 133,
	128, 168, 125, 149, 118, 112, 0, 119, 120, 124,
	123, 0, 140, 147, 150, 156, 157, 162, 155, 0,
	111, 0, 0, 0, 135, 0, 0, 139, 142, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1363, 167, 0, 132, 0, 127, 0, 0, 0, 0,
	0, 0, 145, 0, 0, 163, 148, 0, 0, 0,
	110, 115, 144, 0, 160, 131, 173, 0, 0, 0,
	0, 0, 0, 108, 0, 1365, 0, 0, 130, 165,
	0, 166, 117, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	179, 178, 180, 116, 181, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 161,
	0, 172, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 134, 0, 0, 170, 171, 122, 175, 0,
	0, 114, 0, 0, 154, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 0, 0, 164, 0, 0,
	133, 128, 168, 125, 149, 118, 112, 0, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 115, 144, 0, 160, 131, 173, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	165, 155, 166, 111, 0, 0, 138, 135, 0, 0,
	139, 142, 143, 0, 0, 0, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 0, 127, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 163, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 237, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 161, 0, 172, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 134, 0, 0, 170, 171,
	122, 175, 0, 0, 114, 0, 0, 154, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 141, 129, 136,
	158, 146, 159, 137, 152, 151, 153, 0, 0, 0,
	164, 0, 0, 133, 128, 168, 125, 149, 118, 112,
	0, 119, 120, 124, 123, 0, 140, 147, 150, 156,
	157, 162, 0, 155, 0, 111, 0, 0, 0, 135,
	0, 0, 139, 142, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 132, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 145, 0, 0,
	163, 148, 0, 0, 110, 115, 144, 0, 160, 131,
	173, 0, 0, 0, 0, 0, 0, 0, 237, 0,
	0, 682, 130, 165, 683, 166, 0, 117, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 179, 178, 180, 116, 181, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 161, 0, 172, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 134, 0, 0,
	170, 171, 122, 175, 0, 0, 114, 0, 0, 154,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 141,
	129, 136, 158, 146, 159, 137, 152, 151, 153, 0,
	0, 0, 164, 0, 0, 133, 128, 168, 125, 149,
	118, 112, 0, 119, 120, 124, 123, 0, 140, 147,
	150, 156, 157, 162, 155, 0, 111, 0, 0, 0,
	135, 0, 0, 139, 142, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 132,
	0, 127, 511, 0, 0, 0, 0, 0, 145, 0,
	0, 163, 148, 0, 0, 0, 110, 115, 144, 0,
	160, 131, 173, 0, 0, 0, 0, 0, 0, 237,
	0, 510, 0, 0, 130, 165, 0, 166, 117, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 179, 178, 180, 116,
	181, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 161, 0, 172, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 134, 0,
	0, 170, 171, 122, 175, 0, 0, 114, 0, 0,
	154, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	141, 129, 136, 158, 146, 159, 137, 152, 151, 153,
	0, 0, 0, 164, 0, 0, 133, 128, 168, 125,
	149, 118, 112, 0, 119, 120, 124, 123, 0, 140,
	147, 150, 156, 157, 162, 155, 0, 111, 0, 0,
	0, 135, 0, 0, 139, 142, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	132, 0, 127, 0, 0, 0, 0, 0, 0, 145,
	0, 0, 163, 148, 0, 0, 0, 110, 115, 144,
	0, 160, 131, 173, 0, 0, 0, 0, 0, 0,
	108, 0, 1365, 0, 0, 130, 165, 0, 166, 117,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 179, 178, 180,
	116, 181, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 161, 0, 172, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 134,
	0, 0, 170, 171, 122, 175, 0, 0, 114, 0,
	0, 154, 0, 169, 0, 0, 0, 0, 0, 0,
	0, 141, 129, 136, 158, 146, 159, 137, 152, 151,
	153, 0, 0, 0, 164, 0, 0, 133, 128, 168,
	125, 149, 118, 112, 0, 119, 120, 124, 123, 0,
	140, 147, 150, 156, 157, 162, 155, 0, 111, 0,
	0, 0, 135, 0, 0, 139, 142, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 167,
	0, 132, 0, 127, 0, 0, 0, 0, 0, 0,
	145, 0, 0, 163, 148, 0, 0, 0, 110, 115,
	144, 0, 160, 131, 173, 0, 0, 0, 53, 0,
	0, 108, 0, 0, 0, 0, 130, 165, 0, 166,
	117, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 179, 178,
	180, 116, 181, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 161, 0, 172,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	134, 0, 0, 170, 171, 122, 175, 0, 0, 114,
	0, 0, 154, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 141, 129, 136, 158, 146, 159, 137, 152,
	151, 153, 0, 0, 0, 164, 0, 0, 133, 128,
	168, 125, 149, 118, 112, 0, 119, 120, 124, 123,
	0, 140, 147, 150, 156, 157, 162, 155, 0, 111,
	0, 0, 0, 135, 0, 0, 139, 142, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 132, 0, 127, 0, 0, 0, 0, 0,
	0, 145, 0, 0, 163, 148, 0, 0, 0, 110,
	115, 144, 0, 160, 131, 173, 0, 0, 0, 0,
	0, 0, 237, 0, 1097, 0, 0, 130, 165, 0,
	166, 117, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 179,
	178, 180, 116, 181, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 161, 0,
	172, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 134, 0, 0, 170, 171, 122, 175, 0, 0,
	114, 0, 0, 154, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 141, 129, 136, 158, 146, 159, 137,
	152, 151, 153, 0, 0, 0, 164, 0, 0, 133,
	128, 168, 125, 149, 118, 112, 0, 119, 120, 124,
	123, 0, 140, 147, 150, 156, 157, 162, 155, 0,
	111, 0, 0, 0, 135, 0, 0, 139, 142, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 167, 0, 132, 494, 127, 0, 0, 0, 0,
	0, 0, 145, 0, 0, 163, 148, 0, 0, 0,
	110, 115, 144, 0, 160, 131, 173, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 130, 165,
	0, 166, 117, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	179, 178, 180, 116, 181, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 161,
	0, 172, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 134, 0, 0, 170, 171, 122, 175, 0,
	0, 114, 0, 0, 154, 0, 169, 0, 0, 0,
	0, 0, 0, 0, 141, 129, 136, 158, 146, 159,
	137, 152, 151, 153, 0, 0, 0, 164, 0, 0,
	133, 128, 168, 125, 149, 118, 112, 0, 119, 120,
	124, 123, 0, 140, 147, 150, 156, 157, 162, 155,
	0, 111, 0, 0, 0, 135, 0, 0, 139, 142,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 132, 0, 127, 0, 0, 0,
	0, 0, 0, 145, 0, 0, 163, 148, 0, 0,
	0, 110, 115, 144, 0, 160, 131, 173, 0, 0,
	0, 0, 0, 0, 237, 0, 0, 0, 0, 130,
	165, 0, 166, 117, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 179, 178, 180, 116, 181, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	161, 0, 172, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 134, 0, 0, 170, 171, 122, 175,
	0, 0, 114, 0, 0, 154, 0, 169, 0, 0,
	0, 0, 0, 0, 0, 141, 129, 136, 158, 146,
	159, 137, 152, 151, 153, 0, 0, 0, 164, 0,
	0, 133, 128, 168, 125, 149, 118, 112, 0, 119,
	120, 124, 123, 0, 140, 147, 150, 156, 157, 162,
	155, 0, 111, 0, 0, 0, 135, 0, 0, 139,
	142, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 132, 0, 127, 0, 0,
	0, 0, 0, 0, 145, 0, 0, 163, 148, 0,
	0, 0, 110, 115, 144, 0, 160, 131, 173, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	130, 165, 0, 166, 117, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 179, 178, 180, 116, 181, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 161, 0, 172, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 134, 0, 0, 170, 171, 122,
	175, 0, 0, 114, 0, 0, 154, 0, 169, 0,
	0, 0, 0, 0, 0, 0, 141, 129, 136, 158,
	146, 159, 137, 152, 151, 153, 0, 0, 0, 164,
	0, 0, 133, 128, 168, 125, 149, 118, 112, 0,
	119, 120, 124, 123, 0, 140, 147, 150, 156, 157,
	162, 155, 0, 111, 0, 0, 0, 135, 0, 0,
	139, 142, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 132, 0, 127, 0,
	0, 0, 0, 0, 0, 145, 0, 0, 163, 148,
	0, 0, 0, 110, 115, 144, 0, 160, 131, 173,
	0, 0, 0, 0, 0, 0, 481, 0, 0, 0,
	0, 130, 165, 0, 166, 117, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 179, 178, 180, 116, 181, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 161, 0, 172, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 134, 0, 0, 170, 171,
	122, 175, 0, 0, 114, 0, 0, 154, 0, 169,
	0, 0, 0, 0, 0, 0, 0, 141, 129, 136,
	158, 146, 159, 137, 152, 151, 153, 0, 0, 0,
	164, 0, 0, 133, 128, 168, 125, 149, 118, 112,
	0, 119, 120, 124, 123, 0, 140, 147, 150, 156,
	157, 162, 155, 0, 111, 0, 0, 0, 135, 0,
	0, 139, 142, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 132, 0, 127,
	0, 0, 0, 0, 0, 0, 145, 0, 0, 163,
	148, 0, 0, 0, 110, 115, 144, 0, 160, 131,
	173, 0, 0, 0, 0, 0, 0, 371, 0, 0,
	0, 0, 130, 165, 0, 166, 117, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 179, 178, 180, 116, 181, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 161, 0, 172, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 134, 0, 0, 170,
	171, 122, 175, 0, 0, 114, 0, 0, 154, 0,
	169, 0, 0, 0, 0, 0, 0, 0, 141, 129,
	136, 158, 146, 159, 137, 152, 151, 153, 0, 0,
	0, 164, 0, 0, 133, 128, 168, 125, 149, 118,
	112, 0, 119, 120, 124, 123, 0, 140, 147, 150,
	156, 157, 162, 155, 0, 111, 0, 0, 0, 135,
	0, 0, 139, 142, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 132, 0,
	127, 0, 0, 0, 0, 0, 0, 145, 0, 0,
	163, 148, 0, 0, 0, 110, 115, 144, 0, 160,
	131, 173, 0, 0, 0, 0, 0, 0, 1183, 0,
	0, 0, 0, 130, 165, 0, 166, 117, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 179, 178, 180, 116, 181,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 161, 0, 172, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 134, 0, 0,
	170, 171, 122, 175, 0, 0, 114, 0, 0, 154,
	0, 169, 0, 0, 0, 0, 0, 0, 0, 141,
	129, 136, 158, 146, 159, 137, 152, 151, 153, 0,
	0, 0, 164, 0, 0, 133, 128, 168, 125, 149,
	118, 112, 0, 119, 120, 124, 123, 0, 140, 147,
	150, 156, 157, 162, 155, 0, 111, 0, 0, 0,
	135, 0, 0, 139, 142, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 167, 0, 132,
	0, 127, 0, 0, 0, 0, 0, 0, 145, 0,
	0, 163, 148, 0, 0, 0, 110, 115, 144, 0,
	160, 131, 173, 0, 0, 0, 0, 0, 0, 568,
	0, 0, 0, 0, 130, 165, 0, 166, 117, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 177, 179, 178, 180, 116,
	181, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 161, 0, 172, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 134, 0,
	0, 170, 171, 122, 175, 0, 0, 114, 0, 0,
	154, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	141, 129, 136, 158, 146, 159, 137, 152, 151, 153,
	0, 0, 0, 164, 0, 0, 133, 128, 168, 125,
	149, 118, 112, 0, 119, 120, 124, 123, 0, 140,
	147, 150, 156, 157, 162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 115, 144,
	0, 160, 131, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 165, 0, 166, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 179, 178, 180,
	116, 181, 182,
}
var yyPact = [...]int{

	117, -1000, -213, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1086, 1117, -1000, -1000, -1000, -1000, -1000, 840,
	192, 134, 158, 222, 218, 380, 213, 9273, -1000, -1000,
	-45, -1000, -148, -1000, -1000, -152, -1000, -1000, -1000, -1000,
	858, -1000, -1000, -1000, -1000, -1000, 1053, 1084, 883, 1000,
	901, -1000, 134, 9273, 1103, 2264, -111, 9675, 131, 163,
	161, 157, 131, -1000, -1000, -1000, 177, -1000, 169, 757,
	129, -1000, 9273, -1000, 9273, -40, 48, -1000, -1000, 8,
	385, -1000, -1000, -1000, -57, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9273, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 519, -1000, -1000, -1000, -1000,
	-1000, -1000, 819, 819, -1000, 9273, -1000, -1000, -174, -1000,
	-1000, -1000, -1000, 578, 976, 6007, 6007, 1086, -1000, 858,
	-1000, -1000, -1000, 949, -1000, -1000, 404, 8871, 961, 257,
	9273, 815, -1000, -1000, -172, 2866, -1000, -1000, -1000, -1000,
	341, 8067, 8067, -1000, -1000, -1000, 959, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1083, 1082, 764, -1000,
	153, -1000, -1000, 10077, 383, 714, 697, 687, 9273, 9273,
	129, 871, 10077, 980, -1000, -1000, 1102, 9273, 9273, -1000,
	-1000, 385, 385, -1000, -1000, 9273, -1000, -1000, -1000, -1000,
	-1000, 385, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6007, -1000, -1000, 230, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1113, 285, 399, -1000, 6007,
	1560, 819, 819, -1000, -1000, 232, -1000, -1000, 6270, 6270,
	6270, 6270, 6270, 6270, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 819, 242, -1000,
	5740, 819, 819, 819, 819, 819, 819, 6007, 819, 819,
	819, 819, 819, 819, 819, 819, 819, 819, 819, 819,
	819, -1000, -1000, 811, -1000, 389, 1053, 578, 901, 7866,
	881, -1000, -1000, 848, 9273, -1000, 9474, 4672, 1098, 2565,
	-1000, 810, 802, -168, -165, -1000, -172, 4939, -1000, -1000,
	-1000, -1000, 263, -1000, 819, 130, 1385, 6937, 1059, 33,
	-1000, -1000, -1000, 824, -1000, 824, 824, 824, 824, 67,
	67, 67, 67, -1000, -1000, -1000, -1000, -1000, 861, 859,
	-1000, 824, 824, 824, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 857, 857, 857, 833, 833, 963, -1000, -1000,
	978, 869, 868, 867, -1000, 156, 9273, 9273, -1000, -1000,
	1053, -43, -1000, -1000, 442, 9273, 9273, 385, -1000, -1000,
	-1000, -1000, 755, 410, -1000, 9273, -1000, -1000, -1000, -1000,
	-1000, -1000, 929, 6007, 6007, 491, 6007, 6007, 299, 6270,
	409, 368, 6270, 6270, 6270, 6270, 6270, 6270, 6270, 6270,
	6270, 6270, 6270, 6270, 6270, 6270, 6270, 560, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 677, -1000, 858, 838,
	838, 241, 241, 241, 241, 241, 6533, 1875, 4371, 578,
	5740, 5206, 5206, 6007, 6007, 5206, 986, 375, 410, 9072,
	-1000, 578, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5206,
	5206, 5206, 5206, 6007, -1000, -1000, -1000, 976, -1000, 986,
	1070, -1000, 942, 941, 5206, -1000, 865, 9474, 819, -1000,
	7664, -1000, 854, -1000, 331, -1000, 240, -1000, -1000, -1000,
	-1000, -1000, 1086, 6007, -1000, 3769, -1000, -178, -1000, -158,
	-183, -1000, -1000, -1000, -1000, -1000, 410, -1000, 660, 9675,
	819, 819, 819, -1000, 1385, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	307, 307, 261, 307, 307, 307, 307, 307, 11, 7,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, -1000, -1000, -1000, 629, 238, 224, -1000,
	-1000, -1000, -1000, 1023, -1000, 1059, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 395, 105,
	-1000, 1019, -1000, 1004, 604, 1112, 551, 178, 190, 31,
	-1000, -1000, 514, 67, 67, -1000, -1000, -1000, 958, -1000,
	-1000, -1000, 602, 602, -1000, -1000, -1000, -1000, 513, -1000,
	-1000, -1000, 497, -1000, -1000, 963, -1000, 249, -1000, 9273,
	9273, 9273, -1000, 333, 330, 136, 116, 115, 111, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 800, -1000, -1000,
	-1000, 600, -1000, -1000, -1000, 599, 6007, -1000, 385, 1098,
	-1000, 6007, -1000, -1000, 923, 299, 322, -1000, -1000, 498,
	-1000, -1000, 410, 410, 701, -1000, -1000, -1000, -1000, 409,
	6270, 6270, 6270, 936, 701, 1592, 1605, 1503, 241, 761,
	761, 303, 303, 303, 303, 303, 650, 650, -1000, -1000,
	-1000, 578, -1000, -1000, -1000, 578, 5206, 799, -1000, -1000,
	6736, 239, 819, 237, -1000, -1000, 578, 655, 655, 417,
	505, 655, 5206, 476, -1000, 6007, 578, -1000, 655, 578,
	655, 655, -1000, -1000, 9273, -1000, -1000, -1000, -1000, 816,
	-1000, 975, 787, 779, -1000, -1000, 5473, 578, 722, 236,
	1086, 9474, 6007, 4371, 1053, 410, -1000, -1000, -1000, -185,
	-180, -1000, -1000, 578, 9675, 9675, 9675, -1000, 597, -1000,
	551, 307, 307, -1000, 956, 953, 496, 481, 477, 595,
	593, 307, 307, 473, 591, 658, 472, 454, 446, 584,
	588, 219, 575, 565, 564, 9876, 123, -1000, 629, -1000,
	1003, 238, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 853, -1000, -1000, -1000, -1000, -1000, -1000, -59, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	767, -1000, -1000, 314, 708, -1000, 685, 791, 657, -1000,
	307, 307, -1000, 819, 819, 819, -1000, 9273, -1000, -1000,
	-1000, 647, 65, 840, 645, 9675, -1000, 9273, -1000, -1000,
	-1000, -1000, -1000, 410, 442, -1000, 410, -1000, -1000, -1000,
	-1000, -1000, -1000, 936, 701, 1522, -1000, 6270, 6270, -1000,
	-1000, 655, 5206, -1000, -1000, 8670, -1000, -1000, 3468, 5206,
	4070, -1000, -1000, -1000, 502, 560, 502, -87, 849, 366,
	-1000, 6007, 396, -1000, -1000, -1000, -1000, -1000, -1000, 1101,
	-211, 999, -1000, 819, -1000, -1000, 856, 9072, 9072, 1053,
	-1000, 410, -1000, -1000, -1000, -1000, -1000, -1000, 578, 578,
	578, -1000, -1000, 551, 551, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 587, 583, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 839, -1000, 1039, 835, 123,
	629, 430, -1000, -1000, -1000, -1000, -1000, 577, -1000, 441,
	-1000, 437, 636, 340, 9072, 9072, 9072, -1000, -1000, -1000,
	951, -1000, -1000, -1000, -1000, -1000, -1000, 6270, 701, 701,
	-1000, -1000, -1000, -1000, 229, 578, -1000, 578, 824, 824,
	-1000, 824, 833, -1000, 824, 93, 824, 84, 578, 578,
	819, -82, -1000, 410, 6007, 1098, 8469, 572, 1111, -1000,
	819, -1000, 858, 167, -1000, -1000, 819, -129, -129, -1000,
	-1000, -1000, -1000, 9072, -1000, -1000, -1000, -1000, 9072, 830,
	123, -1000, 766, -1000, 765, 624, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 653, -1000, 824, 653, 653, 625, 701,
	3167, -1000, -1000, -1000, 175, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6270, 578, 571, 410, 1095, 786, 907,
	-1000, -1000, -1000, 983, 7200, 7401, -50, 9474, 779, 578,
	9072, -115, -1000, 436, -1000, 644, 639, 9072, 823, -1000,
	-1000, -1000, -1000, 9072, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 96, -1000, -1000, 1089, 1076, 8469, 8469, 8469, 8469,
	-1000, 898, 890, -1000, 897, 884, 928, 9273, -1000, 634,
	7200, 210, -1000, 8268, -1000, -1000, -205, -208, 774, -1000,
	-1000, 623, -1000, 620, -1000, -1000, -1000, 618, 9072, 270,
	-1000, 144, 526, 578, 107, -100, -1000, 6007, 6007, 907,
	864, 1014, -1000, -1000, -1000, -1000, 888, -1000, 886, -1000,
	-1000, -1000, -1000, -1000, 152, 148, 147, -1000, -201, 1075,
	1074, -115, -1000, 932, 150, 150, -1000, 616, 974, -1000,
	-1000, -1000, 307, 567, 1057, 974, -1000, -1000, 1036, 974,
	-1000, -1000, 919, -95, -107, 410, 769, 6007, 6007, -1000,
	-1000, 819, 819, 819, -1000, -206, 562, 557, -1000, 284,
	-1000, 307, -1000, 552, 1033, 150, -1000, -1000, 307, 307,
	434, -1000, -1000, -1000, -1000, 610, -1000, 918, -1000, 410,
	410, 9072, 9072, 9072, 1072, -203, -1000, 819, 433, -1000,
	586, 150, 636, 636, -1000, -1000, -98, 609, -1000, 609,
	609, 548, 1071, -1000, -1000, -1000, -1000, -1000, -103, -1000,
	9072, -1000, -1000, -1000, 524, -108, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 27, 24, 1428, 1427, 1420, 21, 1060, 1419, 1418,
	1416, 1415, 1413, 1407, 1405, 12, 941, 1404, 1401, 1400,
	1396, 1393, 1389, 1386, 1385, 1384, 1383, 1380, 1378, 1374,
	1371, 1370, 252, 1369, 1366, 1362, 42, 1359, 76, 1353,
	95, 1352, 1346, 1340, 39, 175, 36, 37, 169, 1337,
	25, 28, 15, 1336, 1335, 10, 1331, 1426, 1330, 1329,
	54, 87, 1326, 1324, 43, 1323, 1320, 1319, 2, 20,
	1317, 71, 1311, 1307, 81, 121, 1305, 1304, 1303, 1301,
	1300, 1299, 53, 6, 17, 1, 31, 1297, 7, 70,
	1296, 51, 1294, 1293, 1290, 1289, 48, 1288, 80, 1286,
	30, 75, 1285, 50, 14, 55, 1284, 1283, 74, 97,
	78, 73, 1282, 60, 1280, 1279, 200, 1277, 1273, 1271,
	907, 1270, 100, 638, 1267, 1258, 1257, 1256, 1255, 1251,
	56, 47, 0, 69, 34, 41, 1249, 52, 846, 45,
	8, 1246, 96, 1245, 44, 32, 90, 35, 1244, 1243,
	1241, 1240, 1239, 1238, 1237, 324, 1236, 1233, 1232, 1231,
	19, 1228, 1227, 1224, 1223, 1222, 1221, 1220, 1219, 1218,
	1216, 1215, 58, 1213, 1211, 1208, 1204, 1203, 1202, 1201,
	1199, 1196, 1195, 1194, 18, 1193, 1192, 1191, 29, 57,
	33, 67, 1190, 1189, 1187, 79, 26, 1186, 1184, 1183,
	1182, 59, 40, 1181, 77, 49, 46, 1179, 1178, 1177,
	82, 11, 23, 1176, 16, 1175, 1172, 4, 9, 1171,
	1169, 1167, 1166, 1164, 1159, 1158, 3, 1156, 1154, 72,
	1153, 1152, 65, 5, 1151, 1150, 1149, 1148, 1145, 1143,
	1134, 1131, 61, 22, 1124, 129,
}
var yyR1 = [...]int{

	0, 240, 241, 241, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 16, 236, 236, 237,
	237, 238, 238, 239, 239, 17, 17, 18, 18, 19,
	19, 35, 35, 20, 21, 22, 22, 234, 234, 233,
	160, 160, 7, 7, 23, 23, 23, 23, 23, 235,
	235, 235, 235, 235, 235, 235, 225, 225, 226, 226,
	220, 218, 218, 215, 215, 222, 222, 213, 213, 219,
	219, 216, 216, 214, 214, 221, 221, 230, 230, 231,
	231, 232, 232, 232, 191, 191, 190, 190, 189, 189,
	189, 192, 192, 192, 26, 206, 208, 208, 209, 209,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 162, 164, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 177, 178,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 180, 180, 181, 181, 182, 182,
	183, 183, 165, 188, 188, 163, 159, 161, 207, 207,
	207, 202, 137, 137, 148, 148, 148, 148, 227, 227,
	228, 228, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 151, 151, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 150, 150, 150, 150, 150, 152, 152,
	152, 152, 152, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 154, 154,
	154, 154, 154, 154, 154, 154, 201, 201, 155, 155,
	195, 195, 196, 196, 196, 193, 193, 194, 194, 197,
	197, 156, 156, 156, 156, 156, 156, 37, 36, 36,
	36, 118, 118, 118, 198, 184, 184, 184, 158, 185,
	185, 186, 186, 186, 187, 187, 187, 199, 199, 200,
	200, 157, 203, 203, 203, 203, 6, 6, 223, 223,
	223, 223, 217, 217, 4, 4, 4, 1, 2, 2,
	3, 3, 3, 5, 5, 205, 205, 204, 204, 212,
	212, 211, 24, 24, 24, 24, 24, 24, 24, 24,
	124, 124, 128, 128, 128, 25, 25, 25, 65, 65,
	129, 129, 8, 27, 9, 10, 127, 127, 127, 11,
	12, 12, 12, 12, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 43, 43, 63, 63, 63, 60, 60, 61,
	61, 62, 62, 59, 59, 64, 64, 64, 31, 29,
	30, 30, 30, 30, 244, 32, 33, 33, 34, 34,
	34, 40, 40, 40, 38, 38, 39, 39, 46, 46,
	45, 45, 47, 47, 47, 47, 136, 136, 136, 135,
	135, 49, 49, 50, 50, 51, 51, 52, 52, 52,
	66, 53, 53, 53, 53, 143, 143, 141, 141, 141,
	140, 140, 54, 54, 54, 54, 55, 55, 55, 55,
	56, 56, 58, 58, 57, 57, 67, 67, 67, 67,
	68, 68, 69, 69, 48, 48, 48, 48, 48, 48,
	48, 121, 121, 71, 71, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 81, 81, 81, 81, 81,
	81, 72, 72, 72, 72, 72, 72, 72, 44, 44,
	82, 82, 82, 88, 83, 83, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 79, 79, 79, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 78, 78,
	78, 78, 78, 78, 78, 78, 245, 245, 80, 80,
	80, 80, 41, 41, 41, 41, 41, 145, 145, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 92, 92, 42, 42, 90, 90, 91, 93,
	93, 89, 89, 89, 74, 74, 74, 74, 74, 74,
	74, 76, 76, 76, 94, 94, 95, 95, 96, 96,
	97, 97, 98, 99, 99, 99, 100, 100, 100, 100,
	101, 101, 101, 73, 73, 73, 73, 73, 73, 102,
	102, 102, 102, 103, 103, 84, 84, 86, 86, 85,
	87, 104, 104, 105, 106, 106, 109, 109, 108, 108,
	108, 108, 108, 117, 117, 116, 116, 116, 107, 107,
	110, 110, 114, 114, 113, 115, 115, 115, 115, 112,
	112, 111, 111, 146, 146, 146, 119, 119, 122, 122,
	123, 123, 120, 120, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 130, 130, 130, 126, 126, 224,
	224, 133, 133, 134, 134, 138, 138, 139, 139, 142,
	142, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	242, 243, 144,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 11, 0, 6, 0,
	4, 0, 6, 0, 4, 1, 3, 1, 3, 6,
	7, 1, 1, 8, 7, 3, 3, 1, 3, 5,
	0, 2, 1, 1, 3, 5, 11, 11, 11, 0,
	1, 1, 5, 9, 7, 7, 1, 1, 1, 1,
	2, 3, 2, 0, 2, 1, 1, 0, 2, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 1,
	2, 4, 4, 2, 0, 1, 0, 1, 1, 2,
	2, 1, 1, 1, 4, 4, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 4, 3, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 3, 3, 4, 1, 3,
	3, 3, 1, 1, 3, 1, 1, 1, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 3, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 1,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 3,
	4, 1, 1, 1, 1, 0, 3, 3, 2, 0,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 2,
	1, 2, 7, 7, 8, 9, 0, 1, 3, 1,
	2, 3, 0, 2, 0, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	3, 2, 6, 7, 7, 7, 9, 7, 7, 7,
	0, 1, 0, 1, 1, 6, 5, 4, 1, 3,
	0, 1, 3, 3, 2, 2, 0, 1, 1, 4,
	2, 3, 2, 2, 4, 4, 3, 6, 3, 3,
	4, 4, 4, 6, 5, 5, 3, 3, 5, 6,
	7, 3, 3, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 0, 3, 1, 1, 1, 0, 2, 1,
	1, 0, 1, 1, 1, 0, 2, 2, 4, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 3, 5, 5, 3, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	1, 3, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 1, 2, 3, 3,
	3, 2, 3, 1, 2, 1, 1, 1, 2, 3,
	2, 2, 0, 2, 3, 2, 2, 2, 1, 0,
	2, 2, 2, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0,
}
var yyChk = [...]int{

	-1000, -240, -14, -15, -19, -20, -21, -22, -23, -24,
	-25, -8, -27, -28, -31, -29, -9, -10, -11, -12,
	-13, -30, -16, -17, 6, -35, 8, 9, 46, -26,
	127, 128, 129, 150, 131, 143, 49, 66, 270, 145,
	277, 280, 281, 284, 283, 298, 42, 144, 148, 149,
	-242, 7, 254, 69, -241, 311, -96, 14, -34, 5,
	-32, -244, -32, -32, -32, -32, -206, 69, -7, -224,
	23, 32, 134, 246, 247, 35, -120, 138, -124, 135,
	-7, 34, -129, 134, 134, 239, 127, 234, 272, -62,
	-63, 274, 275, 241, 134, 276, 237, 273, 236, 233,
	174, 72, 48, 135, 28, 26, 134, -138, 72, -132,
	260, 19, 205, 151, 170, 261, 303, 81, 204, 207,
	208, 146, 166, 210, 209, 202, 160, 44, 200, 184,
	278, 265, 243, 199, 161, 23, 185, 189, 285, 26,
	212, 183, 27, 28, 262, 51, 187, 213, 55, 203,
	214, 191, 190, 192, 173, 17, 215, 216, 186, 188,
	264, 148, 217, 54, 196, 279, 281, 241, 201, 175,
	164, 165, 150, 266, 136, 167, 298, 299, 301, 300,
	302, 304, 305, -144, -144, -127, 264, 207, -144, 282,
	-144, -144, 299, 301, 300, 302, 303, 305, 270, -144,
	-144, -144, -144, -15, -100, 16, 15, -18, -16, -242,
	6, 37, 38, -40, 56, 57, -33, -120, -57, -138,
	10, -106, -107, -109, 282, -146, -108, 286, 287, 285,
	-134, -117, 288, -133, -131, 174, 171, 72, -132, 87,
	39, 41, 194, 90, 157, 122, 179, 15, 21, 91,
	168, 121, 242, 206, 255, 127, 64, 245, 248, 244,
	246, 234, 162, 45, 9, 42, 144, 38, 115, 129,
	94, 95, 272, 147, 40, 145, 84, 18, 67, 10,
	48, 12, 13, 139, 138, 106, 135, 62, 7, 155,
	156, 123, 43, 103, 58, 36, 60, 104, 16, 249,
	250, 47, 182, 178, 259, 181, 154, 177, 117, 65,
	52, 88, 82, 163, 85, 68, 149, 86, 14, 63,
	275, 141, 274, 159, 105, 130, 254, 30, 61, 247,
	6, 258, 46, 143, 153, 59, 134, 235, 34, 180,
	152, 176, 93, 137, 83, 276, 5, 35, 197, 8,
	66, 140, 251, 252, 253, 50, 172, 169, 273, 263,
	92, 11, 198, -235, 285, 279, 271, 267, -207, -202,
	-137, 72, -132, -123, 139, 135, 135, 135, -123, 134,
	134, 72, -122, 139, -57, -57, 238, 134, 246, -144,
	-144, 235, -59, 242, 243, -61, 10, 106, -144, -144,
	-144, 241, -144, -144, -144, -144, -144, -144, -144, -57,
	75, -144, -85, -242, -85, -144, -57, -144, -144, 304,
	283, 284, -243, 71, -101, 18, 47, -48, -70, 88,
	-75, 45, 40, -74, -71, -89, -87, -88, 122, 111,
	112, 119, 89, 123, -79, -77, -78, -80, 74, 73,
	75, 76, 77, 78, 82, 83, 84, -133, -138, -85,
	-242, 60, 61, 255, 256, 259, 257, 91, 50, 244,
	253, 252, 251, 249, 250, 245, 248, 139, 246, 117,
	254, 72, -132, -97, -98, -48, -96, -15, -32, 52,
	-38, 38, 80, -58, 43, -57, 46, 124, -57, 70,
	-110, -113, -111, 289, 291, -108, 282, 96, -116, -133,
	74, 45, -116, 46, 15, 15, 71, 70, -148, -151,
	-153, -152, -154, -149, -150, 168, 169, 122, 172, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 46,
	146, 164, 165, 166, 167, 185, 186, 187, 188, 189,
	190, 191, 192, 151, 170, 261, 152, 153, 154, 155,
	156, 157, 159, 160, 161, 162, 163, -142, 72, -132,
	88, 72, 72, 72, -57, -57, -122, 68, -142, 40,
	-43, 10, -57, -138, -60, -61, -61, -57, -60, -144,
	-144, -144, -83, -48, -144, -130, 137, 39, -144, -144,
	-144, 8, 106, 87, 86, 103, 70, 17, -48, -72,
	106, 88, 104, 105, 90, 108, 107, 118, 111, 112,
	113, 114, 115, 116, 117, 109, 110, 121, 96, 97,
	98, 99, 100, 101, 102, -121, -242, -88, -242, 125,
	126, -75, -75, -75, -75, -75, -75, -242, 124, -15,
	-242, -242, -242, -242, -242, -242, -242, -92, -48, -242,
	-245, -242, -245, -245, -245, -245, -245, -245, -245, -242,
	-242, -242, -242, 70, -99, 41, 42, -100, -243, -40,
	-76, -133, 75, 78, -39, 59, -73, 46, 50, -15,
	-242, -57, -104, -105, -89, -133, -138, -139, -138, -131,
	171, 174, -69, 11, -109, -146, -112, 70, -114, 70,
	290, 292, 293, -110, 68, 85, -48, -185, 121, -242,
	269, 24, 25, -208, -209, -210, -163, -159, -161, -162,
	-164, -165, -166, -167, -168, -169, -170, -171, -172, -173,
	-174, -175, -176, -177, -178, -179, -180, -181, -182, -183,
	81, 278, -191, 194, 205, 49, 206, 207, 208, 135,
	210, 211, 212, 27, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 45, -202, -203, -204, -5, -4, 135,
	36, 32, 23, 22, -227, -228, -229, -197, -156, -198,
	-199, -200, -157, -37, -158, -186, -187, 82, 88, 45,
	194, 141, 36, 35, 81, 68, 121, 204, 201, -193,
	197, -155, 69, -155, -155, -155, -155, -184, 171, -184,
	-184, -184, 69, 69, -155, -155, -155, -195, 69, -195,
	-195, -196, 69, -196, -230, -231, -232, -191, 40, 68,
	68, 68, -125, 130, 278, 255, 132, 129, 133, 128,
	194, 171, 81, 45, 14, 266, 72, -65, -57, -57,
	-100, 240, -144, -144, -64, 104, 11, -138, -57, -60,
	-144, 70, -243, -57, 54, -48, -48, -81, 82, 88,
	83, 84, -48, -48, -75, -82, -85, -88, 79, 106,
	104, 105, 90, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -75, -75, -75, -75, -75, -75, -145, 72,
	74, 72, -74, -74, -133, -46, 38, -45, -47, 113,
	-48, -138, -134, -139, -131, -243, -15, -45, -45, -48,
	-48, -45, -38, -90, -91, 92, -133, -243, -45, -46,
	-45, -45, -98, -101, -119, 18, 10, 50, 50, -45,
	-103, 68, -104, -84, -86, -85, -242, -15, -102, -133,
	-69, 70, 96, 124, -96, -48, -111, -113, -115, 294,
	291, 297, 72, -137, -242, -242, -242, -210, -190, 96,
	-190, 121, -189, 174, 171, 168, -190, -190, -190, -190,
	-190, 209, 209, -190, -190, -190, -190, -190, -190, -190,
	-190, -190, -190, -190, -190, -190, -6, 72, -205, -204,
	141, 35, 33, -229, 82, 74, 75, 76, 82, -36,
	-71, -118, 244, 249, 250, 36, 36, 74, 8, -188,
	72, 74, 199, 200, 45, 45, 202, 203, -194, 198,
	75, -184, -184, 46, -201, 74, -201, 75, 75, -232,
	121, -189, -172, -57, -57, -57, -144, -130, -126, 135,
	36, 96, 137, 142, 142, 142, -128, 70, 30, 21,
	-144, 74, 74, -48, -60, -69, -48, -144, 55, 82,
	83, 84, -82, -75, -75, -75, -44, 147, 87, -243,
	-243, -45, 70, -136, -135, 39, -133, 74, 124, -242,
	124, -243, -243, -243, 70, 140, 39, -243, -45, -93,
	-91, 94, -48, -243, -243, -243, -243, -243, -57, -236,
	43, 44, -103, 70, -243, -243, -243, 70, 124, -96,
	-105, -48, -134, -100, 291, 295, 296, -243, -137, -137,
	-137, 74, -188, -190, -190, 46, 46, 75, 75, 75,
	74, 74, -190, -190, 75, 74, 72, 75, 75, 75,
	75, 45, 74, 45, 200, 199, 222, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 75, 45, 75,
	45, 75, 45, 72, -132, -2, -1, 140, -6, 36,
	-205, 69, -36, 71, 72, 122, 71, 70, 71, 70,
	71, 70, -190, -190, -242, -242, -242, -57, -144, 72,
	171, -206, 72, -202, -57, -64, -44, 87, -75, -75,
	-243, -47, -135, 113, -139, -46, -134, -147, 122, 168,
	146, 166, 162, 183, 173, 196, 164, 197, -145, -147,
	260, -96, 95, -48, 93, -49, 10, 310, 36, -86,
	50, -15, -242, -133, -133, -100, -243, -243, -243, -188,
	-188, 74, 74, 69, -3, 24, 20, 31, 69, -2,
	-6, 71, 75, 74, 75, 75, -226, 72, 45, -192,
	72, 122, 45, -212, -211, -133, -212, -212, 46, -75,
	124, -243, -243, -155, -155, -155, -196, -155, 156, -155,
	156, -243, -243, -242, -42, 258, -48, -69, -50, -51,
	-52, -53, -66, -88, -242, -57, 74, 8, -84, -15,
	124, -242, -160, 268, -160, -212, -212, 69, -2, 71,
	71, 71, -243, 70, -155, -243, -243, 72, 113, -184,
	72, -75, -243, 74, -94, 12, 70, -54, -55, -56,
	58, 62, 64, 59, 60, 61, 65, -143, 39, -50,
	-242, -141, -140, 39, -138, 74, -237, 243, -104, -243,
	-133, -234, -233, 267, 75, 71, 71, -212, 69, -215,
	-211, -213, -216, -41, 106, 263, -95, 13, 15, -51,
	-52, -51, -52, 58, 58, 58, 63, 58, 63, 58,
	-55, -138, -243, -67, 66, 138, 67, -140, -238, 308,
	309, 70, -243, 72, -217, -217, 71, -212, -214, -222,
	-218, -220, 27, 81, 140, -214, -219, -218, 263, -214,
	-218, -243, 261, 65, 264, -48, -83, 68, 68, 58,
	58, 135, 135, 135, -239, 306, 15, 15, -233, 50,
	-223, 27, -1, 81, 263, -217, 71, -221, 47, 19,
	-190, 74, -225, 24, 20, 29, 55, 262, 265, -48,
	-48, -242, -242, -242, 308, 74, 74, 106, -190, 74,
	29, -217, -190, -190, 75, 72, 55, -68, -133, -68,
	-68, 15, 307, -85, 75, 72, -226, -226, 263, -243,
	70, -243, -243, 74, 15, 264, -133, 74, 265,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 618, 0, 404, 404, 404, 404, 404, 0,
	709, 692, 330, 340, 0, 391, 0, 0, 922, 922,
	346, 922, 0, 922, 922, 0, 922, 922, 922, 922,
	0, 41, 42, 920, 1, 3, 626, 0, 0, 408,
	411, 406, 692, 0, 0, 0, 59, 0, 690, 0,
	0, 0, 690, 52, 53, 710, 0, 693, 0, 0,
	688, 331, 0, 341, 0, 0, 0, 922, 922, 0,
	0, 922, 922, 922, 0, 922, 922, 922, 922, 922,
	922, 922, 392, 384, 385, 386, 0, 399, 715, 716,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 344, 345, 0, 347, 348, 350, 922,
	352, 353, 0, 0, 922, 0, 922, 922, 0, 400,
	401, 402, 403, 35, 630, 0, 0, 618, 37, 0,
	404, 409, 410, 414, 412, 413, 405, 0, 0, 464,
	0, 45, 46, 654, 0, 0, 656, 683, 684, -2,
	0, 0, 0, 713, 714, -2, 733, 711, 712, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 54, 60, 61, 0, 0, 0, 178,
	0, 182, 183, 0, 0, 0, 0, 0, 0, 0,
	688, 0, 0, 0, 342, 343, 382, 0, 0, 366,
	367, 387, 0, 393, 394, 0, 389, 390, 371, 372,
	373, 387, 375, 376, 377, 378, 379, 380, 381, 922,
	922, 351, 922, 0, 922, 356, 704, 358, 359, 922,
	922, 922, 36, 921, 23, 0, 0, 627, 474, 0,
	479, 481, 0, 516, 517, 518, 519, 520, 0, 0,
	0, 0, 0, 0, 542, 543, 544, 545, 604, 605,
	606, 607, 608, 609, 610, 483, 484, 601, 0, 650,
	0, 0, 0, 0, 0, 0, 0, 592, 0, 566,
	566, 566, 566, 566, 566, 566, 566, 0, 0, 0,
	0, -2, -2, 619, 620, 623, 626, 35, 411, 0,
	416, 415, 407, 0, 0, 463, 0, 0, 472, 0,
	668, 679, 672, 0, 0, 657, 0, 0, 661, 665,
	666, 667, 279, 664, 0, 0, -2, 304, 188, 255,
	185, 186, 187, 248, 203, 248, 248, 248, 248, 275,
	275, 275, 275, 231, 232, 233, 234, 235, 0, 0,
	218, 248, 248, 248, 222, 238, 239, 240, 241, 242,
	243, 244, 245, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 250, 250, 250, 252, 252, -2, 719, 720,
	0, 0, 0, 0, 104, 0, 0, 0, 337, 689,
	626, 0, 922, 922, 395, 0, 0, 387, 922, 398,
	349, 354, 0, 514, 355, 0, 705, 706, 360, 361,
	362, 631, 0, 0, 0, 0, 0, 0, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 501, 502,
	503, 504, 505, 506, 507, 480, 0, 494, 0, 0,
	0, 536, 537, 538, 539, 540, 0, 418, 0, 35,
	0, 0, 0, 0, 0, 0, 414, 0, 593, 0,
	558, 0, 559, 560, 561, 562, 563, 564, 565, 0,
	418, 0, 0, 0, 622, 624, 625, 630, 38, 414,
	0, 611, 0, 0, 0, 417, 643, 0, 0, -2,
	0, 462, 472, 651, 0, 601, 0, 465, 717, 718,
	733, 734, 618, 0, 655, 0, 670, 0, 671, 0,
	0, 681, 682, 669, 658, 659, 660, 662, 0, 0,
	0, 0, 0, 105, -2, 108, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	96, 96, 0, 96, 96, 96, 96, 96, 0, 0,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 95, 179, 180, 296, 315, 0, 317,
	318, 313, -2, 305, 181, 189, 190, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 259, 0, 0,
	274, 0, 288, 290, 0, 0, 0, 0, 0, 257,
	256, 202, 0, 275, 275, 225, 226, 227, 0, 228,
	229, 230, 0, 0, 219, 220, 221, 213, 0, 214,
	215, 216, 0, 217, 55, -2, 89, 0, 691, 0,
	0, 0, 922, 704, 0, 701, 0, 699, 0, 694,
	695, 696, 697, 698, 700, 702, 703, 332, 338, 336,
	922, 0, 364, 365, 368, 0, 0, 388, 387, 472,
	374, 0, 649, 922, 0, 475, 476, 478, 495, 0,
	497, 499, 628, 629, 485, 486, 510, 511, 512, 0,
	0, 0, 0, 508, 490, 0, 521, 522, 523, 524,
	525, 526, 527, 528, 529, 530, 531, 532, 535, 577,
	578, 0, 533, 534, 541, 0, 0, 419, 420, 422,
	426, 0, 602, 0, -2, 513, 35, 0, 0, 0,
	0, 0, 0, 599, 596, 0, 0, 567, 0, 0,
	0, 0, 621, 24, 0, 686, 687, 612, 613, 27,
	39, 0, 643, 633, 645, 647, 0, 35, 0, 639,
	618, 0, 0, 0, 626, 473, 680, 673, 674, 0,
	0, 678, 280, 0, 0, 0, 0, 109, 0, 97,
	0, 96, 96, 98, 0, 0, 0, 0, 0, 0,
	0, 96, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 308, 297, 296, 316,
	0, 315, 306, 191, 260, 261, 262, 263, 264, 265,
	266, 268, 271, 272, 273, 287, 289, 291, 0, 278,
	173, 174, 281, 282, 283, 284, 285, 286, 184, 258,
	0, 223, 224, 0, 0, 246, 0, 0, 0, 90,
	96, 96, 93, 0, 0, 0, 322, 0, 922, 707,
	708, 0, 0, 0, 0, 0, 335, 0, 333, 334,
	363, 383, 396, 397, 395, 369, 515, 357, 632, 496,
	498, 500, 487, 508, 491, 0, 488, 0, 0, 482,
	546, 0, 0, 423, 427, 0, 429, 430, 0, 418,
	0, -2, 549, 550, 0, 0, 0, 0, 618, 0,
	597, 0, 0, 557, 568, 569, 570, 571, 25, 431,
	0, 0, 40, 0, 648, -2, 0, 0, 0, 626,
	652, 653, 602, 44, 675, 676, 677, 62, 0, 0,
	0, 175, 176, 0, 0, 99, 100, 134, 135, 172,
	137, 138, 0, 0, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 0, 309, 0, 0, 308,
	296, 0, 267, 249, 276, 277, 236, 0, 237, 0,
	253, 0, 0, 0, 0, 0, 0, 323, 324, 325,
	0, 327, 328, 329, 339, 370, 489, 0, 509, 492,
	547, 421, 428, 424, 0, 0, 603, 0, 248, 248,
	582, 248, 252, 585, 248, 587, 248, 590, 0, 0,
	0, 594, 556, 600, 0, 472, 0, 0, 0, 646,
	0, -2, 0, 641, 640, 43, 0, 50, 50, 136,
	177, 139, 140, 0, 307, 310, 311, 312, 0, 0,
	308, 269, 0, 247, 0, 0, 91, 68, 69, 92,
	101, 102, 103, 0, 319, 248, 0, 0, 0, 493,
	0, 548, 551, 579, 275, 583, 584, 586, 588, 589,
	591, 553, 552, 0, 0, 0, 598, 614, 432, 433,
	435, 436, 437, 445, 0, 447, 29, 0, 636, 35,
	0, 0, 64, 0, 65, 0, 0, 0, 0, 270,
	251, 254, 73, 0, 321, 77, 81, 326, 425, 580,
	581, 572, 555, 595, 616, 0, 0, 0, 0, 0,
	452, 0, 0, 455, 0, 0, 0, 0, 446, 0,
	0, 466, 448, 0, 450, 451, 31, 0, 644, -2,
	642, 0, 47, 0, 51, 302, 302, 0, 0, 83,
	320, 83, 83, 0, 0, 0, 26, 0, 0, 434,
	441, 0, 444, 453, 454, 456, 0, 458, 0, 460,
	461, 438, 439, 440, 0, 0, 0, 449, 33, 0,
	0, 0, 63, 0, 292, 293, 302, 0, 56, 74,
	75, 76, 96, 0, 0, 57, 78, 79, 0, 58,
	82, 554, 0, 0, 0, 617, 615, 0, 0, 457,
	459, 0, 0, 0, 28, 0, 0, 0, 48, 0,
	303, 96, 299, 0, 0, 294, 302, 84, 96, 96,
	0, 72, 70, 66, 67, 0, 573, 0, 576, 442,
	443, 0, 0, 0, 0, 0, 30, 0, 0, 300,
	0, 295, 0, 0, 71, 80, 574, 0, 470, 0,
	0, 0, 0, 49, 298, 301, 85, 86, 0, 467,
	0, 468, 469, 34, 0, 0, 471, 32, 575,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 89, 3, 3, 3, 116, 108, 3,
	69, 71, 113, 111, 70, 112, 124, 114, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 311,
	97, 96, 98, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 118, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 119,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 90, 91, 92, 93, 94, 95,
	99, 100, 101, 102, 103, 104, 105, 106, 109, 110,
	115, 117, 120, 121, 122, 123, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1042
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1048
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1050
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1078
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, OutFile: yyDollar[7].outFile, From: yyDollar[8].tableExprs, Where: NewWhere(WhereStr, yyDollar[9].expr), GroupBy: GroupBy(yyDollar[10].exprs), Having: NewWhere(HavingStr, yyDollar[11].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.outFile = nil
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1106
		{
			fe := byte('"')
			if len(yyDollar[4].str) > 0 {
				fe = []byte(yyDollar[4].str)[0]
			}
			ft := byte(',')
			if len(yyDollar[5].str) > 0 {
				ft = []byte(yyDollar[5].str)[0]
			}
			if len(yyDollar[5].str) > 1 {
				fe = []byte(yyDollar[5].str)[1]
			}
			lt := byte('\n')
			if len(yyDollar[6].str) > 0 {
				lt = []byte(yyDollar[6].str)[0]
			}
			yyVAL.outFile = &OutFile{OutString: string(yyDollar[3].bytes), FieldEscape: fe, FieldTerminate: ft, FieldEnclosed: fe, LineTerminate: lt}
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.str = "\""
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.str = ",\""
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1129
		{
			ft := byte(',')
			if len(yyDollar[3].bytes) > 0 {
				ft = yyDollar[3].bytes[0]
			}
			fe := byte('"')
			if len(yyDollar[6].bytes) > 0 {
				fe = yyDollar[6].bytes[0]
			}
			yyVAL.str = string([]byte{ft, fe})
		}
	case 33:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.str = "\n"
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1166
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1177
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.str = InsertStr
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.str = ReplaceStr
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.optVal = nil
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1241
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1261
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1268
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 56:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 57:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 58:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 63:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 64:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 65:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.partitionOption = &PartOptHash2{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.str = "hash"
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.str = "btree"
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.str = "default"
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1436
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1447
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1504
		{
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1506
		{
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1509
		{
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1511
		{
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1515
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.str = "character set"
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.str = "char set"
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.str = "default"
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1543
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1825
		{
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1841
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1878
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1894
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2048
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2053
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2093
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.optVal = nil
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2519
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.str = yyDollar[3].str
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.str = ""
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2591
		{
			yyVAL.str = ""
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2615
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2635
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2654
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2660
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2672
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 294:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2686
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 295:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2697
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2723
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2730
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2737
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2744
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2752
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2762
		{
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2765
		{
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2768
		{
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2779
		{
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2782
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2788
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2792
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2796
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2811
		{
			// set empty
			yyVAL.str = ""
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2816
		{
			yyVAL.str = yyDollar[1].str
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2823
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2827
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2833
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2837
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2849
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2853
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2858
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 325:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.byt = 0
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2888
		{
			yyVAL.byt = 1
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2893
		{
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2895
		{
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2897
		{
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2901
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2913
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2918
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2938
		{
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2940
		{
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2950
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2956
		{
			yyVAL.statement = &Xa{}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2962
		{
			yyVAL.statement = &Explain{}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2967
		{
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2969
		{
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2971
		{
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2975
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2981
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2985
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2989
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2999
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3003
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3007
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 357:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3011
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3015
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3019
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3023
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3027
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3031
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 363:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3037
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 364:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3041
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3045
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3049
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3057
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3061
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3072
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3079
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3083
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3087
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3091
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3095
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3099
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3103
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3107
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3111
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3115
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3119
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3124
		{
			yyVAL.str = ""
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3128
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3134
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3138
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3142
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3148
		{
			yyVAL.str = ""
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3152
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3158
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3162
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.str = ""
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3172
		{
			yyVAL.str = "full "
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3178
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3182
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3188
		{
			yyVAL.showFilter = nil
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3192
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3196
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3202
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3208
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3214
		{
			yyVAL.statement = &OtherRead{}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3218
		{
			yyVAL.statement = &OtherRead{}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3222
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3231
		{
			setAllowComments(yylex, true)
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3234
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.bytes2 = nil
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3244
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3250
		{
			yyVAL.str = UnionStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3254
		{
			yyVAL.str = UnionAllStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.str = UnionDistinctStr
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3263
		{
			yyVAL.str = ""
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3267
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3271
		{
			yyVAL.str = SQLCacheStr
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3276
		{
			yyVAL.str = ""
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3280
		{
			yyVAL.str = DistinctStr
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3285
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3289
		{
			yyVAL.str = StraightJoinHint
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3294
		{
			yyVAL.selectExprs = nil
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3298
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3304
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3308
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3314
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3318
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3322
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3326
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3331
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3335
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3339
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3346
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3351
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3355
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3361
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3365
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3375
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3379
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3383
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3389
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3402
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3406
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3410
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3414
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3419
		{
			yyVAL.empty = struct{}{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3423
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3428
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3432
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3436
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3443
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3449
		{
			yyVAL.str = JoinStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3453
		{
			yyVAL.str = JoinStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3457
		{
			yyVAL.str = JoinStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3461
		{
			yyVAL.str = StraightJoinStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3467
		{
			yyVAL.str = LeftJoinStr
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3471
		{
			yyVAL.str = LeftJoinStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3475
		{
			yyVAL.str = RightJoinStr
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3479
		{
			yyVAL.str = RightJoinStr
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3485
		{
			yyVAL.str = NaturalJoinStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3489
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3499
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3503
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3509
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3513
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3518
		{
			yyVAL.indexHints = nil
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3522
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3526
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3530
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3536
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3540
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3545
		{
			yyVAL.expr = nil
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3549
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3555
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3559
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3563
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3567
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3571
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3575
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3579
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3585
		{
			yyVAL.str = ""
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3589
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3595
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3599
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3605
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3609
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3613
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3617
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3621
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3625
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3629
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3633
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3637
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3641
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3647
		{
			yyVAL.str = IsNullStr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3651
		{
			yyVAL.str = IsNotNullStr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3655
		{
			yyVAL.str = IsTrueStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3659
		{
			yyVAL.str = IsNotTrueStr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3663
		{
			yyVAL.str = IsFalseStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3667
		{
			yyVAL.str = IsNotFalseStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3673
		{
			yyVAL.str = EqualStr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3677
		{
			yyVAL.str = LessThanStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3681
		{
			yyVAL.str = GreaterThanStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3685
		{
			yyVAL.str = LessEqualStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3689
		{
			yyVAL.str = GreaterEqualStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3693
		{
			yyVAL.str = NotEqualStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3697
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3702
		{
			yyVAL.expr = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3706
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3712
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3716
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3720
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3726
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3732
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3736
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3742
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3746
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3750
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3754
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3758
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3762
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3766
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3770
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3774
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3778
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3782
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3786
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3790
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3794
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3798
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3802
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3806
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3810
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3814
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3818
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3822
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3826
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3834
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3848
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3852
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3856
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3874
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3878
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 548:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3882
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3892
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3896
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3900
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 552:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3904
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 553:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3908
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 554:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3912
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3916
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3920
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3924
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3934
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3938
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3942
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3946
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3951
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3956
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3961
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3966
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3981
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3985
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3989
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3993
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3999
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4003
		{
			yyVAL.str = BooleanModeStr
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4007
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 575:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4011
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4015
		{
			yyVAL.str = QueryExpansionStr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4021
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4025
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4039
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4043
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4047
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4051
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4057
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4073
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4077
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4086
		{
			yyVAL.expr = nil
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4090
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4095
		{
			yyVAL.str = string("")
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4099
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4105
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4109
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4115
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4120
		{
			yyVAL.expr = nil
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4124
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4130
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4134
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4138
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4144
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4148
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4152
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4156
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4160
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4164
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4168
		{
			yyVAL.expr = &NullVal{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4174
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4183
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4187
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4192
		{
			yyVAL.exprs = nil
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4196
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4201
		{
			yyVAL.expr = nil
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4205
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4210
		{
			yyVAL.orderBy = nil
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4214
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4220
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4224
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4230
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4235
		{
			yyVAL.str = AscScr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4239
		{
			yyVAL.str = AscScr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4243
		{
			yyVAL.str = DescScr
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4248
		{
			yyVAL.limit = nil
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4252
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4256
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4260
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4265
		{
			yyVAL.str = ""
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4269
		{
			yyVAL.str = ForUpdateStr
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4273
		{
			yyVAL.str = ShareModeStr
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4286
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4290
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4294
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4299
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4303
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4307
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4314
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4318
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4322
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4326
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4331
		{
			yyVAL.updateExprs = nil
		}
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4335
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4341
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4345
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4351
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4355
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4361
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4367
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4377
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4381
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4387
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4393
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4397
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4403
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4407
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4414
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4418
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4422
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4426
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4430
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4437
		{
			yyVAL.bytes = []byte("charset")
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4443
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4447
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4451
		{
			yyVAL.expr = &Default{}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4457
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4461
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4467
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4471
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4477
		{
			yyVAL.str = ""
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4481
		{
			yyVAL.str = yyDollar[2].str
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4487
		{
			yyVAL.str = yyDollar[3].str
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4493
		{
			yyVAL.str = RepeatableRead
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4497
		{
			yyVAL.str = ReadCommitted
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4501
		{
			yyVAL.str = ReadUncommitted
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4505
		{
			yyVAL.str = Serializable
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4511
		{
			yyVAL.str = ""
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4515
		{
			yyVAL.str = yyDollar[2].str
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4521
		{
			yyVAL.str = TxReadWrite
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4525
		{
			yyVAL.str = TxReadOnly
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4531
		{
			yyVAL.str = SessionStr
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4535
		{
			yyVAL.str = SessionStr
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4539
		{
			yyVAL.str = GlobalStr
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4548
		{
			yyVAL.byt = 0
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4552
		{
			yyVAL.byt = 1
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4557
		{
			yyVAL.byt = 0
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4561
		{
			yyVAL.byt = 1
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4566
		{
			yyVAL.str = ""
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4570
		{
			yyVAL.str = IgnoreStr
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4576
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4580
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4584
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4588
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4592
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4596
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4600
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4604
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4608
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4612
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4617
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4621
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4625
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4631
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4635
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4640
		{
			yyVAL.str = IndexStr
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4644
		{
			yyVAL.str = UniqueStr
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4650
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4654
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4661
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4667
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4671
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4678
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4684
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4688
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4914
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4923
		{
			decNesting(yylex)
		}
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4928
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}

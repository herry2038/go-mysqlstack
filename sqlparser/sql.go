//line sql.y:17

package sqlparser

import __yyfmt__ "fmt"

//line sql.y:19

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	outFile               *OutFile
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const LOAD = 57361
const INFILE = 57362
const ALGORITHM = 57363
const BTREE = 57364
const CASCADE = 57365
const CONSTRAINT = 57366
const FULLTEXT = 57367
const HASH = 57368
const HASH2 = 57369
const INDEXES = 57370
const KEY_BLOCK_SIZE = 57371
const KEYS = 57372
const PARSER = 57373
const RESTRICT = 57374
const RTREE = 57375
const SPATIAL = 57376
const SYMBOL = 57377
const TEMPORARY = 57378
const UNIQUE = 57379
const KEY = 57380
const ALL = 57381
const DISTINCT = 57382
const AS = 57383
const EXISTS = 57384
const ASC = 57385
const DESC = 57386
const INTO = 57387
const DUPLICATE = 57388
const DEFAULT = 57389
const SET = 57390
const LOCK = 57391
const FULL = 57392
const CHECKSUM = 57393
const VALUES = 57394
const LAST_INSERT_ID = 57395
const NEXT = 57396
const VALUE = 57397
const SHARE = 57398
const MODE = 57399
const SQL_NO_CACHE = 57400
const SQL_CACHE = 57401
const JOIN = 57402
const STRAIGHT_JOIN = 57403
const LEFT = 57404
const RIGHT = 57405
const INNER = 57406
const OUTER = 57407
const CROSS = 57408
const NATURAL = 57409
const USE = 57410
const FORCE = 57411
const ON = 57412
const ID = 57413
const HEX = 57414
const STRING = 57415
const INTEGRAL = 57416
const FLOAT = 57417
const HEXNUM = 57418
const VALUE_ARG = 57419
const LIST_ARG = 57420
const COMMENT = 57421
const COMMENT_KEYWORD = 57422
const NULL = 57423
const TRUE = 57424
const FALSE = 57425
const OFF = 57426
const OR = 57427
const AND = 57428
const NOT = 57429
const BETWEEN = 57430
const CASE = 57431
const WHEN = 57432
const THEN = 57433
const ELSE = 57434
const END = 57435
const LE = 57436
const GE = 57437
const NE = 57438
const NULL_SAFE_EQUAL = 57439
const IS = 57440
const LIKE = 57441
const REGEXP = 57442
const IN = 57443
const SHIFT_LEFT = 57444
const SHIFT_RIGHT = 57445
const DIV = 57446
const MOD = 57447
const UNARY = 57448
const COLLATE = 57449
const BINARY = 57450
const INTERVAL = 57451
const JSON_EXTRACT_OP = 57452
const JSON_UNQUOTE_EXTRACT_OP = 57453
const CREATE = 57454
const ALTER = 57455
const DROP = 57456
const RENAME = 57457
const ANALYZE = 57458
const ADD = 57459
const MODIFY = 57460
const TABLE = 57461
const INDEX = 57462
const VIEW = 57463
const TO = 57464
const IGNORE = 57465
const IF = 57466
const USING = 57467
const PRIMARY = 57468
const COLUMN = 57469
const SHOW = 57470
const DESCRIBE = 57471
const EXPLAIN = 57472
const DATE = 57473
const ESCAPE = 57474
const REPAIR = 57475
const OPTIMIZE = 57476
const TRUNCATE = 57477
const BIT = 57478
const TINYINT = 57479
const SMALLINT = 57480
const MEDIUMINT = 57481
const INT = 57482
const INTEGER = 57483
const BIGINT = 57484
const INTNUM = 57485
const REAL = 57486
const DOUBLE = 57487
const FLOAT_TYPE = 57488
const DECIMAL = 57489
const NUMERIC = 57490
const TIME = 57491
const TIMESTAMP = 57492
const DATETIME = 57493
const YEAR = 57494
const CHAR = 57495
const VARCHAR = 57496
const BOOL = 57497
const CHARACTER = 57498
const VARBINARY = 57499
const NCHAR = 57500
const CHARSET = 57501
const TEXT = 57502
const TINYTEXT = 57503
const MEDIUMTEXT = 57504
const LONGTEXT = 57505
const BLOB = 57506
const TINYBLOB = 57507
const MEDIUMBLOB = 57508
const LONGBLOB = 57509
const JSON = 57510
const ENUM = 57511
const GEOMETRY = 57512
const POINT = 57513
const LINESTRING = 57514
const POLYGON = 57515
const GEOMETRYCOLLECTION = 57516
const MULTIPOINT = 57517
const MULTILINESTRING = 57518
const MULTIPOLYGON = 57519
const NULLX = 57520
const AUTO_INCREMENT = 57521
const APPROXNUM = 57522
const SIGNED = 57523
const UNSIGNED = 57524
const ZEROFILL = 57525
const FIXED = 57526
const DYNAMIC = 57527
const STORAGE = 57528
const DISK = 57529
const MEMORY = 57530
const COLUMN_FORMAT = 57531
const AVG_ROW_LENGTH = 57532
const COMPRESSION = 57533
const CONNECTION = 57534
const DATA = 57535
const DIRECTORY = 57536
const DELAY_KEY_WRITE = 57537
const ENCRYPTION = 57538
const INSERT_METHOD = 57539
const MAX_ROWS = 57540
const MIN_ROWS = 57541
const PACK_KEYS = 57542
const PASSWORD = 57543
const ROW_FORMAT = 57544
const STATS_AUTO_RECALC = 57545
const STATS_PERSISTENT = 57546
const STATS_SAMPLE_PAGES = 57547
const TABLESPACE = 57548
const COMPRESSED = 57549
const REDUNDANT = 57550
const COMPACT = 57551
const TOKUDB_DEFAULT = 57552
const TOKUDB_FAST = 57553
const TOKUDB_SMALL = 57554
const TOKUDB_ZLIB = 57555
const TOKUDB_QUICKLZ = 57556
const TOKUDB_LZMA = 57557
const TOKUDB_SNAPPY = 57558
const TOKUDB_UNCOMPRESSED = 57559
const COLLATION = 57560
const DATABASES = 57561
const TABLES = 57562
const WARNINGS = 57563
const VARIABLES = 57564
const EVENTS = 57565
const BINLOG = 57566
const GTID = 57567
const STATUS = 57568
const COLUMNS = 57569
const FIELDS = 57570
const CURRENT_TIMESTAMP = 57571
const CURRENT_DATE = 57572
const DATABASE = 57573
const SCHEMA = 57574
const CURRENT_TIME = 57575
const LOCALTIME = 57576
const LOCALTIMESTAMP = 57577
const UTC_DATE = 57578
const UTC_TIME = 57579
const UTC_TIMESTAMP = 57580
const REPLACE = 57581
const CONVERT = 57582
const CAST = 57583
const GROUP_CONCAT = 57584
const SEPARATOR = 57585
const MATCH = 57586
const AGAINST = 57587
const BOOLEAN = 57588
const LANGUAGE = 57589
const WITH = 57590
const QUERY = 57591
const EXPANSION = 57592
const UNUSED = 57593
const PARTITION = 57594
const PARTITIONS = 57595
const LIST = 57596
const XA = 57597
const DISTRIBUTED = 57598
const ENGINES = 57599
const VERSIONS = 57600
const PROCESSLIST = 57601
const QUERYZ = 57602
const TXNZ = 57603
const KILL = 57604
const ENGINE = 57605
const SINGLE = 57606
const BEGIN = 57607
const START = 57608
const TRANSACTION = 57609
const COMMIT = 57610
const ROLLBACK = 57611
const GLOBAL = 57612
const LOCAL = 57613
const SESSION = 57614
const NAMES = 57615
const ISOLATION = 57616
const LEVEL = 57617
const READ = 57618
const WRITE = 57619
const ONLY = 57620
const REPEATABLE = 57621
const COMMITTED = 57622
const UNCOMMITTED = 57623
const SERIALIZABLE = 57624
const RADON = 57625
const ATTACH = 57626
const ATTACHLIST = 57627
const DETACH = 57628
const RESHARD = 57629
const CLEANUP = 57630
const RECOVER = 57631
const REBALANCE = 57632
const LINES = 57633
const ENCLOSED = 57634
const TERMINATED = 57635
const ESCAPED = 57636
const OUTFILE = 57637

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"LOAD",
	"INFILE",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"HASH2",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"LINES",
	"ENCLOSED",
	"TERMINATED",
	"ESCAPED",
	"OUTFILE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:4965

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 36,
	-2, 4,
	-1, 232,
	98, 880,
	-2, 687,
	-1, 238,
	98, 739,
	-2, 665,
	-1, 485,
	126, 720,
	-2, 716,
	-1, 486,
	126, 721,
	-2, 717,
	-1, 520,
	123, 96,
	170, 96,
	173, 96,
	176, 96,
	-2, 108,
	-1, 571,
	1, 89,
	313, 89,
	-2, 96,
	-1, 694,
	5, 36,
	-2, 636,
	-1, 729,
	123, 96,
	170, 96,
	173, 96,
	176, 96,
	-2, 109,
	-1, 787,
	38, 316,
	71, 316,
	74, 316,
	137, 316,
	-2, 877,
	-1, 840,
	1, 90,
	313, 90,
	-2, 96,
	-1, 932,
	126, 723,
	-2, 719,
	-1, 1110,
	5, 37,
	-2, 515,
	-1, 1134,
	5, 37,
	-2, 637,
	-1, 1261,
	5, 36,
	-2, 639,
	-1, 1381,
	5, 37,
	-2, 640,
}

const yyNprod = 928
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 10494

var yyAct = [...]int{

	486, 986, 1286, 1384, 461, 1427, 1503, 1444, 1433, 1395,
	463, 1431, 596, 1375, 654, 3, 1293, 1361, 441, 1294,
	1349, 1321, 233, 1320, 697, 1333, 961, 1372, 1466, 707,
	1194, 962, 1037, 836, 926, 1014, 439, 869, 207, 111,
	1326, 822, 1103, 58, 1237, 1027, 923, 916, 1016, 68,
	893, 588, 698, 942, 958, 1095, 373, 372, 599, 237,
	990, 757, 743, 1052, 438, 841, 111, 206, 241, 505,
	375, 791, 236, 931, 428, 730, 488, 229, 437, 494,
	928, 832, 504, 1017, 228, 111, 589, 111, 571, 464,
	52, 226, 216, 385, 506, 57, 1257, 1397, 1480, 200,
	1396, 1501, 1445, 423, 424, 978, 221, 1143, 977, 111,
	508, 979, 1144, 1145, 716, 717, 507, 507, 508, 191,
	715, 726, 727, 1334, 422, 387, 1385, 388, 194, 196,
	195, 197, 198, 1465, 199, 25, 53, 27, 28, 370,
	1522, 1485, 52, 369, 189, 1435, 1520, 1451, 51, 412,
	212, 368, 925, 1514, 1484, 1250, 1316, 367, 390, 1399,
	621, 620, 630, 631, 623, 624, 625, 626, 627, 628,
	629, 622, 434, 47, 632, 1450, 880, 29, 394, 398,
	37, 83, 72, 859, 1030, 396, 397, 1467, 1350, 1031,
	1032, 73, 404, 866, 77, 389, 512, 38, 111, 1436,
	55, 188, 665, 1000, 999, 415, 417, 205, 1042, 426,
	1043, 1047, 815, 1353, 1219, 543, 858, 823, 1311, 1058,
	62, 111, 1309, 1073, 111, 1072, 1071, 491, 1196, 241,
	386, 377, 79, 236, 1019, 241, 241, 1070, 419, 513,
	513, 1419, 1421, 861, 1460, 601, 1196, 64, 65, 66,
	67, 1459, 857, 1225, 490, 1458, 380, 379, 31, 32,
	33, 499, 35, 1435, 502, 378, 993, 383, 382, 992,
	391, 785, 991, 108, 36, 48, 40, 86, 85, 49,
	50, 34, 81, 632, 416, 416, 644, 645, 1331, 431,
	489, 531, 881, 74, 1113, 1491, 1301, 1137, 1109, 854,
	852, 848, 52, 851, 853, 1107, 509, 971, 653, 766,
	609, 608, 823, 1420, 501, 544, 1400, 1436, 723, 816,
	557, 560, 561, 562, 563, 564, 565, 610, 566, 567,
	568, 569, 570, 545, 546, 547, 548, 529, 530, 558,
	1018, 532, 856, 600, 533, 534, 535, 536, 537, 538,
	539, 540, 541, 542, 549, 550, 551, 552, 553, 554,
	555, 556, 1040, 1041, 1114, 855, 725, 1044, 1045, 1468,
	784, 1449, 1068, 607, 989, 601, 1437, 573, 1203, 610,
	1292, 1441, 111, 111, 622, 54, 573, 632, 900, 987,
	1069, 111, 111, 75, 76, 399, 609, 608, 970, 111,
	871, 39, 898, 899, 897, 75, 76, 1290, 41, 608,
	511, 42, 43, 610, 45, 44, 1252, 943, 680, 681,
	574, 993, 578, 579, 992, 610, 850, 991, 1204, 46,
	559, 586, 516, 943, 492, 1120, 1435, 860, 1022, 591,
	623, 624, 625, 626, 627, 628, 629, 622, 612, 849,
	632, 1191, 1519, 1115, 496, 642, 592, 1291, 609, 608,
	1023, 1024, 1025, 609, 608, 1254, 55, 1238, 1026, 459,
	460, 1067, 1512, 600, 582, 610, 896, 580, 1508, 1281,
	610, 1190, 590, 1282, 625, 626, 627, 628, 629, 622,
	1436, 1240, 632, 400, 241, 870, 1498, 597, 686, 111,
	609, 608, 111, 611, 241, 700, 1386, 1242, 236, 1246,
	1189, 1241, 694, 1239, 613, 1285, 1284, 610, 1244, 609,
	608, 1168, 375, 1187, 1167, 641, 643, 1166, 1243, 682,
	1163, 1158, 886, 888, 889, 1157, 610, 699, 887, 696,
	1188, 1245, 1247, 1156, 1056, 597, 1088, 1089, 1090, 1055,
	1170, 652, 663, 1186, 655, 656, 657, 658, 659, 660,
	661, 704, 664, 666, 666, 666, 666, 666, 666, 666,
	666, 674, 675, 676, 677, 702, 824, 825, 826, 779,
	1169, 111, 111, 1048, 1038, 684, 1039, 695, 710, 413,
	111, 111, 721, 718, 917, 709, 918, 1493, 1482, 1481,
	111, 1475, 1356, 1327, 838, 781, 1283, 1272, 724, 1271,
	1171, 1164, 1160, 1159, 1150, 646, 647, 648, 649, 650,
	651, 863, 864, 865, 1080, 1079, 894, 1053, 1035, 605,
	1030, 873, 376, 842, 895, 1031, 1032, 1516, 427, 1288,
	878, 1509, 1499, 874, 1344, 1470, 1344, 1429, 427, 834,
	835, 1426, 241, 1424, 427, 1342, 922, 1348, 236, 453,
	452, 454, 455, 456, 457, 241, 1287, 1015, 458, 944,
	934, 1359, 427, 1344, 1388, 1341, 930, 667, 668, 669,
	670, 671, 672, 673, 1344, 1387, 1344, 427, 1340, 883,
	884, 1221, 890, 891, 1101, 427, 241, 700, 1218, 1165,
	967, 683, 1210, 1209, 963, 1206, 1207, 381, 1206, 1205,
	965, 241, 980, 932, 919, 236, 577, 960, 1136, 427,
	876, 427, 947, 920, 921, 375, 576, 968, 575, 699,
	521, 520, 1202, 52, 384, 959, 597, 969, 1129, 937,
	938, 940, 876, 969, 1132, 655, 1363, 1366, 1367, 1368,
	1364, 972, 1365, 1369, 1359, 950, 1455, 951, 988, 489,
	994, 995, 996, 997, 998, 1101, 1208, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1101, 981, 1172, 964, 975, 52, 714, 892, 509, 973,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 985, 877, 974, 25, 935,
	936, 712, 25, 939, 1077, 982, 983, 984, 1363, 1366,
	1367, 1368, 1364, 1076, 1365, 1369, 25, 946, 708, 948,
	949, 620, 630, 631, 623, 624, 625, 626, 627, 628,
	629, 622, 957, 59, 632, 111, 111, 111, 678, 818,
	819, 820, 821, 503, 692, 213, 55, 1390, 693, 817,
	1049, 1050, 1021, 1075, 933, 829, 830, 831, 1338, 1028,
	837, 1278, 1260, 55, 1273, 69, 945, 55, 1200, 833,
	828, 827, 1454, 959, 846, 1061, 1062, 1063, 845, 969,
	1412, 55, 1054, 844, 581, 1413, 1414, 23, 1367, 1368,
	690, 1101, 842, 1059, 1083, 1060, 1057, 1065, 894, 1502,
	1410, 1457, 78, 1456, 1409, 1411, 895, 1408, 217, 218,
	55, 1483, 1087, 882, 1463, 1082, 956, 955, 1473, 241,
	1298, 1155, 1154, 1105, 1051, 495, 1174, 1173, 630, 631,
	623, 624, 625, 626, 627, 628, 629, 622, 1091, 493,
	632, 429, 1081, 111, 517, 778, 1472, 1084, 211, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185,
	500, 1130, 1086, 843, 700, 1371, 236, 220, 583, 214,
	215, 495, 430, 375, 375, 375, 1258, 1198, 1034, 1033,
	1020, 1152, 1153, 1127, 1141, 1119, 1276, 1494, 70, 1479,
	1275, 1161, 1162, 425, 1478, 954, 699, 1277, 1477, 208,
	59, 1142, 1138, 953, 1193, 1131, 1513, 1500, 1447, 1446,
	1108, 1151, 1139, 1403, 1121, 519, 518, 209, 1402, 1358,
	462, 932, 82, 708, 1256, 585, 223, 1328, 1036, 1147,
	1148, 1149, 606, 1195, 61, 597, 63, 56, 1, 1128,
	366, 1140, 1197, 1383, 840, 839, 790, 789, 1476, 71,
	1211, 1212, 1464, 1432, 1471, 1434, 111, 1439, 1199, 109,
	1394, 1092, 1093, 1094, 375, 1391, 111, 1100, 1393, 729,
	728, 371, 1201, 780, 796, 795, 794, 792, 1046, 814,
	1289, 801, 800, 1117, 722, 754, 222, 753, 752, 751,
	750, 749, 748, 747, 746, 241, 1216, 745, 744, 1105,
	241, 742, 236, 741, 236, 222, 1223, 222, 740, 739,
	1224, 1220, 738, 737, 736, 735, 731, 734, 733, 1098,
	930, 1222, 1236, 1099, 732, 799, 1231, 241, 241, 222,
	797, 1263, 1264, 963, 1110, 1111, 1112, 1232, 1226, 1116,
	1261, 1213, 1214, 1215, 1122, 1235, 1123, 1124, 1125, 1126,
	1249, 1251, 1248, 793, 1259, 526, 524, 932, 525, 523,
	528, 527, 522, 1370, 1133, 1134, 1135, 1265, 1374, 1102,
	84, 1234, 1074, 187, 1066, 1269, 1270, 847, 879, 80,
	640, 1146, 952, 1029, 234, 976, 713, 711, 225, 224,
	966, 1253, 679, 487, 1401, 1357, 1118, 662, 941, 440,
	885, 451, 448, 450, 241, 241, 241, 449, 1295, 1295,
	1295, 685, 964, 691, 614, 1262, 111, 1195, 222, 1279,
	432, 1296, 1297, 1418, 1323, 1280, 621, 620, 630, 631,
	623, 624, 625, 626, 627, 628, 629, 622, 862, 92,
	632, 222, 91, 395, 222, 497, 1362, 111, 1360, 1322,
	1255, 584, 1315, 1398, 689, 798, 1299, 26, 60, 1228,
	1229, 963, 219, 14, 241, 1324, 1307, 1330, 1295, 241,
	21, 15, 13, 1295, 1319, 1318, 12, 1329, 30, 10,
	1336, 9, 8, 22, 1335, 1337, 7, 6, 5, 4,
	210, 24, 241, 2, 20, 19, 236, 18, 17, 1195,
	1230, 1339, 16, 11, 782, 783, 1274, 0, 0, 0,
	0, 0, 0, 0, 1236, 0, 111, 111, 0, 0,
	0, 0, 241, 700, 0, 1317, 1382, 0, 0, 241,
	1314, 0, 0, 1295, 1324, 241, 1325, 1352, 1379, 1295,
	964, 0, 52, 1380, 0, 1389, 1332, 1266, 1267, 1268,
	111, 111, 111, 111, 1392, 699, 0, 0, 0, 0,
	0, 111, 0, 0, 111, 0, 0, 111, 1324, 1324,
	1324, 1324, 1405, 1404, 1407, 1406, 0, 1415, 934, 1423,
	1422, 241, 1324, 0, 1428, 1295, 0, 0, 0, 0,
	1300, 0, 1440, 1443, 0, 1438, 1442, 1430, 0, 0,
	0, 0, 222, 222, 0, 1373, 1453, 0, 0, 0,
	0, 222, 587, 0, 0, 0, 0, 0, 1462, 222,
	0, 1461, 808, 807, 0, 1469, 0, 1474, 0, 0,
	0, 0, 804, 0, 0, 1302, 0, 1303, 0, 1325,
	1325, 1325, 1325, 0, 0, 0, 0, 0, 1312, 1313,
	0, 0, 0, 1373, 0, 810, 0, 1492, 0, 0,
	0, 0, 0, 0, 1496, 1497, 1495, 0, 809, 802,
	0, 0, 0, 1452, 597, 803, 0, 1354, 0, 241,
	241, 241, 0, 1504, 1504, 1504, 1505, 1506, 0, 1510,
	1511, 0, 1507, 1343, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 811, 0,
	0, 1521, 0, 0, 0, 1355, 0, 0, 0, 222,
	0, 701, 703, 0, 0, 1486, 1487, 0, 806, 0,
	1381, 0, 0, 0, 0, 0, 0, 0, 1488, 1489,
	1490, 0, 0, 0, 185, 0, 0, 0, 1304, 1305,
	0, 1306, 0, 0, 1308, 0, 1310, 0, 0, 621,
	620, 630, 631, 623, 624, 625, 626, 627, 628, 629,
	622, 416, 1417, 632, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 1425, 0, 186, 0, 190, 813, 192,
	193, 812, 201, 202, 203, 204, 0, 0, 1448, 1096,
	0, 222, 222, 0, 0, 1345, 0, 0, 0, 0,
	872, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 392, 393, 0, 0, 401, 402,
	403, 0, 405, 406, 407, 408, 409, 410, 411, 0,
	0, 0, 0, 0, 157, 0, 0, 0, 113, 0,
	0, 0, 137, 0, 0, 141, 144, 145, 0, 0,
	0, 0, 0, 929, 703, 0, 0, 929, 929, 0,
	0, 929, 0, 129, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 165, 150, 929, 929, 929, 929, 0,
	0, 1227, 0, 1515, 0, 1517, 1518, 0, 0, 0,
	929, 240, 0, 701, 0, 0, 0, 0, 0, 0,
	119, 621, 620, 630, 631, 623, 624, 625, 626, 627,
	628, 629, 622, 0, 0, 632, 414, 0, 0, 0,
	0, 418, 1097, 420, 421, 0, 621, 620, 630, 631,
	623, 624, 625, 626, 627, 628, 629, 622, 0, 0,
	632, 0, 621, 620, 630, 631, 623, 624, 625, 626,
	627, 628, 629, 622, 0, 176, 632, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 163, 0, 174,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	136, 0, 0, 172, 173, 124, 177, 0, 0, 116,
	0, 0, 156, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 143, 131, 138, 160, 148, 161, 139, 154,
	153, 155, 0, 0, 0, 166, 0, 0, 135, 130,
	170, 127, 151, 120, 114, 0, 121, 122, 126, 125,
	0, 142, 149, 152, 158, 159, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 222, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	117, 146, 0, 162, 133, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 167, 0,
	168, 0, 0, 0, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 181,
	180, 182, 118, 183, 184, 929, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 593, 594, 0,
	595, 929, 598, 0, 0, 0, 0, 602, 603, 604,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	701, 0, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 113, 0, 0,
	0, 137, 0, 0, 141, 144, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 924, 0, 436, 0,
	0, 0, 129, 435, 0, 0, 0, 0, 472, 147,
	0, 0, 165, 150, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	485, 453, 452, 454, 455, 456, 457, 0, 0, 119,
	458, 459, 460, 0, 0, 0, 433, 446, 0, 471,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 443,
	444, 927, 0, 0, 0, 483, 0, 445, 0, 0,
	442, 447, 0, 107, 0, 106, 0, 0, 0, 0,
	0, 0, 929, 0, 176, 0, 0, 481, 703, 929,
	0, 867, 868, 0, 123, 104, 163, 875, 174, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 136,
	0, 0, 172, 173, 124, 177, 0, 0, 116, 103,
	0, 156, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 143, 131, 138, 160, 148, 161, 139, 154, 153,
	155, 0, 0, 0, 166, 0, 0, 135, 130, 170,
	127, 151, 120, 114, 0, 121, 122, 126, 125, 0,
	142, 149, 152, 158, 159, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 96, 105, 0, 0, 0, 0, 0, 0, 169,
	0, 134, 473, 479, 482, 0, 480, 477, 478, 476,
	475, 474, 484, 467, 468, 470, 222, 469, 112, 117,
	146, 0, 162, 133, 175, 0, 0, 0, 768, 0,
	0, 102, 0, 0, 0, 0, 132, 167, 0, 168,
	0, 0, 0, 140, 0, 0, 778, 222, 0, 0,
	760, 0, 0, 0, 0, 0, 178, 179, 181, 180,
	182, 118, 183, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 755, 0, 0, 0, 0, 0, 0, 0,
	101, 89, 0, 100, 98, 0, 87, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 1377, 0, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	99, 93, 94, 97, 0, 0, 764, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 222, 222, 222, 0, 0, 0, 0, 0, 0,
	0, 1416, 1064, 0, 222, 0, 0, 1377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 758, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 759, 761, 762, 763,
	0, 765, 766, 767, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 0, 0, 0, 349, 333, 291, 352,
	267, 282, 364, 284, 285, 321, 250, 301, 157, 280,
	0, 0, 113, 0, 251, 0, 137, 0, 0, 141,
	144, 145, 0, 330, 0, 0, 0, 341, 350, 298,
	0, 270, 243, 277, 244, 268, 295, 129, 266, 335,
	304, 283, 0, 358, 147, 313, 0, 165, 150, 756,
	0, 297, 338, 299, 331, 290, 322, 259, 312, 353,
	281, 318, 0, 0, 0, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 315, 347, 279, 317, 320,
	242, 314, 0, 246, 252, 363, 345, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 296, 300, 327, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 0,
	311, 0, 0, 0, 254, 248, 294, 0, 0, 0,
	258, 0, 272, 328, 0, 0, 0, 339, 289, 176,
	346, 287, 286, 354, 324, 0, 336, 269, 278, 123,
	276, 163, 319, 174, 115, 343, 337, 309, 292, 293,
	247, 1217, 326, 128, 136, 265, 316, 172, 173, 124,
	177, 253, 360, 116, 239, 359, 156, 238, 171, 344,
	310, 306, 249, 342, 308, 305, 143, 131, 138, 160,
	148, 161, 139, 154, 153, 155, 0, 245, 0, 166,
	351, 365, 135, 130, 170, 127, 151, 120, 114, 256,
	121, 122, 126, 125, 0, 142, 149, 152, 158, 159,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 340, 0,
	0, 0, 0, 0, 169, 255, 134, 262, 260, 263,
	332, 261, 302, 303, 355, 356, 357, 329, 257, 0,
	0, 334, 307, 112, 117, 146, 362, 162, 133, 175,
	0, 0, 0, 0, 0, 275, 361, 325, 323, 348,
	0, 132, 167, 0, 168, 227, 0, 0, 232, 230,
	231, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 181, 180, 182, 118, 183, 184, 349,
	333, 291, 352, 267, 282, 364, 284, 285, 321, 250,
	301, 157, 280, 0, 0, 113, 0, 251, 0, 137,
	0, 0, 141, 144, 145, 0, 330, 0, 0, 0,
	341, 350, 298, 0, 270, 243, 277, 244, 268, 295,
	129, 266, 335, 304, 283, 0, 358, 147, 313, 0,
	165, 150, 0, 0, 297, 338, 299, 331, 290, 322,
	259, 312, 353, 281, 318, 0, 0, 0, 240, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 315, 347,
	279, 317, 320, 242, 314, 0, 246, 252, 363, 345,
	273, 274, 0, 0, 0, 0, 0, 0, 0, 296,
	300, 327, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 311, 0, 0, 0, 254, 248, 294,
	0, 0, 0, 258, 0, 272, 328, 0, 0, 0,
	339, 289, 176, 346, 287, 286, 354, 324, 0, 336,
	269, 278, 123, 276, 163, 319, 174, 115, 343, 337,
	309, 292, 293, 247, 0, 326, 128, 136, 265, 316,
	172, 173, 124, 177, 253, 360, 116, 239, 359, 156,
	238, 171, 344, 310, 306, 249, 342, 308, 305, 143,
	131, 138, 160, 148, 161, 139, 154, 153, 155, 0,
	245, 0, 166, 351, 365, 135, 130, 170, 127, 151,
	120, 114, 256, 121, 122, 126, 125, 0, 142, 149,
	152, 158, 159, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	264, 340, 0, 0, 0, 0, 0, 169, 255, 134,
	262, 260, 263, 332, 261, 302, 303, 355, 356, 357,
	329, 257, 0, 0, 334, 307, 112, 117, 146, 362,
	162, 133, 175, 0, 0, 0, 0, 0, 275, 361,
	325, 323, 348, 0, 132, 167, 0, 168, 0, 0,
	0, 232, 230, 231, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 181, 180, 182, 118,
	183, 184, 349, 333, 291, 352, 267, 282, 364, 284,
	285, 321, 250, 301, 157, 280, 0, 0, 113, 0,
	251, 0, 137, 0, 0, 141, 144, 145, 0, 330,
	0, 0, 0, 341, 350, 298, 0, 270, 243, 277,
	244, 268, 295, 129, 266, 335, 304, 283, 0, 358,
	147, 313, 0, 165, 150, 0, 0, 297, 338, 299,
	331, 290, 322, 259, 312, 353, 281, 318, 0, 0,
	0, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 315, 347, 279, 317, 320, 242, 314, 0, 246,
	252, 363, 345, 273, 274, 0, 0, 0, 0, 0,
	0, 0, 296, 300, 327, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 311, 0, 0, 0,
	254, 248, 294, 0, 0, 0, 258, 0, 272, 328,
	0, 0, 0, 339, 289, 176, 346, 287, 286, 354,
	324, 0, 336, 269, 278, 123, 276, 163, 319, 174,
	115, 343, 337, 309, 292, 293, 247, 0, 326, 128,
	136, 265, 316, 172, 173, 124, 177, 253, 360, 116,
	239, 359, 156, 238, 171, 344, 310, 306, 249, 342,
	308, 305, 143, 131, 138, 160, 148, 161, 139, 154,
	153, 155, 0, 245, 0, 166, 351, 365, 135, 130,
	170, 127, 151, 120, 114, 256, 121, 122, 126, 125,
	0, 142, 149, 152, 158, 159, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 340, 0, 0, 0, 0, 0,
	169, 255, 134, 262, 260, 263, 332, 261, 302, 303,
	355, 356, 357, 329, 257, 0, 0, 334, 307, 112,
	117, 146, 362, 162, 133, 175, 0, 0, 0, 0,
	0, 275, 361, 325, 323, 348, 0, 132, 167, 0,
	168, 510, 0, 0, 140, 0, 0, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 181,
	180, 182, 118, 183, 184, 349, 333, 291, 352, 267,
	282, 364, 284, 285, 321, 250, 301, 157, 280, 0,
	0, 113, 0, 251, 0, 137, 0, 0, 141, 144,
	145, 0, 330, 0, 0, 0, 341, 350, 298, 0,
	270, 243, 277, 244, 268, 295, 129, 266, 335, 304,
	283, 0, 358, 147, 313, 0, 165, 150, 0, 0,
	297, 338, 299, 331, 290, 322, 259, 312, 353, 281,
	318, 0, 0, 0, 240, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 315, 347, 279, 317, 320, 242,
	314, 0, 246, 252, 363, 345, 273, 274, 0, 0,
	0, 0, 0, 0, 0, 296, 300, 327, 288, 0,
	0, 0, 0, 0, 0, 1351, 0, 271, 0, 311,
	0, 0, 0, 254, 248, 294, 0, 0, 0, 258,
	0, 272, 328, 0, 0, 0, 339, 289, 176, 346,
	287, 286, 354, 324, 0, 336, 269, 278, 123, 276,
	163, 319, 174, 115, 343, 337, 309, 292, 293, 247,
	0, 326, 128, 136, 265, 316, 172, 173, 124, 177,
	253, 360, 116, 705, 359, 156, 706, 171, 344, 310,
	306, 249, 342, 308, 305, 143, 131, 138, 160, 148,
	161, 139, 154, 153, 155, 0, 245, 0, 166, 351,
	365, 135, 130, 170, 127, 151, 120, 114, 256, 121,
	122, 126, 125, 0, 142, 149, 152, 158, 159, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 340, 0, 0,
	0, 0, 0, 169, 255, 134, 262, 260, 263, 332,
	261, 302, 303, 355, 356, 357, 329, 257, 0, 0,
	334, 307, 112, 117, 146, 362, 162, 133, 175, 0,
	0, 0, 0, 0, 275, 361, 325, 323, 348, 0,
	132, 167, 0, 168, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 181, 180, 182, 118, 183, 184, 349, 333,
	291, 352, 267, 282, 364, 284, 285, 321, 250, 301,
	157, 280, 0, 0, 113, 0, 251, 0, 137, 0,
	0, 141, 144, 145, 0, 330, 0, 0, 0, 341,
	350, 298, 0, 270, 243, 277, 244, 268, 295, 129,
	266, 335, 304, 283, 0, 358, 147, 313, 0, 165,
	150, 0, 0, 297, 338, 299, 331, 290, 322, 259,
	312, 353, 281, 318, 0, 0, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 315, 347, 279,
	317, 320, 242, 314, 0, 246, 252, 363, 345, 273,
	274, 0, 0, 0, 0, 0, 0, 0, 296, 300,
	327, 288, 0, 0, 0, 0, 0, 0, 1233, 0,
	271, 0, 311, 0, 0, 0, 254, 248, 294, 0,
	0, 0, 258, 0, 272, 328, 0, 0, 0, 339,
	289, 176, 346, 287, 286, 354, 324, 0, 336, 269,
	278, 123, 276, 163, 319, 174, 115, 343, 337, 309,
	292, 293, 247, 0, 326, 128, 136, 265, 316, 172,
	173, 124, 177, 253, 360, 116, 705, 359, 156, 706,
	171, 344, 310, 306, 249, 342, 308, 305, 143, 131,
	138, 160, 148, 161, 139, 154, 153, 155, 0, 245,
	0, 166, 351, 365, 135, 130, 170, 127, 151, 120,
	114, 256, 121, 122, 126, 125, 0, 142, 149, 152,
	158, 159, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	340, 0, 0, 0, 0, 0, 169, 255, 134, 262,
	260, 263, 332, 261, 302, 303, 355, 356, 357, 329,
	257, 0, 0, 334, 307, 112, 117, 146, 362, 162,
	133, 175, 0, 0, 0, 0, 0, 275, 361, 325,
	323, 348, 0, 132, 167, 0, 168, 0, 0, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 181, 180, 182, 118, 183,
	184, 349, 333, 291, 352, 267, 282, 364, 284, 285,
	321, 250, 301, 157, 280, 0, 0, 113, 0, 251,
	0, 137, 0, 0, 141, 144, 145, 0, 330, 0,
	0, 0, 341, 350, 298, 0, 270, 243, 277, 244,
	268, 295, 129, 266, 335, 304, 283, 0, 358, 147,
	313, 0, 165, 150, 0, 0, 297, 338, 299, 331,
	290, 322, 259, 312, 353, 281, 318, 0, 0, 0,
	240, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	315, 347, 279, 317, 320, 242, 314, 0, 246, 252,
	363, 345, 273, 274, 0, 0, 0, 0, 0, 0,
	0, 296, 300, 327, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 311, 0, 0, 0, 254,
	248, 294, 0, 0, 0, 258, 0, 272, 328, 0,
	0, 0, 339, 289, 176, 346, 287, 286, 354, 324,
	0, 336, 269, 278, 123, 276, 163, 319, 174, 115,
	343, 337, 309, 292, 293, 247, 0, 326, 128, 136,
	265, 316, 172, 173, 124, 177, 253, 360, 116, 239,
	359, 156, 238, 171, 344, 310, 306, 249, 342, 308,
	305, 143, 131, 138, 160, 148, 161, 139, 154, 153,
	155, 0, 245, 0, 166, 351, 365, 135, 130, 170,
	127, 151, 120, 114, 256, 121, 122, 126, 125, 0,
	142, 149, 152, 158, 159, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 340, 0, 0, 0, 0, 0, 169,
	255, 134, 262, 260, 263, 332, 261, 302, 303, 355,
	356, 357, 329, 257, 0, 0, 334, 307, 112, 117,
	146, 362, 162, 133, 175, 0, 0, 0, 0, 0,
	275, 361, 325, 323, 348, 0, 132, 167, 0, 168,
	0, 0, 0, 140, 0, 0, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 181, 180,
	182, 118, 183, 184, 349, 333, 291, 352, 267, 282,
	364, 284, 285, 321, 250, 301, 157, 280, 0, 0,
	113, 0, 251, 0, 137, 0, 0, 141, 144, 145,
	0, 330, 0, 0, 0, 341, 350, 298, 0, 270,
	243, 277, 244, 268, 295, 129, 266, 335, 304, 283,
	0, 358, 147, 313, 0, 165, 150, 0, 0, 297,
	338, 299, 331, 290, 322, 259, 312, 353, 281, 318,
	0, 0, 0, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 315, 347, 279, 317, 320, 242, 314,
	0, 246, 252, 363, 345, 273, 274, 0, 0, 0,
	0, 0, 0, 0, 296, 300, 327, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 0, 311, 0,
	0, 0, 254, 248, 294, 0, 0, 0, 258, 0,
	272, 328, 0, 0, 0, 339, 289, 176, 346, 287,
	286, 354, 324, 0, 336, 269, 278, 123, 276, 163,
	319, 174, 115, 343, 337, 309, 292, 293, 247, 0,
	326, 128, 136, 265, 316, 172, 173, 124, 177, 253,
	360, 116, 705, 359, 156, 706, 171, 344, 310, 306,
	249, 342, 308, 305, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 245, 0, 166, 351, 365,
	135, 130, 170, 127, 151, 120, 114, 256, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 340, 0, 0, 0,
	0, 0, 169, 255, 134, 262, 260, 263, 332, 261,
	302, 303, 355, 356, 357, 329, 257, 0, 0, 334,
	307, 112, 117, 146, 362, 162, 133, 175, 0, 0,
	0, 0, 0, 275, 361, 325, 323, 348, 0, 132,
	167, 0, 168, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 349, 333, 291,
	352, 267, 282, 364, 284, 285, 321, 250, 301, 157,
	280, 0, 0, 113, 0, 251, 0, 137, 0, 0,
	141, 144, 145, 0, 330, 0, 0, 0, 341, 350,
	298, 0, 270, 243, 277, 244, 268, 295, 129, 266,
	335, 304, 283, 0, 358, 147, 313, 0, 165, 150,
	0, 0, 297, 338, 299, 331, 290, 322, 259, 312,
	353, 281, 318, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 315, 347, 279, 317,
	320, 242, 314, 0, 246, 252, 363, 345, 273, 274,
	0, 0, 0, 0, 0, 0, 0, 296, 300, 327,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 311, 0, 0, 0, 254, 248, 294, 0, 0,
	0, 258, 0, 272, 328, 0, 0, 0, 339, 289,
	176, 346, 287, 286, 354, 324, 0, 336, 269, 278,
	123, 276, 163, 319, 174, 115, 343, 337, 309, 292,
	293, 247, 0, 326, 128, 136, 265, 316, 172, 173,
	124, 177, 253, 360, 116, 705, 359, 156, 706, 171,
	344, 310, 306, 249, 342, 308, 305, 143, 131, 138,
	160, 148, 161, 139, 154, 153, 155, 0, 245, 0,
	166, 351, 365, 135, 130, 170, 127, 151, 120, 114,
	256, 121, 122, 126, 125, 0, 142, 149, 152, 158,
	159, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 340,
	0, 0, 0, 0, 0, 169, 255, 134, 262, 260,
	263, 332, 261, 302, 303, 355, 356, 357, 329, 257,
	0, 0, 334, 307, 112, 117, 146, 362, 162, 133,
	175, 0, 0, 0, 0, 0, 275, 361, 325, 323,
	348, 0, 132, 167, 0, 168, 0, 0, 0, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 181, 180, 182, 118, 183, 184,
	349, 333, 291, 352, 267, 282, 364, 284, 285, 321,
	250, 301, 157, 280, 0, 0, 113, 0, 251, 0,
	137, 0, 0, 141, 144, 145, 0, 330, 0, 0,
	0, 341, 350, 298, 0, 270, 243, 277, 244, 268,
	295, 129, 266, 335, 304, 283, 0, 358, 147, 313,
	0, 165, 150, 0, 0, 297, 338, 299, 331, 290,
	322, 259, 312, 353, 281, 318, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 315,
	347, 279, 317, 320, 242, 314, 0, 246, 252, 363,
	345, 273, 274, 0, 0, 0, 0, 0, 0, 0,
	296, 300, 327, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 311, 0, 0, 0, 254, 248,
	294, 0, 0, 0, 258, 0, 272, 328, 0, 0,
	0, 339, 289, 176, 346, 287, 286, 354, 324, 0,
	336, 269, 278, 123, 276, 163, 319, 174, 115, 343,
	337, 309, 292, 293, 247, 0, 326, 128, 136, 265,
	316, 172, 173, 124, 177, 253, 360, 116, 705, 359,
	156, 706, 171, 344, 310, 306, 249, 342, 308, 305,
	143, 131, 138, 160, 148, 161, 139, 154, 153, 155,
	0, 245, 0, 166, 351, 365, 135, 130, 170, 127,
	151, 120, 114, 256, 121, 122, 126, 125, 0, 142,
	149, 152, 158, 159, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 340, 0, 0, 0, 0, 0, 169, 255,
	134, 262, 260, 263, 332, 261, 302, 303, 355, 356,
	357, 329, 257, 0, 0, 334, 307, 112, 117, 146,
	362, 162, 133, 175, 0, 0, 0, 0, 0, 275,
	361, 325, 323, 348, 0, 132, 167, 0, 168, 157,
	0, 0, 140, 113, 0, 0, 0, 137, 0, 0,
	141, 144, 145, 0, 0, 178, 179, 181, 180, 182,
	118, 183, 184, 0, 436, 0, 0, 0, 129, 435,
	0, 0, 0, 0, 472, 147, 0, 0, 165, 150,
	0, 0, 0, 0, 465, 466, 0, 0, 0, 0,
	0, 0, 719, 55, 0, 0, 485, 453, 452, 454,
	455, 456, 457, 0, 0, 119, 458, 459, 460, 720,
	0, 0, 433, 446, 0, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 443, 444, 0, 0, 0,
	0, 483, 0, 445, 0, 0, 442, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 481, 0, 0, 0, 0, 0, 0,
	123, 0, 163, 0, 174, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 136, 0, 0, 172, 173,
	124, 177, 0, 0, 116, 0, 0, 156, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 143, 131, 138,
	160, 148, 161, 139, 154, 153, 155, 0, 0, 0,
	166, 0, 0, 135, 130, 170, 127, 151, 120, 114,
	0, 121, 122, 126, 125, 0, 142, 149, 152, 158,
	159, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 134, 473, 479,
	482, 0, 480, 477, 478, 476, 475, 474, 484, 467,
	468, 470, 0, 469, 112, 117, 146, 0, 162, 133,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 167, 0, 168, 157, 0, 0, 140,
	113, 0, 0, 0, 137, 0, 0, 141, 144, 145,
	0, 0, 178, 179, 181, 180, 182, 118, 183, 184,
	0, 436, 0, 0, 0, 129, 435, 0, 0, 0,
	0, 472, 147, 0, 0, 165, 150, 0, 0, 0,
	0, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 485, 453, 452, 454, 455, 456, 457,
	0, 0, 119, 458, 459, 460, 0, 0, 0, 433,
	446, 0, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 444, 927, 0, 0, 0, 483, 0,
	445, 0, 0, 442, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	481, 0, 0, 0, 0, 0, 0, 123, 0, 163,
	0, 174, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 136, 0, 0, 172, 173, 124, 177, 0,
	0, 116, 0, 0, 156, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 0, 0, 166, 0, 0,
	135, 130, 170, 127, 151, 120, 114, 0, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 134, 473, 479, 482, 0, 480,
	477, 478, 476, 475, 474, 484, 467, 468, 470, 0,
	469, 112, 117, 146, 0, 162, 133, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	167, 0, 168, 157, 0, 0, 140, 113, 0, 0,
	0, 137, 0, 0, 141, 144, 145, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 0, 436, 0,
	0, 0, 129, 435, 0, 0, 0, 0, 472, 147,
	0, 0, 165, 150, 0, 0, 0, 0, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 427,
	485, 453, 452, 454, 455, 456, 457, 0, 0, 119,
	458, 459, 460, 0, 0, 0, 433, 446, 0, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 443,
	444, 0, 0, 0, 0, 483, 0, 445, 0, 0,
	442, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 481, 0, 0,
	0, 0, 0, 0, 123, 0, 163, 0, 174, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 136,
	0, 0, 172, 173, 124, 177, 0, 0, 116, 0,
	0, 156, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 143, 131, 138, 160, 148, 161, 139, 154, 153,
	155, 0, 0, 0, 166, 0, 0, 135, 130, 170,
	127, 151, 120, 114, 0, 121, 122, 126, 125, 0,
	142, 149, 152, 158, 159, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 134, 473, 479, 482, 0, 480, 477, 478, 476,
	475, 474, 484, 467, 468, 470, 0, 469, 112, 117,
	146, 0, 162, 133, 175, 0, 0, 0, 0, 25,
	0, 0, 0, 0, 0, 0, 132, 167, 0, 168,
	157, 0, 0, 140, 113, 0, 0, 0, 137, 0,
	0, 141, 144, 145, 0, 0, 178, 179, 181, 180,
	182, 118, 183, 184, 0, 436, 0, 0, 0, 129,
	435, 0, 0, 0, 0, 472, 147, 0, 0, 165,
	150, 0, 0, 0, 0, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 485, 453, 452,
	454, 455, 456, 457, 0, 0, 119, 458, 459, 460,
	0, 0, 0, 433, 446, 0, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 443, 444, 0, 0,
	0, 0, 483, 0, 445, 0, 0, 442, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 481, 0, 0, 0, 0, 0,
	0, 123, 0, 163, 0, 174, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 136, 0, 0, 172,
	173, 124, 177, 0, 0, 116, 0, 0, 156, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 143, 131,
	138, 160, 148, 161, 139, 154, 153, 155, 0, 0,
	0, 166, 0, 0, 135, 130, 170, 127, 151, 120,
	114, 0, 121, 122, 126, 125, 0, 142, 149, 152,
	158, 159, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 134, 473,
	479, 482, 0, 480, 477, 478, 476, 475, 474, 484,
	467, 468, 470, 0, 469, 112, 117, 146, 0, 162,
	133, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 167, 0, 168, 157, 0, 0,
	140, 113, 0, 0, 0, 137, 0, 0, 141, 144,
	145, 0, 0, 178, 179, 181, 180, 182, 118, 183,
	184, 0, 436, 0, 0, 0, 129, 435, 0, 0,
	0, 0, 472, 147, 0, 0, 165, 150, 0, 0,
	0, 0, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 485, 453, 452, 454, 455, 456,
	457, 0, 0, 119, 458, 459, 460, 0, 0, 0,
	433, 446, 0, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 444, 0, 0, 0, 0, 483,
	0, 445, 0, 0, 442, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 481, 0, 0, 0, 0, 0, 0, 123, 0,
	163, 0, 174, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 136, 0, 0, 172, 173, 124, 177,
	0, 0, 116, 0, 0, 156, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 143, 131, 138, 160, 148,
	161, 139, 154, 153, 155, 0, 0, 0, 166, 0,
	0, 135, 130, 170, 127, 151, 120, 114, 0, 121,
	122, 126, 125, 0, 142, 149, 152, 158, 159, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 0, 134, 473, 479, 482, 0,
	480, 477, 478, 476, 475, 474, 484, 467, 468, 470,
	0, 469, 112, 117, 146, 0, 162, 133, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 167, 157, 168, 0, 0, 113, 140, 0, 0,
	137, 0, 0, 141, 144, 145, 0, 0, 0, 0,
	178, 179, 181, 180, 182, 118, 183, 184, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 472, 147, 0,
	0, 165, 150, 0, 0, 0, 0, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 485,
	453, 452, 454, 455, 456, 457, 0, 0, 119, 458,
	459, 460, 0, 0, 0, 0, 446, 0, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 443, 444,
	0, 0, 0, 0, 483, 0, 445, 0, 0, 442,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 481, 0, 0, 0,
	0, 0, 0, 123, 0, 163, 0, 174, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 136, 0,
	0, 172, 173, 124, 177, 0, 0, 116, 0, 0,
	156, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	143, 131, 138, 160, 148, 161, 139, 154, 153, 155,
	0, 0, 0, 166, 0, 0, 135, 130, 170, 127,
	151, 120, 114, 0, 121, 122, 126, 125, 0, 142,
	149, 152, 158, 159, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	134, 473, 479, 482, 0, 480, 477, 478, 476, 475,
	474, 484, 467, 468, 470, 0, 469, 112, 117, 146,
	0, 162, 133, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 167, 0, 168, 157,
	0, 0, 140, 113, 0, 0, 0, 137, 0, 0,
	141, 144, 145, 0, 0, 178, 179, 181, 180, 182,
	118, 183, 184, 1104, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 165, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 240, 0, 1106, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	609, 608, 0, 0, 0, 0, 0, 0, 0, 0,
	616, 0, 619, 0, 0, 0, 0, 610, 633, 634,
	635, 636, 637, 638, 639, 0, 617, 618, 615, 621,
	620, 630, 631, 623, 624, 625, 626, 627, 628, 629,
	622, 0, 0, 632, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 163, 0, 174, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 136, 0, 0, 172, 173,
	124, 177, 0, 0, 116, 0, 0, 156, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 143, 131, 138,
	160, 148, 161, 139, 154, 153, 155, 0, 0, 0,
	166, 0, 0, 135, 130, 170, 127, 151, 120, 114,
	0, 121, 122, 126, 125, 0, 142, 149, 152, 158,
	159, 164, 157, 0, 0, 0, 113, 0, 0, 788,
	787, 0, 0, 141, 144, 145, 0, 0, 0, 786,
	0, 0, 0, 785, 0, 169, 0, 134, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 165, 150, 0, 112, 117, 146, 0, 162, 133,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 374,
	0, 0, 132, 167, 0, 168, 0, 0, 119, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 181, 180, 182, 118, 183, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 784, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 163, 0, 174, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 136, 0,
	0, 172, 173, 124, 177, 0, 0, 116, 0, 0,
	156, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	143, 131, 138, 160, 148, 161, 139, 154, 153, 155,
	0, 0, 0, 166, 0, 0, 135, 130, 170, 127,
	151, 120, 114, 0, 121, 122, 126, 125, 0, 142,
	149, 152, 158, 159, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 117, 146,
	0, 162, 133, 175, 0, 0, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 167, 157, 168, 0,
	0, 113, 140, 0, 0, 137, 0, 0, 141, 144,
	145, 0, 0, 0, 0, 178, 179, 181, 180, 182,
	118, 183, 184, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 165, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	163, 0, 174, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 136, 0, 0, 172, 173, 124, 177,
	0, 0, 116, 0, 0, 156, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 143, 131, 138, 160, 148,
	161, 139, 154, 153, 155, 0, 0, 0, 166, 0,
	0, 135, 130, 170, 127, 151, 120, 114, 0, 121,
	122, 126, 125, 0, 142, 149, 152, 158, 159, 164,
	157, 0, 0, 0, 113, 0, 0, 0, 137, 0,
	0, 141, 144, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 1376, 134, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 165,
	150, 0, 112, 117, 146, 0, 162, 133, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 1378,
	132, 167, 0, 168, 0, 0, 119, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 181, 180, 182, 118, 183, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 163, 0, 174, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 136, 0, 0, 172,
	173, 124, 177, 0, 0, 116, 0, 0, 156, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 143, 131,
	138, 160, 148, 161, 139, 154, 153, 155, 0, 0,
	0, 166, 0, 0, 135, 130, 170, 127, 151, 120,
	114, 0, 121, 122, 126, 125, 0, 142, 149, 152,
	158, 159, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 117, 146, 0, 162,
	133, 175, 0, 0, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 167, 157, 168, 0, 0, 113,
	140, 0, 0, 137, 0, 0, 141, 144, 145, 0,
	0, 0, 0, 178, 179, 181, 180, 182, 118, 183,
	184, 0, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 165, 150, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 240, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 163, 0,
	174, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 136, 0, 0, 172, 173, 124, 177, 0, 0,
	116, 0, 0, 156, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 143, 131, 138, 160, 148, 161, 139,
	154, 153, 155, 0, 0, 0, 166, 0, 0, 135,
	130, 170, 127, 151, 120, 114, 0, 121, 122, 126,
	125, 0, 142, 149, 152, 158, 159, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 117, 146, 0, 162, 133, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 167,
	157, 168, 0, 0, 113, 140, 0, 0, 137, 0,
	0, 141, 144, 145, 0, 0, 0, 0, 178, 179,
	181, 180, 182, 118, 183, 184, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 165,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 240, 0, 0,
	687, 0, 0, 688, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 163, 0, 174, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 136, 0, 0, 172,
	173, 124, 177, 0, 0, 116, 0, 0, 156, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 143, 131,
	138, 160, 148, 161, 139, 154, 153, 155, 0, 0,
	0, 166, 0, 0, 135, 130, 170, 127, 151, 120,
	114, 0, 121, 122, 126, 125, 0, 142, 149, 152,
	158, 159, 164, 157, 0, 0, 0, 113, 0, 0,
	0, 137, 0, 0, 141, 144, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 134, 0,
	0, 0, 129, 515, 0, 0, 0, 0, 0, 147,
	0, 0, 165, 150, 0, 112, 117, 146, 0, 162,
	133, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 0, 514, 132, 167, 0, 168, 0, 0, 119,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 181, 180, 182, 118, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 163, 0, 174, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 136,
	0, 0, 172, 173, 124, 177, 0, 0, 116, 0,
	0, 156, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 143, 131, 138, 160, 148, 161, 139, 154, 153,
	155, 0, 0, 0, 166, 0, 0, 135, 130, 170,
	127, 151, 120, 114, 0, 121, 122, 126, 125, 0,
	142, 149, 152, 158, 159, 164, 157, 0, 0, 0,
	113, 0, 0, 0, 137, 0, 0, 141, 144, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 134, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 165, 150, 0, 112, 117,
	146, 0, 162, 133, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 1378, 132, 167, 0, 168,
	0, 0, 119, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 181, 180,
	182, 118, 183, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 163,
	0, 174, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 136, 0, 0, 172, 173, 124, 177, 0,
	0, 116, 0, 0, 156, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 143, 131, 138, 160, 148, 161,
	139, 154, 153, 155, 0, 0, 0, 166, 0, 0,
	135, 130, 170, 127, 151, 120, 114, 0, 121, 122,
	126, 125, 0, 142, 149, 152, 158, 159, 164, 157,
	0, 0, 0, 113, 0, 0, 0, 137, 0, 0,
	141, 144, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 134, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 165, 150,
	0, 112, 117, 146, 0, 162, 133, 175, 0, 0,
	0, 0, 0, 55, 0, 0, 110, 0, 0, 132,
	167, 0, 168, 0, 0, 119, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 181, 180, 182, 118, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 163, 0, 174, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 136, 0, 0, 172, 173,
	124, 177, 0, 0, 116, 0, 0, 156, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 143, 131, 138,
	160, 148, 161, 139, 154, 153, 155, 0, 0, 0,
	166, 0, 0, 135, 130, 170, 127, 151, 120, 114,
	0, 121, 122, 126, 125, 0, 142, 149, 152, 158,
	159, 164, 157, 0, 0, 0, 113, 0, 0, 0,
	137, 0, 0, 141, 144, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 134, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 165, 150, 0, 112, 117, 146, 0, 162, 133,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 240,
	0, 1106, 132, 167, 0, 168, 0, 0, 119, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 181, 180, 182, 118, 183, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 163, 0, 174, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 136, 0,
	0, 172, 173, 124, 177, 0, 0, 116, 0, 0,
	156, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	143, 131, 138, 160, 148, 161, 139, 154, 153, 155,
	0, 0, 0, 166, 0, 0, 135, 130, 170, 127,
	151, 120, 114, 0, 121, 122, 126, 125, 0, 142,
	149, 152, 158, 159, 164, 157, 0, 0, 0, 113,
	0, 0, 0, 137, 0, 0, 141, 144, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 169, 0,
	134, 0, 0, 498, 129, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 165, 150, 0, 112, 117, 146,
	0, 162, 133, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 132, 167, 0, 168, 0,
	0, 119, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 181, 180, 182,
	118, 183, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 163, 0,
	174, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 136, 0, 0, 172, 173, 124, 177, 0, 0,
	116, 0, 0, 156, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 143, 131, 138, 160, 148, 161, 139,
	154, 153, 155, 0, 0, 0, 166, 0, 0, 135,
	130, 170, 127, 151, 120, 114, 0, 121, 122, 126,
	125, 0, 142, 149, 152, 158, 159, 164, 157, 0,
	0, 0, 113, 0, 0, 0, 137, 0, 0, 141,
	144, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 134, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 165, 150, 0,
	112, 117, 146, 0, 162, 133, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 240, 0, 0, 132, 167,
	0, 168, 0, 0, 119, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	181, 180, 182, 118, 183, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 163, 0, 174, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 136, 0, 0, 172, 173, 124,
	177, 0, 0, 116, 0, 0, 156, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 143, 131, 138, 160,
	148, 161, 139, 154, 153, 155, 0, 0, 0, 166,
	0, 0, 135, 130, 170, 127, 151, 120, 114, 0,
	121, 122, 126, 125, 0, 142, 149, 152, 158, 159,
	164, 157, 0, 0, 0, 113, 0, 0, 0, 137,
	0, 0, 141, 144, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 134, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	165, 150, 0, 112, 117, 146, 0, 162, 133, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 132, 167, 0, 168, 0, 0, 119, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 181, 180, 182, 118, 183, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 163, 0, 174, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 136, 0, 0,
	172, 173, 124, 177, 0, 0, 116, 0, 0, 156,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 143,
	131, 138, 160, 148, 161, 139, 154, 153, 155, 0,
	0, 0, 166, 0, 0, 135, 130, 170, 127, 151,
	120, 114, 0, 121, 122, 126, 125, 0, 142, 149,
	152, 158, 159, 164, 157, 0, 0, 0, 113, 0,
	0, 0, 137, 0, 0, 141, 144, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 134,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 165, 150, 0, 112, 117, 146, 0,
	162, 133, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 485, 0, 0, 132, 167, 0, 168, 0, 0,
	119, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 181, 180, 182, 118,
	183, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 163, 0, 174,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	136, 0, 0, 172, 173, 124, 177, 0, 0, 116,
	0, 0, 156, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 143, 131, 138, 160, 148, 161, 139, 154,
	153, 155, 0, 0, 0, 166, 0, 0, 135, 130,
	170, 127, 151, 120, 114, 0, 121, 122, 126, 125,
	0, 142, 149, 152, 158, 159, 164, 157, 0, 0,
	0, 113, 0, 0, 0, 137, 0, 0, 141, 144,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 134, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 165, 150, 0, 112,
	117, 146, 0, 162, 133, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 374, 0, 0, 132, 167, 0,
	168, 0, 0, 119, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 181,
	180, 182, 118, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	163, 0, 174, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 136, 0, 0, 172, 173, 124, 177,
	0, 0, 116, 0, 0, 156, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 143, 131, 138, 160, 148,
	161, 139, 154, 153, 155, 0, 0, 0, 166, 0,
	0, 135, 130, 170, 127, 151, 120, 114, 0, 121,
	122, 126, 125, 0, 142, 149, 152, 158, 159, 164,
	157, 0, 0, 0, 113, 0, 0, 0, 137, 0,
	0, 141, 144, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 169, 0, 134, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 165,
	150, 0, 112, 117, 146, 0, 162, 133, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 1192, 0, 0,
	132, 167, 0, 168, 0, 0, 119, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 181, 180, 182, 118, 183, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 163, 0, 174, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 136, 0, 0, 172,
	173, 124, 177, 0, 0, 116, 0, 0, 156, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 143, 131,
	138, 160, 148, 161, 139, 154, 153, 155, 0, 0,
	0, 166, 0, 0, 135, 130, 170, 127, 151, 120,
	114, 0, 121, 122, 126, 125, 0, 142, 149, 152,
	158, 159, 164, 157, 0, 0, 0, 113, 0, 0,
	0, 137, 0, 0, 141, 144, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 134, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 165, 150, 0, 112, 117, 146, 0, 162,
	133, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	572, 0, 0, 132, 167, 0, 168, 0, 0, 119,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 181, 180, 182, 118, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 163, 0, 174, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 136,
	0, 0, 172, 173, 124, 177, 0, 0, 116, 0,
	0, 156, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 143, 131, 138, 160, 148, 161, 139, 154, 153,
	155, 0, 0, 0, 166, 0, 0, 135, 130, 170,
	127, 151, 120, 114, 0, 121, 122, 126, 125, 0,
	142, 149, 152, 158, 159, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 117,
	146, 0, 162, 133, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 167, 0, 168,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 181, 180,
	182, 118, 183, 184,
}
var yyPact = [...]int{

	129, -1000, -218, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 996, 1039, -1000, -1000, -1000, -1000, -1000,
	804, 157, 92, 145, 142, 141, 2095, 137, 9374, -1000,
	-1000, -65, -1000, -165, -1000, -1000, -173, -1000, -1000, -1000,
	-1000, -3, 802, -1000, -1000, -1000, -1000, -1000, 993, 1012,
	849, 940, 860, -1000, 92, 9374, 1026, 2461, -130, 9780,
	90, 128, 120, 119, 90, -1000, -1000, -1000, 132, -1000,
	131, 660, 89, -1000, 9374, -1000, 9374, -45, 22, -1000,
	-1000, -59, 385, -1000, -1000, -1000, -51, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9374, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 512, -1000, -1000,
	-1000, -1000, -1000, -1000, 785, 785, -1000, 9374, -1000, -1000,
	-182, -1000, -1000, -1000, -1000, 983, 575, 933, 6220, 6220,
	996, -1000, 802, -1000, -1000, -1000, 895, -1000, -1000, 372,
	8968, 922, 188, 9374, 781, -1000, -1000, -175, 3067, -1000,
	-1000, -1000, -1000, 312, 8156, 8156, -1000, -1000, -1000, 906,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1011,
	1010, 658, -1000, 167, -1000, -1000, 10186, 330, 654, 652,
	642, 9374, 9374, 89, 824, 10186, 936, -1000, -1000, 1025,
	9374, 9374, -1000, -1000, 385, 385, -1000, -1000, 9374, -1000,
	-1000, -1000, -1000, -1000, 385, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6220, -1000, -1000, 204,
	-1000, -1000, -1000, -1000, -1000, 553, -1000, -1000, -1000, 1034,
	265, 431, -1000, 6220, 6760, 785, 785, -1000, -1000, 159,
	-1000, -1000, 6485, 6485, 6485, 6485, 6485, 6485, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 785, 182, -1000, 5953, 785, 785, 785, 785, 785,
	785, 6220, 785, 785, 785, 785, 785, 785, 785, 785,
	785, 785, 785, 785, 785, -1000, -1000, 776, -1000, 375,
	993, 575, 860, 7953, 839, -1000, -1000, 806, 9374, -1000,
	9577, 4885, 1022, 2764, -1000, 739, 714, -172, -180, -1000,
	-175, 5152, -1000, -1000, -1000, -1000, 195, -1000, 785, 95,
	2239, 6955, 1395, 13, -1000, -1000, -1000, 788, -1000, 788,
	788, 788, 788, 44, 44, 44, 44, -1000, -1000, -1000,
	-1000, -1000, 810, 809, -1000, 788, 788, 788, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 808, 808, 808, 799,
	799, 908, -1000, -1000, 931, 823, 818, 814, -1000, 169,
	9374, 9374, -1000, -1000, 993, -49, -1000, -1000, 389, 9374,
	9374, 385, -1000, -1000, -1000, -1000, 648, 308, -1000, 9374,
	-1000, -1000, -1000, -1000, -1000, 36, -1000, 867, 6220, 6220,
	448, 6220, 6220, 274, 6485, 395, 296, 6485, 6485, 6485,
	6485, 6485, 6485, 6485, 6485, 6485, 6485, 6485, 6485, 6485,
	6485, 6485, 520, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 640, -1000, 802, 584, 584, 160, 160, 160, 160,
	160, 1647, 1996, 4582, 575, 5953, 5419, 5419, 6220, 6220,
	5419, 941, 323, 308, 9171, -1000, 575, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5419, 5419, 5419, 5419, 6220, -1000,
	-1000, -1000, 933, -1000, 941, 995, -1000, 875, 874, 5419,
	-1000, 813, 9577, 785, -1000, 7688, -1000, 817, -1000, 300,
	-1000, 181, -1000, -1000, -1000, -1000, -1000, 996, 6220, -1000,
	3976, -1000, -183, -1000, -174, -188, -1000, -1000, -1000, -1000,
	-1000, 308, -1000, 638, 9780, 785, 785, 785, -1000, 2239,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 291, 291, 251, 291, 291,
	291, 291, 291, -7, -8, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, -1000, -1000,
	-1000, 593, 233, 197, -1000, -1000, -1000, -1000, 955, -1000,
	1395, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 354, 384, -1000, 951, -1000, 950, 552,
	1030, 510, 161, 163, 11, -1000, -1000, 506, 44, 44,
	-1000, -1000, -1000, 886, -1000, -1000, -1000, 551, 551, -1000,
	-1000, -1000, -1000, 472, -1000, -1000, -1000, 467, -1000, -1000,
	908, -1000, 96, -1000, 9374, 9374, 9374, -1000, 334, 292,
	98, 82, 81, 79, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 791, -1000, -1000, -1000, 549, -1000, -1000, -1000,
	548, 6220, -1000, 385, 1022, -1000, 6220, -1000, -1000, 927,
	-1000, -1000, 865, 274, 320, -1000, -1000, 462, -1000, -1000,
	308, 308, 1127, -1000, -1000, -1000, -1000, 395, 6485, 6485,
	6485, 1460, 1127, 1663, 827, 721, 160, 369, 369, 264,
	264, 264, 264, 264, 327, 327, -1000, -1000, -1000, 575,
	-1000, -1000, -1000, 575, 5419, 708, -1000, -1000, 6752, 179,
	785, 172, -1000, -1000, 575, 622, 622, 222, 412, 622,
	5419, 339, -1000, 6220, 575, -1000, 622, 575, 622, 622,
	-1000, -1000, 9374, -1000, -1000, -1000, -1000, 693, -1000, 925,
	665, 672, -1000, -1000, 5686, 575, 646, 171, 996, 9577,
	6220, 4582, 993, 308, -1000, -1000, -1000, -186, -185, -1000,
	-1000, 575, 9780, 9780, 9780, -1000, 538, -1000, 510, 291,
	291, -1000, 884, 883, 466, 458, 454, 537, 536, 291,
	291, 453, 535, 625, 450, 447, 444, 503, 534, 735,
	476, 463, 404, 9983, 86, -1000, 593, -1000, 949, 233,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 807,
	-1000, -1000, -1000, -1000, -1000, -1000, -62, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 659, -1000,
	-1000, 304, 636, -1000, 633, 694, 630, -1000, 291, 291,
	-1000, 785, 785, 785, -1000, 9374, -1000, -1000, -1000, 624,
	41, 804, 617, 9780, -1000, 9374, -1000, -1000, -1000, -1000,
	-1000, 308, 389, -1000, 308, -1000, 117, -1000, -1000, -1000,
	-1000, -1000, 1460, 1127, 1622, -1000, 6485, 6485, -1000, -1000,
	622, 5419, -1000, -1000, 8765, -1000, -1000, 3673, 5419, 4279,
	-1000, -1000, -1000, 343, 520, 343, -107, 829, 319, -1000,
	6220, 370, -1000, -1000, -1000, -1000, -1000, -1000, 1024, -216,
	948, -1000, 785, -1000, -1000, 820, 9171, 9171, 993, -1000,
	308, -1000, -1000, -1000, -1000, -1000, -1000, 575, 575, 575,
	-1000, -1000, 510, 510, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 533, 531, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 803, -1000, 974, 800, 86, 593,
	406, -1000, -1000, -1000, -1000, -1000, 530, -1000, 439, -1000,
	438, 592, 333, 9171, 9171, 9171, -1000, -1000, -1000, 882,
	-1000, -1000, -1000, -1000, -1000, 9374, -1000, 6485, 1127, 1127,
	-1000, -1000, -1000, -1000, 170, 575, -1000, 575, 788, 788,
	-1000, 788, 799, -1000, 788, 64, 788, 60, 575, 575,
	785, -104, -1000, 308, 6220, 1022, 8562, 527, 1029, -1000,
	785, -1000, 802, 162, -1000, -1000, 785, -147, -147, -1000,
	-1000, -1000, -1000, 9171, -1000, -1000, -1000, -1000, 9171, 797,
	86, -1000, 615, -1000, 602, 582, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 614, -1000, 788, 614, 614, 583, -57,
	1127, 3370, -1000, -1000, -1000, 139, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6485, 575, 526, 308, 1017, 682,
	758, -1000, -1000, -1000, 934, 7220, 7423, -57, 9577, 672,
	575, 9171, -143, -1000, 429, -1000, 612, 601, 9171, 786,
	-1000, -1000, -1000, -1000, 9171, -1000, -1000, -1000, -1000, -210,
	-214, -1000, -1000, -1000, 51, -1000, -1000, 1015, 1008, 8562,
	8562, 8562, 8562, -1000, 857, 854, -1000, 850, 830, 836,
	9374, -1000, 599, 7220, 173, -1000, 8359, -1000, -1000, -210,
	671, -1000, -1000, 581, -1000, 577, -1000, -1000, -1000, 574,
	9171, 234, -1000, 116, 407, -206, 1004, 1003, 575, 108,
	-119, -1000, 6220, 6220, 758, 812, 686, -1000, -1000, -1000,
	-1000, 853, -1000, 851, -1000, -1000, -1000, -1000, -1000, 118,
	114, 107, -1000, -206, -143, -1000, 872, 104, 104, -1000,
	572, 907, -1000, -1000, -1000, 291, 525, 982, 907, -1000,
	-1000, 968, 907, -1000, -1000, -212, 523, 522, -1000, 864,
	-110, -126, 308, 670, 6220, 6220, -1000, -1000, 785, 785,
	785, -1000, -1000, 187, -1000, 291, -1000, 521, 966, 104,
	-1000, -1000, 291, 291, 419, -1000, -1000, -1000, -1000, 568,
	1002, -208, -1000, -1000, 852, -1000, 308, 308, 9171, 9171,
	9171, 785, 401, -1000, 567, 104, 592, 592, -1000, -1000,
	396, 1001, -112, 565, -1000, 565, 565, -1000, -1000, -1000,
	-1000, -1000, -1000, 376, -120, -1000, 9171, -1000, -1000, -1000,
	-127, -1000, -1000,
}
var yyPgo = [...]int{

	0, 28, 30, 1316, 1315, 1314, 35, 998, 1313, 1312,
	1308, 1307, 1305, 1304, 1303, 14, 897, 1301, 1300, 1299,
	1298, 1297, 1296, 1293, 1292, 1291, 1289, 1288, 1286, 1282,
	1281, 1280, 1273, 220, 1272, 1268, 1267, 45, 1265, 79,
	1264, 92, 1263, 1262, 1261, 55, 152, 46, 34, 80,
	1260, 27, 23, 21, 1259, 1258, 17, 1256, 40, 1255,
	1253, 51, 86, 1252, 1249, 37, 1248, 1234, 1233, 6,
	29, 1230, 64, 1224, 1223, 78, 172, 1221, 1217, 1213,
	1212, 1211, 1210, 50, 12, 26, 10, 31, 1209, 18,
	36, 1208, 53, 1207, 1206, 1205, 1204, 43, 1203, 76,
	1202, 38, 74, 1200, 54, 24, 52, 1199, 1198, 77,
	91, 82, 94, 1197, 69, 1196, 1195, 196, 1194, 1193,
	1192, 912, 1190, 93, 632, 1189, 1188, 1187, 1184, 1183,
	1182, 1180, 58, 59, 0, 4, 22, 42, 1179, 56,
	1030, 73, 13, 1178, 88, 1173, 1554, 47, 84, 44,
	1172, 1171, 1170, 1169, 1168, 1166, 1165, 319, 1163, 1140,
	1135, 1134, 25, 1128, 1127, 1126, 1125, 1124, 1123, 1122,
	1119, 1118, 1113, 1111, 62, 1108, 1107, 1104, 1103, 1102,
	1101, 1100, 1099, 1098, 1097, 1095, 41, 1094, 1092, 1091,
	32, 60, 1, 61, 1090, 1089, 1088, 81, 33, 1087,
	1086, 1085, 1084, 63, 57, 1083, 83, 48, 49, 1081,
	1080, 1079, 75, 19, 16, 1078, 11, 1075, 1070, 5,
	8, 1067, 1065, 1064, 1063, 1062, 1059, 1058, 2, 1057,
	1056, 71, 1055, 1054, 65, 3, 1053, 1050, 1049, 20,
	9, 7, 1048, 1047, 89, 209, 1046, 202,
}
var yyR1 = [...]int{

	0, 242, 243, 243, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 15, 15, 15, 16, 238, 238,
	239, 239, 240, 240, 241, 241, 17, 17, 18, 18,
	19, 19, 36, 36, 20, 21, 22, 22, 23, 236,
	236, 235, 162, 162, 7, 7, 24, 24, 24, 24,
	24, 237, 237, 237, 237, 237, 237, 237, 227, 227,
	228, 228, 222, 220, 220, 217, 217, 224, 224, 215,
	215, 221, 221, 218, 218, 216, 216, 223, 223, 232,
	232, 233, 233, 234, 234, 234, 193, 193, 192, 192,
	191, 191, 191, 194, 194, 194, 27, 208, 210, 210,
	211, 211, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 164, 166, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	179, 180, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 182, 182, 183, 183,
	184, 184, 185, 185, 167, 190, 190, 165, 161, 163,
	209, 209, 209, 204, 139, 139, 150, 150, 150, 150,
	229, 229, 230, 230, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 153, 153, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 152, 152, 152, 152, 152,
	154, 154, 154, 154, 154, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	156, 156, 156, 156, 156, 156, 156, 156, 203, 203,
	157, 157, 197, 197, 198, 198, 198, 195, 195, 196,
	196, 199, 199, 158, 158, 158, 158, 158, 158, 38,
	37, 37, 37, 119, 119, 119, 200, 186, 186, 186,
	160, 187, 187, 188, 188, 188, 189, 189, 189, 201,
	201, 202, 202, 159, 205, 205, 205, 205, 6, 6,
	225, 225, 225, 225, 219, 219, 4, 4, 4, 1,
	2, 2, 3, 3, 3, 5, 5, 207, 207, 206,
	206, 214, 214, 213, 25, 25, 25, 25, 25, 25,
	25, 25, 125, 125, 130, 130, 130, 26, 26, 26,
	66, 66, 131, 131, 8, 28, 9, 10, 129, 129,
	129, 11, 12, 12, 12, 12, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 44, 44, 64, 64, 64, 61,
	61, 62, 62, 63, 63, 60, 60, 65, 65, 65,
	32, 30, 31, 31, 31, 31, 246, 33, 34, 34,
	35, 35, 35, 41, 41, 41, 39, 39, 40, 40,
	47, 47, 46, 46, 48, 48, 48, 48, 138, 138,
	138, 137, 137, 50, 50, 51, 51, 52, 52, 53,
	53, 53, 67, 54, 54, 54, 54, 145, 145, 143,
	143, 143, 142, 142, 55, 55, 55, 55, 56, 56,
	56, 56, 57, 57, 59, 59, 58, 58, 68, 68,
	68, 68, 69, 69, 70, 70, 49, 49, 49, 49,
	49, 49, 49, 122, 122, 72, 72, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 82, 82, 82,
	82, 82, 82, 73, 73, 73, 73, 73, 73, 73,
	45, 45, 83, 83, 83, 89, 84, 84, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 80, 80,
	80, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	79, 79, 79, 79, 79, 79, 79, 79, 247, 247,
	81, 81, 81, 81, 42, 42, 42, 42, 42, 147,
	147, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 93, 93, 43, 43, 91, 91,
	92, 94, 94, 90, 90, 90, 75, 75, 75, 75,
	75, 75, 75, 77, 77, 77, 95, 95, 96, 96,
	97, 97, 98, 98, 99, 100, 100, 100, 101, 101,
	101, 101, 102, 102, 102, 74, 74, 74, 74, 74,
	74, 103, 103, 103, 103, 104, 104, 85, 85, 87,
	87, 86, 88, 105, 105, 106, 107, 107, 110, 110,
	109, 109, 109, 109, 109, 118, 118, 117, 117, 117,
	108, 108, 111, 111, 115, 115, 114, 116, 116, 116,
	116, 113, 113, 112, 112, 148, 148, 148, 120, 120,
	123, 123, 124, 124, 121, 121, 126, 126, 126, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 132,
	132, 132, 128, 128, 226, 226, 135, 135, 136, 136,
	140, 140, 141, 141, 144, 144, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 244, 245, 146,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 6, 7, 11, 0, 6,
	0, 4, 0, 6, 0, 4, 1, 3, 1, 3,
	6, 7, 1, 1, 8, 7, 3, 3, 11, 1,
	3, 5, 0, 2, 1, 1, 3, 5, 11, 11,
	11, 0, 1, 1, 5, 9, 7, 7, 1, 1,
	1, 1, 2, 3, 2, 0, 2, 1, 1, 0,
	2, 1, 3, 0, 2, 0, 2, 3, 3, 0,
	1, 1, 2, 4, 4, 2, 0, 1, 0, 1,
	1, 2, 2, 1, 1, 1, 4, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 4, 3,
	3, 4, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 3, 3, 4,
	1, 3, 3, 3, 1, 1, 3, 1, 1, 1,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 3, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 4, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 3, 4, 1, 1, 1, 1, 0, 3, 3,
	2, 0, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 1, 2, 7, 7, 8, 9, 0, 1,
	3, 1, 2, 3, 0, 2, 0, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 3, 2, 6, 7, 7, 7, 9, 7,
	7, 7, 0, 1, 0, 1, 1, 6, 5, 4,
	1, 3, 0, 1, 3, 3, 2, 2, 0, 1,
	1, 4, 2, 3, 2, 2, 4, 4, 3, 6,
	3, 3, 4, 4, 4, 6, 5, 5, 3, 3,
	5, 6, 7, 3, 3, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 0, 3, 1, 1, 1, 0,
	2, 1, 1, 0, 1, 1, 1, 0, 2, 2,
	4, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 1, 2,
	3, 3, 3, 2, 3, 1, 2, 1, 1, 1,
	2, 3, 2, 2, 0, 2, 3, 2, 2, 2,
	1, 0, 2, 2, 2, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -242, -14, -15, -19, -20, -21, -22, -24, -25,
	-26, -8, -28, -29, -32, -30, -9, -10, -11, -12,
	-13, -31, -23, -16, -17, 6, -36, 8, 9, 48,
	-27, 129, 130, 131, 152, 133, 145, 51, 68, 272,
	147, 279, 282, 283, 286, 285, 300, 44, 146, 150,
	151, 19, -244, 7, 256, 71, -243, 313, -97, 14,
	-35, 5, -33, -246, -33, -33, -33, -33, -208, 71,
	-7, -226, 25, 34, 136, 248, 249, 37, -121, 140,
	-125, 137, -7, 36, -131, 136, 136, 241, 129, 236,
	274, -63, -64, 276, 277, 243, 136, 278, 239, 275,
	238, 235, 176, 74, 50, 137, 30, 28, 136, -140,
	74, -134, 262, 21, 207, 153, 172, 263, 305, 83,
	206, 209, 210, 148, 168, 212, 211, 204, 162, 46,
	202, 186, 280, 267, 245, 201, 163, 25, 187, 191,
	287, 28, 214, 185, 29, 30, 264, 53, 189, 215,
	57, 205, 216, 193, 192, 194, 175, 17, 217, 218,
	188, 190, 266, 150, 219, 56, 198, 281, 283, 243,
	203, 177, 166, 167, 152, 268, 138, 169, 300, 301,
	303, 302, 304, 306, 307, -146, -146, -129, 266, 209,
	-146, 284, -146, -146, 301, 303, 302, 304, 305, 307,
	272, -146, -146, -146, -146, 210, -15, -101, 16, 15,
	-18, -16, -244, 6, 39, 40, -41, 58, 59, -34,
	-121, -58, -140, 10, -107, -108, -110, 284, -148, -109,
	288, 289, 287, -136, -118, 290, -135, -133, 176, 173,
	74, -134, 89, 41, 43, 196, 92, 159, 124, 181,
	15, 23, 93, 170, 123, 244, 208, 257, 129, 66,
	247, 250, 246, 248, 236, 164, 47, 9, 44, 146,
	40, 117, 131, 96, 97, 274, 149, 42, 147, 86,
	18, 69, 10, 50, 12, 13, 141, 140, 108, 137,
	64, 7, 157, 158, 125, 45, 105, 60, 38, 62,
	106, 16, 251, 252, 49, 184, 180, 261, 183, 156,
	179, 119, 67, 54, 90, 84, 165, 87, 70, 151,
	88, 14, 65, 277, 143, 276, 161, 107, 132, 256,
	32, 63, 249, 6, 260, 48, 145, 155, 61, 136,
	237, 36, 182, 154, 178, 95, 139, 85, 278, 5,
	37, 199, 8, 68, 142, 253, 254, 255, 52, 174,
	171, 275, 265, 94, 11, 200, -237, 287, 281, 273,
	269, -209, -204, -139, 74, -134, -124, 141, 137, 137,
	137, -124, 136, 136, 74, -123, 141, -58, -58, 240,
	136, 248, -146, -146, 237, -60, 244, 245, -62, 10,
	108, -146, -146, -146, 243, -146, -146, -146, -146, -146,
	-146, -146, -58, 77, -146, -86, -244, -86, -146, -58,
	-146, -146, 306, 285, 286, 20, -245, 73, -102, 18,
	49, -49, -71, 90, -76, 47, 42, -75, -72, -90,
	-88, -89, 124, 113, 114, 121, 91, 125, -80, -78,
	-79, -81, 76, 75, 77, 78, 79, 80, 84, 85,
	86, -135, -140, -86, -244, 62, 63, 257, 258, 261,
	259, 93, 52, 246, 255, 254, 253, 251, 252, 247,
	250, 141, 248, 119, 256, 74, -134, -98, -99, -49,
	-97, -15, -33, 54, -39, 40, 82, -59, 45, -58,
	48, 126, -58, 72, -111, -114, -112, 291, 293, -109,
	284, 98, -117, -135, 76, 47, -117, 48, 15, 15,
	73, 72, -150, -153, -155, -154, -156, -151, -152, 170,
	171, 124, 174, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 48, 148, 166, 167, 168, 169, 187,
	188, 189, 190, 191, 192, 193, 194, 153, 172, 263,
	154, 155, 156, 157, 158, 159, 161, 162, 163, 164,
	165, -144, 74, -134, 90, 74, 74, 74, -58, -58,
	-123, 70, -144, 42, -44, 10, -58, -140, -61, -62,
	-62, -58, -61, -146, -146, -146, -84, -49, -146, -132,
	139, 41, -146, -146, -146, 76, 8, 108, 89, 88,
	105, 72, 17, -49, -73, 108, 90, 106, 107, 92,
	110, 109, 120, 113, 114, 115, 116, 117, 118, 119,
	111, 112, 123, 98, 99, 100, 101, 102, 103, 104,
	-122, -244, -89, -244, 127, 128, -76, -76, -76, -76,
	-76, -76, -244, 126, -15, -244, -244, -244, -244, -244,
	-244, -244, -93, -49, -244, -247, -244, -247, -247, -247,
	-247, -247, -247, -247, -244, -244, -244, -244, 72, -100,
	43, 44, -101, -245, -41, -77, -135, 77, 80, -40,
	61, -74, 48, 52, -15, -244, -58, -105, -106, -90,
	-135, -140, -141, -140, -133, 173, 176, -70, 11, -110,
	-148, -113, 72, -115, 72, 292, 294, 295, -111, 70,
	87, -49, -187, 123, -244, 271, 26, 27, -210, -211,
	-212, -165, -161, -163, -164, -166, -167, -168, -169, -170,
	-171, -172, -173, -174, -175, -176, -177, -178, -179, -180,
	-181, -182, -183, -184, -185, 83, 280, -193, 196, 207,
	51, 208, 209, 210, 137, 212, 213, 214, 29, 215,
	216, 217, 218, 219, 220, 221, 222, 223, 47, -204,
	-205, -206, -5, -4, 137, 38, 34, 25, 24, -229,
	-230, -231, -199, -158, -200, -201, -202, -159, -38, -160,
	-188, -189, 84, 90, 47, 196, 143, 38, 37, 83,
	70, 123, 206, 203, -195, 199, -157, 71, -157, -157,
	-157, -157, -186, 173, -186, -186, -186, 71, 71, -157,
	-157, -157, -197, 71, -197, -197, -198, 71, -198, -232,
	-233, -234, -193, 42, 70, 70, 70, -127, 132, 280,
	257, 134, 131, 135, 130, 196, 173, 83, 47, 14,
	268, 74, -66, -58, -58, -101, 242, -146, -146, -65,
	106, 11, -140, -58, -61, -146, 72, -245, -58, -126,
	140, 256, 56, -49, -49, -82, 84, 90, 85, 86,
	-49, -49, -76, -83, -86, -89, 81, 108, 106, 107,
	92, -76, -76, -76, -76, -76, -76, -76, -76, -76,
	-76, -76, -76, -76, -76, -76, -147, 74, 76, 74,
	-75, -75, -135, -47, 40, -46, -48, 115, -49, -140,
	-136, -141, -133, -245, -15, -46, -46, -49, -49, -46,
	-39, -91, -92, 94, -135, -245, -46, -47, -46, -46,
	-99, -102, -120, 18, 10, 52, 52, -46, -104, 70,
	-105, -85, -87, -86, -244, -15, -103, -135, -70, 72,
	98, 126, -97, -49, -112, -114, -116, 296, 293, 299,
	74, -139, -244, -244, -244, -212, -192, 98, -192, 123,
	-191, 176, 173, 170, -192, -192, -192, -192, -192, 211,
	211, -192, -192, -192, -192, -192, -192, -192, -192, -192,
	-192, -192, -192, -192, -6, 74, -207, -206, 143, 37,
	35, -231, 84, 76, 77, 78, 84, -37, -72, -119,
	246, 251, 252, 38, 38, 76, 8, -190, 74, 76,
	201, 202, 47, 47, 204, 205, -196, 200, 77, -186,
	-186, 48, -203, 76, -203, 77, 77, -234, 123, -191,
	-174, -58, -58, -58, -146, -132, -128, 137, 38, 98,
	139, 144, 144, 144, -130, 72, 32, 23, -146, 76,
	76, -49, -61, -70, -49, -146, 45, 57, 84, 85,
	86, -83, -76, -76, -76, -45, 149, 89, -245, -245,
	-46, 72, -138, -137, 41, -135, 76, 126, -244, 126,
	-245, -245, -245, 72, 142, 41, -245, -46, -94, -92,
	96, -49, -245, -245, -245, -245, -245, -58, -238, 45,
	46, -104, 72, -245, -245, -245, 72, 126, -97, -106,
	-49, -136, -101, 293, 297, 298, -245, -139, -139, -139,
	76, -190, -192, -192, 48, 48, 77, 77, 77, 76,
	76, -192, -192, 77, 76, 74, 77, 77, 77, 77,
	47, 76, 47, 202, 201, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 77, 47, 77, 47,
	77, 47, 74, -134, -2, -1, 142, -6, 38, -207,
	71, -37, 73, 74, 124, 73, 72, 73, 72, 73,
	72, -192, -192, -244, -244, -244, -58, -146, 74, 173,
	-208, 74, -204, -58, -65, 136, -45, 89, -76, -76,
	-245, -48, -137, 115, -141, -47, -136, -149, 124, 170,
	148, 168, 164, 185, 175, 198, 166, 199, -147, -149,
	262, -97, 97, -49, 95, -50, 10, 312, 38, -87,
	52, -15, -244, -135, -135, -101, -245, -245, -245, -190,
	-190, 76, 76, 71, -3, 26, 22, 33, 71, -2,
	-6, 73, 77, 76, 77, 77, -228, 74, 47, -194,
	74, 124, 47, -214, -213, -135, -214, -214, 48, -58,
	-76, 126, -245, -245, -157, -157, -157, -198, -157, 158,
	-157, 158, -245, -245, -244, -43, 260, -49, -70, -51,
	-52, -53, -54, -67, -89, -244, -58, 76, 8, -85,
	-15, 126, -244, -162, 270, -162, -214, -214, 71, -2,
	73, 73, 73, -245, 72, -157, -245, -245, 74, -239,
	245, 115, -186, 74, -76, -245, 76, -95, 12, 72,
	-55, -56, -57, 60, 64, 66, 61, 62, 63, 67,
	-145, 41, -51, -244, -143, -142, 41, -140, 76, -239,
	-105, -245, -135, -236, -235, 269, 77, 73, 73, -214,
	71, -217, -213, -215, -218, -240, 310, 311, -42, 108,
	265, -96, 13, 15, -52, -53, -52, -53, 60, 60,
	60, 65, 60, 65, 60, -56, -140, -245, -68, 68,
	140, 69, -142, -240, 72, -245, 74, -219, -219, 73,
	-214, -216, -224, -220, -222, 29, 83, 142, -216, -221,
	-220, 265, -216, -220, -241, 308, 15, 15, -245, 263,
	67, 266, -49, -84, 70, 70, 60, 60, 137, 137,
	137, -241, -235, 52, -225, 29, -1, 83, 265, -219,
	73, -223, 49, 21, -192, 76, -227, 26, 22, 31,
	310, 76, 76, 57, 264, 267, -49, -49, -244, -244,
	-244, 108, -192, 76, 31, -219, -192, -192, 77, 74,
	15, 309, 57, -69, -135, -69, -69, -86, 77, 74,
	-228, -228, 76, 15, 265, -245, 72, -245, -245, 76,
	266, -135, 267,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 620, 0, 406, 406, 406, 406, 406,
	0, 714, 694, 332, 342, 0, 393, 0, 0, 927,
	927, 348, 927, 0, 927, 927, 0, 927, 927, 927,
	927, 0, 0, 42, 43, 925, 1, 3, 628, 0,
	0, 410, 413, 408, 694, 0, 0, 0, 61, 0,
	692, 0, 0, 0, 692, 54, 55, 715, 0, 695,
	0, 0, 690, 333, 0, 343, 0, 0, 0, 927,
	927, 0, 0, 927, 927, 927, 0, 927, 927, 927,
	927, 927, 927, 927, 394, 386, 387, 388, 0, 401,
	720, 721, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 346, 347, 0, 349, 350,
	352, 927, 354, 355, 0, 0, 927, 0, 927, 927,
	0, 402, 403, 404, 405, 0, 36, 632, 0, 0,
	620, 38, 0, 406, 411, 412, 416, 414, 415, 407,
	0, 0, 466, 0, 46, 47, 656, 0, 0, 658,
	685, 686, -2, 0, 0, 0, 718, 719, -2, 738,
	716, 717, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 56, 62, 63, 0,
	0, 0, 180, 0, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 690, 0, 0, 0, 344, 345, 384,
	0, 0, 368, 369, 389, 0, 395, 396, 0, 391,
	392, 373, 374, 375, 389, 377, 378, 379, 380, 381,
	382, 383, 927, 927, 353, 927, 0, 927, 358, 709,
	360, 361, 927, 927, 927, 0, 37, 926, 24, 0,
	0, 629, 476, 0, 481, 483, 0, 518, 519, 520,
	521, 522, 0, 0, 0, 0, 0, 0, 544, 545,
	546, 547, 606, 607, 608, 609, 610, 611, 612, 485,
	486, 603, 0, 652, 0, 0, 0, 0, 0, 0,
	0, 594, 0, 568, 568, 568, 568, 568, 568, 568,
	568, 0, 0, 0, 0, -2, -2, 621, 622, 625,
	628, 36, 413, 0, 418, 417, 409, 0, 0, 465,
	0, 0, 474, 0, 670, 681, 674, 0, 0, 659,
	0, 0, 663, 667, 668, 669, 281, 666, 0, 0,
	-2, 306, 190, 257, 187, 188, 189, 250, 205, 250,
	250, 250, 250, 277, 277, 277, 277, 233, 234, 235,
	236, 237, 0, 0, 220, 250, 250, 250, 224, 240,
	241, 242, 243, 244, 245, 246, 247, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 252, 252, 252, 254,
	254, -2, 724, 725, 0, 0, 0, 0, 106, 0,
	0, 0, 339, 691, 628, 0, 927, 927, 397, 0,
	0, 389, 927, 400, 351, 356, 0, 516, 357, 0,
	710, 711, 362, 363, 364, 696, 633, 0, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 503, 504, 505, 506, 507, 508, 509,
	482, 0, 496, 0, 0, 0, 538, 539, 540, 541,
	542, 0, 420, 0, 36, 0, 0, 0, 0, 0,
	0, 416, 0, 595, 0, 560, 0, 561, 562, 563,
	564, 565, 566, 567, 0, 420, 0, 0, 0, 624,
	626, 627, 632, 39, 416, 0, 613, 0, 0, 0,
	419, 645, 0, 0, -2, 0, 464, 474, 653, 0,
	603, 0, 467, 722, 723, 738, 739, 620, 0, 657,
	0, 672, 0, 673, 0, 0, 683, 684, 671, 660,
	661, 662, 664, 0, 0, 0, 0, 0, 107, -2,
	110, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 98, 98, 0, 98, 98,
	98, 98, 98, 0, 0, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 97, 181,
	182, 298, 317, 0, 319, 320, 315, -2, 307, 183,
	191, 192, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 261, 0, 0, 276, 0, 290, 292, 0,
	0, 0, 0, 0, 259, 258, 204, 0, 277, 277,
	227, 228, 229, 0, 230, 231, 232, 0, 0, 221,
	222, 223, 215, 0, 216, 217, 218, 0, 219, 57,
	-2, 91, 0, 693, 0, 0, 0, 927, 709, 0,
	706, 0, 704, 0, 699, 700, 701, 702, 703, 705,
	707, 708, 334, 340, 338, 927, 0, 366, 367, 370,
	0, 0, 390, 389, 474, 376, 0, 651, 927, 0,
	697, 698, 0, 477, 478, 480, 497, 0, 499, 501,
	630, 631, 487, 488, 512, 513, 514, 0, 0, 0,
	0, 510, 492, 0, 523, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 537, 579, 580, 0,
	535, 536, 543, 0, 0, 421, 422, 424, 428, 0,
	604, 0, -2, 515, 36, 0, 0, 0, 0, 0,
	0, 601, 598, 0, 0, 569, 0, 0, 0, 0,
	623, 25, 0, 688, 689, 614, 615, 28, 40, 0,
	645, 635, 647, 649, 0, 36, 0, 641, 620, 0,
	0, 0, 628, 475, 682, 675, 676, 0, 0, 680,
	282, 0, 0, 0, 0, 111, 0, 99, 0, 98,
	98, 100, 0, 0, 0, 0, 0, 0, 0, 98,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 299, 298, 318, 0, 317,
	308, 193, 262, 263, 264, 265, 266, 267, 268, 270,
	273, 274, 275, 289, 291, 293, 0, 280, 175, 176,
	283, 284, 285, 286, 287, 288, 186, 260, 0, 225,
	226, 0, 0, 248, 0, 0, 0, 92, 98, 98,
	95, 0, 0, 0, 324, 0, 927, 712, 713, 0,
	0, 0, 0, 0, 337, 0, 335, 336, 365, 385,
	398, 399, 397, 371, 517, 359, 0, 634, 498, 500,
	502, 489, 510, 493, 0, 490, 0, 0, 484, 548,
	0, 0, 425, 429, 0, 431, 432, 0, 420, 0,
	-2, 551, 552, 0, 0, 0, 0, 620, 0, 599,
	0, 0, 559, 570, 571, 572, 573, 26, 433, 0,
	0, 41, 0, 650, -2, 0, 0, 0, 628, 654,
	655, 604, 45, 677, 678, 679, 64, 0, 0, 0,
	177, 178, 0, 0, 101, 102, 136, 137, 174, 139,
	140, 0, 0, 143, 144, 145, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 0, 311, 0, 0, 310, 298,
	0, 269, 251, 278, 279, 238, 0, 239, 0, 255,
	0, 0, 0, 0, 0, 0, 325, 326, 327, 0,
	329, 330, 331, 341, 372, 0, 491, 0, 511, 494,
	549, 423, 430, 426, 0, 0, 605, 0, 250, 250,
	584, 250, 254, 587, 250, 589, 250, 592, 0, 0,
	0, 596, 558, 602, 0, 474, 0, 0, 0, 648,
	0, -2, 0, 643, 642, 44, 0, 52, 52, 138,
	179, 141, 142, 0, 309, 312, 313, 314, 0, 0,
	310, 271, 0, 249, 0, 0, 93, 70, 71, 94,
	103, 104, 105, 0, 321, 250, 0, 0, 0, 30,
	495, 0, 550, 553, 581, 277, 585, 586, 588, 590,
	591, 593, 555, 554, 0, 0, 0, 600, 616, 434,
	435, 437, 438, 439, 447, 0, 449, 30, 0, 638,
	36, 0, 0, 66, 0, 67, 0, 0, 0, 0,
	272, 253, 256, 75, 0, 323, 79, 83, 328, 32,
	0, 427, 582, 583, 574, 557, 597, 618, 0, 0,
	0, 0, 0, 454, 0, 0, 457, 0, 0, 0,
	0, 448, 0, 0, 468, 450, 0, 452, 453, 32,
	646, -2, 644, 0, 49, 0, 53, 304, 304, 0,
	0, 85, 322, 85, 85, 34, 0, 0, 0, 0,
	0, 27, 0, 0, 436, 443, 0, 446, 455, 456,
	458, 0, 460, 0, 462, 463, 440, 441, 442, 0,
	0, 0, 451, 34, 0, 65, 0, 294, 295, 304,
	0, 58, 76, 77, 78, 98, 0, 0, 59, 80,
	81, 0, 60, 84, 48, 0, 0, 0, 556, 0,
	0, 0, 619, 617, 0, 0, 459, 461, 0, 0,
	0, 29, 50, 0, 305, 98, 301, 0, 0, 296,
	304, 86, 98, 98, 0, 74, 72, 68, 69, 0,
	0, 0, 31, 575, 0, 578, 444, 445, 0, 0,
	0, 0, 0, 302, 0, 297, 0, 0, 73, 82,
	0, 0, 576, 0, 472, 0, 0, 51, 300, 303,
	87, 88, 35, 0, 0, 469, 0, 470, 471, 33,
	0, 473, 577,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 91, 3, 3, 3, 118, 110, 3,
	71, 73, 115, 113, 72, 114, 126, 116, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 313,
	99, 98, 100, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 120, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 121,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 92, 93, 94, 95,
	96, 97, 101, 102, 103, 104, 105, 106, 107, 108,
	111, 112, 117, 119, 122, 123, 124, 125, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1046
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1052
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1054
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1083
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, OutFile: yyDollar[7].outFile, From: yyDollar[8].tableExprs, Where: NewWhere(WhereStr, yyDollar[9].expr), GroupBy: GroupBy(yyDollar[10].exprs), Having: NewWhere(HavingStr, yyDollar[11].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.outFile = nil
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1111
		{
			fe := byte('\\')
			if len(yyDollar[4].str) > 0 {
				fe = []byte(yyDollar[4].str)[0]
			}
			ft := byte(',')
			if len(yyDollar[5].str) > 0 {
				ft = []byte(yyDollar[5].str)[0]
			}
			feClose := byte(0)
			if len(yyDollar[5].str) > 1 {
				feClose = []byte(yyDollar[5].str)[1]
			}
			lt := byte('\n')
			if len(yyDollar[6].str) > 0 {
				lt = []byte(yyDollar[6].str)[0]
			}
			yyVAL.outFile = &OutFile{OutString: string(yyDollar[3].bytes), FieldEscape: fe, FieldTerminate: ft, FieldEnclosed: feClose, LineTerminate: lt}
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.str = "\""
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.str = ","
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1135
		{
			ft := byte(',')
			if len(yyDollar[3].bytes) > 0 {
				ft = yyDollar[3].bytes[0]
			}
			fe := byte(0)
			if len(yyDollar[6].bytes) > 0 {
				fe = yyDollar[6].bytes[0]
			}
			yyVAL.str = string([]byte{ft, fe})
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.str = "\n"
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1172
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1183
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1227
		{
			fe := byte('"')
			if len(yyDollar[9].str) > 0 {
				fe = []byte(yyDollar[9].str)[0]
			}
			ft := byte(',')
			if len(yyDollar[10].str) > 0 {
				ft = []byte(yyDollar[10].str)[0]
			}
			fEnclose := byte(0)
			if len(yyDollar[10].str) > 1 {
				fEnclose = []byte(yyDollar[10].str)[1]
			}
			lt := byte('\n')
			if len(yyDollar[11].str) > 0 {
				lt = []byte(yyDollar[11].str)[0]
			}
			outFile := &OutFile{OutString: string(yyDollar[4].bytes), FieldEscape: fe, FieldTerminate: ft, FieldEnclosed: fEnclose, LineTerminate: lt}

			yyVAL.statement = &Load{Table: yyDollar[8].tableName, OutFile: outFile, IgnoreOrReplace: yyDollar[5].byt}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.optVal = nil
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1271
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1291
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1298
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 58:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 59:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 60:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 65:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 67:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.partitionOption = &PartOptHash2{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.str = "hash"
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.str = "btree"
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.str = "default"
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1466
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1477
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1534
		{
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1536
		{
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1539
		{
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1541
		{
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.str = "character set"
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.str = "char set"
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.str = "default"
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1573
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1727
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1855
		{
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1871
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1908
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1924
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2078
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2083
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2123
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.optVal = nil
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2541
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2549
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.str = yyDollar[3].str
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2596
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.str = ""
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2645
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2665
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2684
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2690
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2702
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 296:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2716
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 297:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2727
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2753
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2782
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2786
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2792
		{
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2795
		{
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2798
		{
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2804
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2809
		{
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2812
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2818
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2822
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2826
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2836
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2841
		{
			// set empty
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2846
		{
			yyVAL.str = yyDollar[1].str
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2853
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2857
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2873
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 324:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 325:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2883
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 326:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2888
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 330:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.byt = 0
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.byt = 1
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2923
		{
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2925
		{
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2927
		{
		}
	case 337:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2931
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2943
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2948
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2962
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2968
		{
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2970
		{
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2974
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2980
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2986
		{
			yyVAL.statement = &Xa{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2992
		{
			yyVAL.statement = &Explain{}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2997
		{
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2999
		{
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3001
		{
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3005
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3011
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3015
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3019
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3023
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3029
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3033
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3037
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 359:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3041
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3045
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3049
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3057
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3061
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 365:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3071
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3075
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3079
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3083
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3087
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3091
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3102
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3109
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3113
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3117
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3121
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3125
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3129
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3133
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3137
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3141
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3145
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3149
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3154
		{
			yyVAL.str = ""
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3158
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3164
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3172
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3178
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3182
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3198
		{
			yyVAL.str = ""
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3202
		{
			yyVAL.str = "full "
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3218
		{
			yyVAL.showFilter = nil
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3222
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3232
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3238
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3244
		{
			yyVAL.statement = &OtherRead{}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3248
		{
			yyVAL.statement = &OtherRead{}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3252
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3256
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3261
		{
			setAllowComments(yylex, true)
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3264
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3270
		{
			yyVAL.bytes2 = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3274
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3280
		{
			yyVAL.str = UnionStr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3284
		{
			yyVAL.str = UnionAllStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3288
		{
			yyVAL.str = UnionDistinctStr
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3293
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3297
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3301
		{
			yyVAL.str = SQLCacheStr
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3306
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3310
		{
			yyVAL.str = DistinctStr
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3315
		{
			yyVAL.str = ""
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3319
		{
			yyVAL.str = StraightJoinHint
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3324
		{
			yyVAL.selectExprs = nil
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3328
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3334
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3338
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3344
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3348
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3352
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3356
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3361
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3365
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3369
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3376
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3381
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3385
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3391
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3395
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3405
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3409
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3413
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3419
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3432
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3436
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3440
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3444
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3449
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3453
		{
			yyVAL.empty = struct{}{}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3458
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3462
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3466
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3473
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3479
		{
			yyVAL.str = JoinStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3483
		{
			yyVAL.str = JoinStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3487
		{
			yyVAL.str = JoinStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3491
		{
			yyVAL.str = StraightJoinStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3497
		{
			yyVAL.str = LeftJoinStr
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3501
		{
			yyVAL.str = LeftJoinStr
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3505
		{
			yyVAL.str = RightJoinStr
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3509
		{
			yyVAL.str = RightJoinStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3515
		{
			yyVAL.str = NaturalJoinStr
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3519
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3529
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3533
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3539
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3543
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3548
		{
			yyVAL.indexHints = nil
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3552
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3556
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3560
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3566
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3570
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3575
		{
			yyVAL.expr = nil
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3579
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3585
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3589
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3593
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3597
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3601
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3605
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3609
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3615
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3619
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3625
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3629
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3635
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3639
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3643
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3647
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3651
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3655
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3659
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3663
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3667
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3671
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3677
		{
			yyVAL.str = IsNullStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3681
		{
			yyVAL.str = IsNotNullStr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3685
		{
			yyVAL.str = IsTrueStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3689
		{
			yyVAL.str = IsNotTrueStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3693
		{
			yyVAL.str = IsFalseStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3697
		{
			yyVAL.str = IsNotFalseStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3703
		{
			yyVAL.str = EqualStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3707
		{
			yyVAL.str = LessThanStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3711
		{
			yyVAL.str = GreaterThanStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3715
		{
			yyVAL.str = LessEqualStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3719
		{
			yyVAL.str = GreaterEqualStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3723
		{
			yyVAL.str = NotEqualStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3727
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3732
		{
			yyVAL.expr = nil
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3736
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3742
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3746
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3750
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3756
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3762
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3766
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3772
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3776
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3780
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3784
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3788
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3792
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3796
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3800
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3804
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3808
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3812
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3816
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3820
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3824
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3828
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3832
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3836
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3840
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3844
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3848
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3852
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3856
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3864
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3878
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3882
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3886
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3904
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3908
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3912
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3922
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3926
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3930
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 554:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3934
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3938
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 556:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:3942
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 557:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3946
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3950
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3954
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3964
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3968
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3972
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3976
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3981
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3986
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3991
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3996
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4011
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4015
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4019
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4023
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4029
		{
			yyVAL.str = ""
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4033
		{
			yyVAL.str = BooleanModeStr
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4037
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 577:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4041
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4045
		{
			yyVAL.str = QueryExpansionStr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4051
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4055
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4061
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4069
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4073
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4077
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4087
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4091
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4095
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4099
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4103
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4107
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4111
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4116
		{
			yyVAL.expr = nil
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4120
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4125
		{
			yyVAL.str = string("")
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4129
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4135
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4139
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4145
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4150
		{
			yyVAL.expr = nil
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4154
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4160
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4164
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4168
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4174
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4178
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4182
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4186
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4190
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4194
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4198
		{
			yyVAL.expr = &NullVal{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4204
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4213
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4217
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4222
		{
			yyVAL.exprs = nil
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4226
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4231
		{
			yyVAL.expr = nil
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4235
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4240
		{
			yyVAL.orderBy = nil
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4244
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4250
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4254
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4260
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4265
		{
			yyVAL.str = AscScr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4269
		{
			yyVAL.str = AscScr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4273
		{
			yyVAL.str = DescScr
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4278
		{
			yyVAL.limit = nil
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4282
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4286
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4290
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4295
		{
			yyVAL.str = ""
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4299
		{
			yyVAL.str = ForUpdateStr
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4303
		{
			yyVAL.str = ShareModeStr
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4316
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4320
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4324
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4329
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4333
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4337
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4344
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4348
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4352
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4356
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4361
		{
			yyVAL.updateExprs = nil
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4365
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4371
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4375
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4381
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4385
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4391
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4397
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4407
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4411
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4417
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4423
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4427
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4433
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4437
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4444
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4448
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4452
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4456
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4460
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4467
		{
			yyVAL.bytes = []byte("charset")
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4473
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4477
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4481
		{
			yyVAL.expr = &Default{}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4487
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4491
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4497
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4501
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4507
		{
			yyVAL.str = ""
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4511
		{
			yyVAL.str = yyDollar[2].str
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4517
		{
			yyVAL.str = yyDollar[3].str
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4523
		{
			yyVAL.str = RepeatableRead
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4527
		{
			yyVAL.str = ReadCommitted
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4531
		{
			yyVAL.str = ReadUncommitted
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4535
		{
			yyVAL.str = Serializable
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4541
		{
			yyVAL.str = ""
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4545
		{
			yyVAL.str = yyDollar[2].str
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4551
		{
			yyVAL.str = TxReadWrite
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4555
		{
			yyVAL.str = TxReadOnly
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4561
		{
			yyVAL.str = SessionStr
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4565
		{
			yyVAL.str = SessionStr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4569
		{
			yyVAL.str = GlobalStr
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4578
		{
			yyVAL.byt = 0
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4582
		{
			yyVAL.byt = 1
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4587
		{
			yyVAL.byt = 0
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4591
		{
			yyVAL.byt = 1
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4596
		{
			yyVAL.str = ""
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4600
		{
			yyVAL.str = IgnoreStr
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4604
		{
			yyVAL.byt = byte(0)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4605
		{
			yyVAL.byt = byte(1)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4606
		{
			yyVAL.byt = byte(2)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4610
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4614
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4618
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4622
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4626
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4630
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4634
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4638
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4642
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4646
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4651
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4655
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4659
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4665
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4669
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4674
		{
			yyVAL.str = IndexStr
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4678
		{
			yyVAL.str = UniqueStr
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4684
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4688
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4695
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4701
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4705
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4712
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4718
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4722
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4948
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4957
		{
			decNesting(yylex)
		}
	case 927:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4962
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
